// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String                        @default("Building2")
  colorHex                  String                        @default("#2563eb")
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowCrossProviderLoans   Boolean                       @default(false)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  description                 String?
  icon                        String                        @default("PersonStanding")
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                        @default("Active") // "Active", "Disabled"
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFee                  String? // JSON FeeRule
  dailyFee                    String? // JSON DailyFeeRule
  penaltyRules                String? // JSON PenaltyRule[]
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationProduct ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id              String         @id @default(cuid())
  borrowerId      String
  borrower        Borrower       @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct    @relation(fields: [productId], references: [id])
  loanAmount      Float
  serviceFee      Float
  repaidAmount    Float?
  penaltyAmount   Float          @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String         @default("Unpaid") // "Paid", "Unpaid"
  payments        Payment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id])
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  data       String // JSON string of the uploaded data for this borrower
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([borrowerId, configId])
}

model DataProvisioningConfig {
  id           String                @id @default(cuid())
  providerId   String
  provider     LoanProvider          @relation(fields: [providerId], references: [id])
  name         String
  columns      String // JSON string representing DataColumn[]
  uploads      DataProvisioningUpload[]
  products     LoanProduct[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id         String                 @id @default(cuid())
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName   String
    rowCount   Int
    uploadedAt DateTime               @default(now())
    uploadedBy String
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // Stored as a JSON string
  users       User[]
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active")
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
  id              String                        @id @default(cuid())
  providerId      String
  provider        LoanProvider                  @relation(fields: [providerId], references: [id])
  parameters      String // JSON string of ScoringParameter[] at the time of saving
  savedAt         DateTime                      @default(now())
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  configId   String
  config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  productId  String
  product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedAt DateTime                    @default(now())
  assignedBy String

  @@id([configId, productId])
}

model LoanAmountTier {
    id String @id @default(cuid())
    productId String
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore Int
    toScore Int
    loanAmount Float
}

model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name String
    type String // "Receivable", "Received", "Income"
    category String // "Principal", "Interest", "ServiceFee", "Penalty"
    balance Float @default(0)

    @@unique([providerId, name])
}
