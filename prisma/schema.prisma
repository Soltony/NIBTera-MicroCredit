// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String   @id @default(cuid())
  name                      String   @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float    @default(0)
  allowCrossProviderLoans   Boolean  @default(false)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model LoanProduct {
  id                          String      @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                        @default("Active") // Active, Disabled
  allowConcurrentLoans        Boolean                       @default(false)
  
  // Fee Structures
  serviceFeeEnabled           Boolean?
  serviceFee                  String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number }
  dailyFeeEnabled             Boolean?
  dailyFee                    String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean?
  penaltyRules                String? // JSON stored as string: PenaltyRule[]

  // Data Provisioning Link
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)    

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  
  @@unique([name, providerId])
}

model Loan {
  id              String      @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  borrowerId      String
  borrower        Borrower     @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float       @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String      // "Unpaid", "Paid"
  repaidAmount    Float?
  payments        Payment[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
}

model Borrower {
  id              String @id
  loans           Loan[]
  provisionedData ProvisionedData[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProvisionedData {
  id        String   @id @default(cuid())
  borrowerId  String
  borrower    Borrower @relation(fields: [borrowerId], references: [id])
  configId  String
  config      DataProvisioningConfig @relation(fields: [configId], references: [id])
  data      String // JSON blob
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
    id        String   @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    name      String
    columns   String // JSON array of { name: string, type: 'string' | 'number' | 'date', isIdentifier: boolean }
    uploads   DataProvisioningUpload[]
    products  LoanProduct[]
    provisionedData ProvisionedData[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])
    fileName   String
    rowCount   Int
    uploadedBy String
    uploadedAt DateTime @default(now())
}

model LoanAmountTier {
    id         String      @id @default(cuid())
    productId  String
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore  Int
    toScore    Int
    loanAmount Float
}

model ScoringParameter {
    id         String   @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    name       String
    weight     Int
    rules      ScoringRule[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model ScoringRule {
    id          String   @id @default(cuid())
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field       String
    condition   String
    value       String
    score       Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model ScoringConfigurationHistory {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id])
    parameters String // JSON string of ScoringParameter[]
    savedAt DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String   @id @default(cuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String
    @@unique([configId, productId])
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  status        String        // "Active", "Inactive"
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON stored as string
  users       User[]
}

model LedgerAccount {
    id        String @id @default(cuid())
    providerId String
    provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name      String
    type      String // Receivable, Received, Income
    category  String // Principal, Interest, ServiceFee, Penalty
    balance   Float  @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
