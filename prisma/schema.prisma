// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User and Auth Models
model User {
  id          String   @id @default(uuid())
  fullName    String
  email       String   @unique
  phoneNumber String   @unique
  password    String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roleName    String
  role        Role     @relation(fields: [roleName], references: [name])
  providerId  String?
  provider    LoanProvider? @relation(fields: [providerId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // Changed from Json to String
  users       User[]
}

// Loan Models
model LoanProvider {
  id          String   @id @default(uuid())
  name        String   @unique
  icon        String
  colorHex    String
  products    LoanProduct[]
  users       User[]
  scoringParameters ScoringParameter[]
  scoringHistory    ScoringConfigurationHistory[]
  loans       LoanDetails[] // Added back-relation
}

model LoanProduct {
  id            String   @id @default(uuid())
  name          String
  description   String
  icon          String
  minLoan       Float
  maxLoan       Float
  serviceFee    String
  dailyFee      String
  penaltyFee    String
  status        String
  providerId    String
  provider      LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  loanDetails   LoanDetails[]
  scoringHistory ScoringConfigurationHistory[] @relation("LoanProductToScoringHistory")
}

model LoanDetails {
  id            String   @id @default(uuid())
  loanAmount    Float
  serviceFee    Float
  interestRate  Float
  disbursedDate DateTime
  dueDate       DateTime
  penaltyAmount Float
  repaymentStatus String
  repaidAmount  Float?
  providerId       String
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  productId        String
  product          LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  payments         Payment[]
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  date        DateTime
  outstandingBalanceBeforePayment Float
  loanId      String
  loan        LoanDetails @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

// Scoring Engine Models
model ScoringParameter {
  id          String   @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  weight      Int
  rules       ScoringParameterRule[]
}

model ScoringParameterRule {
  id          String   @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  providerId      String
  provider        LoanProvider  @relation(fields: [providerId], references: [id])
  parameters      String // Changed from Json to String
  appliedProducts LoanProduct[] @relation("LoanProductToScoringHistory")
  savedAt         DateTime      @default(now())
}
