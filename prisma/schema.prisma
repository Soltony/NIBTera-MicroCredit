
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String                        @db.NVarChar(MAX)
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                      @default(false)

  // Relations
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                        String                 @id @default(uuid())
  name                      String
  description               String?
  icon                      String                 @db.NVarChar(MAX)
  minLoan                   Float?
  maxLoan                   Float?
  duration                  Int?
  status                    String                 @default("Active") // e.g., Active, Disabled
  serviceFeeEnabled         Boolean                @default(false)
  serviceFee                String?                // JSON stored as string: { type: 'percentage' | 'fixed', value: number }
  dailyFeeEnabled           Boolean                @default(false)
  dailyFee                  String?                // JSON stored as string: { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled       Boolean                @default(false)
  penaltyRules              String?                // JSON stored as string: [{ fromDay: number, toDay: number, type: 'fixed' | 'percentageOfPrincipal', value: number }]
  dataProvisioningEnabled   Boolean                @default(false)
  dataProvisioningConfigId  String?

  // Relations
  provider                  LoanProvider           @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  providerId                String
  loans                     Loan[]
  loanAmountTiers           LoanAmountTier[]
  dataProvisioningConfig    DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scoringHistory            ScoringConfigurationHistory[] @relation("ProductScoringHistory")

  @@unique([name, providerId])
}


model Loan {
  id                String       @id @default(uuid())
  loanAmount        Float
  serviceFee        Float        @default(0)
  penaltyAmount     Float        @default(0)
  disbursedDate     DateTime     @default(now())
  dueDate           DateTime
  repaymentStatus   String       @default("Unpaid") // e.g., Unpaid, Paid, Defaulted
  repaidAmount      Float?

  // Relations
  customer            Customer     @relation(fields: [customerId], references: [id])
  customerId          String
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId          String
  product             LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId           String
  payments            Payment[]
}

model Customer {
  id              String  @id @default(uuid())
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String // JSON stored as string
  
  // Relations
  loans           Loan[]
  provisionedData ProvisionedData[]
}

model Payment {
  id                String   @id @default(uuid())
  amount            Float
  date              DateTime @default(now())
  outstandingBalanceBeforePayment Float?

  // Relations
  loan              Loan     @relation(fields: [loanId], references: [id])
  loanId            String
}

model User {
  id            String  @id @default(uuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String  @default("Active") // e.g. Active, Inactive
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  role          Role     @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON stored as string
  
  // Relations
  users       User[]
}

model ScoringParameter {
  id         String  @id @default(uuid())
  name       String
  weight     Int

  // Relations
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  rules      ScoringRule[]
}

model ScoringRule {
    id          String @id @default(uuid())
    field       String
    condition   String // e.g. '>', '<', '==', 'between'
    value       String // e.g. '30' or '18-25' or 'High School'
    score       Int

    // Relations
    parameter    ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId  String
}

model ScoringConfigurationHistory {
    id String @id @default(uuid())
    savedAt DateTime @default(now())
    parameters String // JSON of ScoringParameter[] at the time of saving

    // Relations
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId String
    appliedProducts LoanProduct[] @relation("ProductScoringHistory")
}

model DataProvisioningConfig {
    id String @id @default(uuid())
    name String
    columns String // JSON stored as string: { name: string, type: 'string' | 'number' | 'date', isIdentifier: boolean, dbField: 'ID' }[]

    // Relations
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId String
    products LoanProduct[]
    provisionedData ProvisionedData[]
}

model ProvisionedData {
    id String @id @default(uuid())
    data String // JSON stored as string
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relations
    customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    customerId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId String
    
    @@unique([customerId, configId])
}


model LoanAmountTier {
    id String @id @default(uuid())
    fromScore Int
    toScore Int
    loanAmount Float

    // Relations
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
}

model LedgerAccount {
    id String @id @default(uuid())
    name String
    type String // Receivable or Received
    category String // Principal, Interest, Penalty
    balance Float @default(0)

    // Relations
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
}
