// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  roleId        String
  loanProviderId String?

  // Relationships
  role          Role          @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String

  // Relationships
  users User[]
}

model LoanProvider {
  id                       String   @id @default(cuid())
  name                     String   @unique
  icon                     String?  @db.Text
  colorHex                 String?
  displayOrder             Int      @default(0)
  accountNumber            String?
  initialBalance           Float    @default(0)
  allowMultipleProviderLoans Boolean @default(false)
  allowCrossProviderLoans    Boolean @default(false)

  // Relationships
  users                    User[]
  products                 LoanProduct[]
  scoringParameters        ScoringParameter[]
  dataProvisioningConfigs  DataProvisioningConfig[]
  ledgerAccounts           LedgerAccount[]
  scoringHistory           ScoringConfigurationHistory[]
  loans                    Loan[] // Back-relation for Loan
}


model LoanProduct {
  id                          String    @id @default(cuid())
  name                        String
  description                 String?
  icon                        String?   @db.Text
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String    @default("Active") // Active, Disabled
  allowMultipleLoans          Boolean   @default(false)
  
  // JSON-like fields stored as strings
  serviceFee                  String?   // JSON string for { type, value }
  dailyFee                    String?   // JSON string for { type, value, calculationBase }
  penaltyRules                String?   // JSON string for array of rules

  // Feature flags
  serviceFeeEnabled           Boolean   @default(false)
  dailyFeeEnabled             Boolean   @default(false)
  penaltyRulesEnabled         Boolean   @default(false)
  dataProvisioningEnabled     Boolean   @default(false)

  // Relationships
  providerId                  String
  provider                    LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}


model Loan {
  id               String   @id @default(cuid())
  borrowerId       String
  providerId       String // For easier querying, but relation is through product
  productId        String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float    @default(0)
  repaidAmount     Float?
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String   // Paid, Unpaid

  // Relationships
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  payments         Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Borrower {
    id   String @id @default(cuid())
    provisionedData ProvisionedData[]
    loans Loan[]
}


model Payment {
  id                                String   @id @default(cuid())
  loanId                            String
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment   Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id])
}

model ScoringParameter {
    id          String @id @default(cuid())
    providerId  String
    name        String
    weight      Int
    
    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    rules       ScoringRule[]
}

model ScoringRule {
    id          String @id @default(cuid())
    parameterId String
    field       String
    condition   String
    value       String
    score       Int
    
    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}


model DataProvisioningConfig {
    id          String @id @default(cuid())
    providerId  String
    name        String
    columns     String // JSON string for column definitions
    
    // Relationships
    provider      LoanProvider          @relation(fields: [providerId], references: [id], onDelete: Cascade)
    uploads       DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
    
    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model ProvisionedData {
    id         String   @id @default(cuid())
    borrowerId String
    configId   String
    data       String   // JSON string of the row data
    createdAt  DateTime @default(now())

    // Relationships
    borrower   Borrower               @relation(fields: [borrowerId], references: [id])
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])

    @@unique([borrowerId, configId])
}


model ScoringConfigurationHistory {
    id          String   @id @default(cuid())
    providerId  String
    parameters  String   // JSON string of ScoringParameter[]
    savedAt     DateTime @default(now())
    
    // Relationships
    provider        LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    configId   String
    productId  String
    assignedAt DateTime @default(now())
    assignedBy String

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@id([configId, productId])
}

model LoanAmountTier {
    id        String  @id @default(cuid())
    productId String
    fromScore Int
    toScore   Int
    loanAmount Float
    
    // Relationships
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model LedgerAccount {
    id         String   @id @default(cuid())
    providerId String
    name       String
    type       String   // Receivable, Received
    category   String   // Principal, Interest, Penalty
    balance    Float    @default(0)

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
