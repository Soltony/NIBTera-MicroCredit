// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions String

    users User[]
}

model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String  @default("Active") // e.g., Active, Inactive
  createdAt     DateTime @default(now())

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model LoanProvider {
  id                      String @id @default(cuid())
  name                    String @unique
  icon                    String
  colorHex                String
  displayOrder            Int
  accountNumber           String?
  initialBalance          Float @default(0)
  allowCrossProviderLoans Boolean @default(false)

  products                LoanProduct[]
  loans                   Loan[]
  users                   User[]
  scoringParameters       ScoringParameter[]
  scoringHistory          ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  ledgerAccounts          LedgerAccount[]
}

model LoanProduct {
  id                        String  @id @default(cuid())
  providerId                String
  provider                  LoanProvider @relation(fields: [providerId], references: [id])
  
  name                      String
  description               String?
  icon                      String
  minLoan                   Float   @default(0)
  maxLoan                   Float   @default(0)
  duration                  Int     @default(30)
  status                    String  @default("Active") // Active, Disabled
  allowConcurrentLoans      Boolean @default(false)

  serviceFeeEnabled         Boolean? @default(false)
  serviceFee                String? // { type: 'fixed'/'percentage', value: number }
  dailyFeeEnabled           Boolean? @default(false)
  dailyFee                  String? // { type: 'fixed'/'percentage', value: number, calculationBase: 'principal'/'compound' }

  penaltyRulesEnabled       Boolean? @default(false)
  penaltyRules              String?     // [{ fromDay: number, toDay: number|null, type: 'fixed'/'percentageOfPrincipal'/'percentageOfCompound', value: number }]
  
  dataProvisioningEnabled   Boolean? @default(false)
  dataProvisioningConfigId  String?
  dataProvisioningConfig    DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  loans                     Loan[]
  loanAmountTiers           LoanAmountTier[]
  scoringConfigs            ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id                String   @id @default(cuid())
  providerId        String
  provider          LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  borrowerId        String
  borrower          Borrower @relation(fields: [borrowerId], references: [id])
  productId         String
  product           LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  loanAmount        Float
  serviceFee        Float    @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String   @default("Unpaid") // Unpaid, Paid
  repaidAmount      Float?   @default(0)
  penaltyAmount     Float    @default(0)
  
  payments          Payment[]
}

model Borrower {
  id              String   @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}


model ProvisionedData {
    id        String   @id @default(cuid())
    borrowerId String
    borrower   Borrower @relation(fields: [borrowerId], references: [id])
    configId  String
    config    DataProvisioningConfig @relation(fields: [configId], references: [id])
    
    data String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([borrowerId, configId])
}


model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

// SCORING ENGINE MODELS

model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String   @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
    id          String @id @default(cuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}


model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])

    // This will store a JSON snapshot of the ScoringParameter[] and Rule[] active at this time
    parameters String
    savedAt    DateTime @default(now())
    
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String @id @default(cuid())
    
    configId    String
    config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)

    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    
    assignedAt  DateTime @default(now())
    assignedBy  String // User ID
    
    @@unique([configId, productId])
}

// DATA PROVISIONING MODELS

model DataProvisioningConfig {
    id       String   @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    name    String
    columns String // [{ id, name, type: 'string'/'number'/'date', isIdentifier: bool, options: [] }]

    products      LoanProduct[]
    uploads       DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id String @id @default(cuid())
    configId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String // User's name or ID
}

model LedgerAccount {
  id          String   @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id])
  name        String
  type        String // Receivable, Received
  category    String // Principal, Interest, Penalty
  balance     Float    @default(0)
}
