
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

// Models for Core Loan Functionality
// ------------------------------------

model LoanProvider {
    id                          String      @id @default(cuid())
    name                        String      @unique
    icon                        String?     @db.Text
    colorHex                    String?
    displayOrder                Int         @default(0)
    accountNumber               String?
    initialBalance              Float       @default(0)
    allowMultipleProviderLoans  Boolean     @default(false)
    allowCrossProviderLoans     Boolean     @default(false)

    // Relationships
    products                    LoanProduct[]
    users                       User[]
    dataProvisioningConfigs     DataProvisioningConfig[]
    scoringParameters           ScoringParameter[]
    scoringConfigurationHistory ScoringConfigurationHistory[]
    ledgerAccounts              LedgerAccount[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LoanProduct {
    id                        String    @id @default(cuid())
    name                      String
    description               String?
    icon                      String?   @db.Text
    minLoan                   Float?
    maxLoan                   Float?
    duration                  Int?
    serviceFee                String?
    dailyFee                  String?
    penaltyRules              String?
    status                    String    @default("Active") // Active, Disabled
    allowMultipleLoans        Boolean   @default(false)
    serviceFeeEnabled         Boolean?
    dailyFeeEnabled           Boolean?
    penaltyRulesEnabled       Boolean?
    dataProvisioningEnabled   Boolean?

    // Relationships
    provider                 LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId               String
    loans                    Loan[]
    loanAmountTiers          LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfigId String?
    
    @@unique([name, providerId])
}

model Loan {
    id              String      @id @default(cuid())
    loanAmount      Float
    serviceFee      Float       @default(0)
    penaltyAmount   Float       @default(0)
    repaidAmount    Float?      @default(0)
    disbursedDate   DateTime    @default(now())
    dueDate         DateTime
    repaymentStatus String      @default("Unpaid") // Paid, Unpaid

    // Relationships
    payments         Payment[]
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id                                String   @id @default(cuid())
    amount                            Float
    date                              DateTime @default(now())
    outstandingBalanceBeforePayment   Float?

    // Relationships
    loan   Loan   @relation(fields: [loanId], references: [id])
    loanId String
}

model Borrower {
    id              String            @id @default(cuid())
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model ProvisionedData {
    id         String   @id @default(cuid())
    data       String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relationships
    borrower    Borrower @relation(fields: [borrowerId], references: [id])
    borrowerId  String
    configId    String

    @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
    id         String      @id @default(cuid())
    name       String
    columns    String?

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime @default(now())

    // Relationships
    configId String
}


// Models for Credit Scoring Engine
// --------------------------------

model ScoringParameter {
    id       String @id @default(cuid())
    name     String
    weight   Int

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
    rules      ScoringRule[]
}

model ScoringRule {
    id          String           @id @default(cuid())
    field       String
    condition   String // e.g., '>', '<', '==', 'between'
    value       String
    score       Int

    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId String
}

model LoanAmountTier {
    id         String @id @default(cuid())
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Relationships
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
}

model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    savedAt    DateTime @default(now())
    parameters String

    // Relationships
    providerId      String
    provider        LoanProvider                  @relation(fields: [providerId], references: [id])
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    configId   String
    productId  String
    assignedAt DateTime @default(now())
    assignedBy String? // User ID who assigned it

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)

    @@id([configId, productId])
}

// Models for User & Access Control
// --------------------------------

model User {
    id            String        @id @default(cuid())
    fullName      String
    email         String        @unique
    phoneNumber   String        @unique
    password      String
    status        String        @default("Active") // e.g., Active, Inactive
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    // Relationships
    role          Role          @relation(fields: [roleId], references: [id])
    roleId        String
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
    loanProviderId String?
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions String

    // Relationships
    users User[]
}

// Models for Ledger & Accounting
// ------------------------------

model LedgerAccount {
    id       String   @id @default(cuid())
    name     String
    type     String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance  Float    @default(0)

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String

    @@unique([name, providerId])
}
