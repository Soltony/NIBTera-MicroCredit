
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Loan {
  id              String   @id @default(uuid())
  repaidAmount    Float?
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  payments        Payment[]
  customer            Customer     @relation(fields: [customerId], references: [id])
  customerId          String
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId          String
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId           String
}

model LoanProvider {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  icon                 String                 @db.NVarChar(MAX)
  colorHex             String?
  displayOrder         Int
  accountNumber        String?
  initialBalance       Float                  @default(0)
  allowMultipleProviderLoans Boolean         @default(false)
  allowCrossProviderLoans    Boolean         @default(false)
  products             LoanProduct[]
  scoringParameters    ScoringParameter[]
  scoringHistories     ScoringConfigurationHistory[]
  users                User[]
  dataProvisioningConfigs DataProvisioningConfig[]
  ledgerAccounts       LedgerAccount[]
  loans                Loan[]
}

model LoanProduct {
  id                            String                        @id @default(uuid())
  name                          String
  description                   String?
  icon                          String                        @db.NVarChar(MAX)
  minLoan                       Float?
  maxLoan                       Float?
  duration                      Int?
  status                        String
  serviceFee                    String?
  dailyFee                      String?
  penaltyRules                  String?
  serviceFeeEnabled             Boolean?
  dailyFeeEnabled               Boolean?
  penaltyRulesEnabled           Boolean?
  dataProvisioningEnabled       Boolean?
  scoringHistories              ProductsOnScoringHistories[]
  provider                      LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                    String
  dataProvisioningConfig        DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dataProvisioningConfigId      String?
  loans                         Loan[]
  loanAmountTiers               LoanAmountTier[]

  @@unique([name, providerId])
}

model Payment {
  id                  String   @id @default(uuid())
  loanId              String
  amount              Float
  date                DateTime
  outstandingBalanceBeforePayment Float?
  loan                Loan     @relation(fields: [loanId], references: [id])
}

model ProductsOnScoringHistories {
  product          LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId        String
  scoringHistory   ScoringConfigurationHistory @relation(fields: [scoringHistoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scoringHistoryId String
  assignedAt       DateTime                    @default(now())
  assignedBy       String?

  @@id([productId, scoringHistoryId])
}

model ScoringConfigurationHistory {
  id          String    @id @default(uuid())
  provider    LoanProvider @relation(fields: [providerId], references: [id])
  providerId  String
  parameters  String
  savedAt     DateTime  @default(now())
  appliedProducts ProductsOnScoringHistories[]
}

model ScoringParameter {
  id         String @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model Customer {
  id              String            @id
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model DataProvisioningConfig {
  id         String            @id @default(uuid())
  provider   LoanProvider      @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  columns    String
  products   LoanProduct[]
  uploads    DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}

model ProvisionedData {
  id         String   @id @default(uuid())
  customerId String
  configId   String
  data       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([customerId, configId])
}

model LoanAmountTier {
    id          String @id @default(uuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String
  users       User[]
}

model LedgerAccount {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    type        String // Receivable or Received
    category    String // Principal, Interest, Penalty
    balance     Float @default(0.0)
}
