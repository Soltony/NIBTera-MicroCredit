
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  fullName        String
  email           String        @unique
  phoneNumber     String        @unique
  password        String
  status          String        @default("Active") // e.g., Active, Inactive
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
  auditLogs       AuditLog[]
}

model Role {
  id          String @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String @unique
  permissions String // Stored as JSON
  users       User[]
}

model LoanProvider {
  id                        String                     @id @default(uuid())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  name                      String                     @unique
  icon                      String?
  colorHex                  String?
  displayOrder              Int                        @default(0)
  accountNumber             String?
  startingCapital           Float
  initialBalance            Float
  allowCrossProviderLoans   Boolean                    @default(false)
  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  ledgerAccounts            LedgerAccount[]
  journalEntries            JournalEntry[]
  termsAndConditions        TermsAndConditions[]
  auditLogs                 AuditLog[]
}

model LoanProduct {
  id                          String                       @id @default(uuid())
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  providerId                  String
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String?
  icon                        String?
  minLoan                     Float
  maxLoan                     Float
  duration                    Int // in days
  status                      String                       @default("Active") // Active, Disabled
  allowConcurrentLoans        Boolean                      @default(false)
  serviceFee                  String? // JSON: { type: 'fixed' | 'percentage', value: number }
  dailyFee                    String? // JSON: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRules                String? // JSON: [{ fromDay: number, toDay: number | null, type: 'fixed' | 'percentageOfPrincipal' | 'percentageOfCompound', value: number, frequency: 'daily' | 'one-time' }]
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationProduct[]
  auditLogs                   AuditLog[]

  @@unique([name, providerId])
}

model LoanAmountTier {
  id         String      @id @default(uuid())
  productId  String
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model DataProvisioningConfig {
  id                      String              @id @default(uuid())
  providerId              String
  provider                LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                    String
  columns                 String // JSON array of column definitions
  uploads                 DataProvisioningUpload[]
  provisionedData         ProvisionedData[]
  enabledOnProducts       LoanProduct[]
  auditLogs               AuditLog[]
}

model DataProvisioningUpload {
    id          String      @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime    @default(now())
    uploadedBy  String
}

model ProvisionedData {
    id          String      @id @default(uuid())
    borrowerId  String
    borrower    Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data        String // JSON object of the provisioned data
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    
    @@unique([borrowerId, configId])
}


model Borrower {
    id              String      @id
    status          String      @default("Active") // e.g. Active, NPL, Blacklisted
    loans           Loan[]
    provisionedData ProvisionedData[]
    agreements      BorrowerAgreement[]
}

model Loan {
  id              String      @id @default(uuid())
  borrowerId      String
  borrower        Borrower    @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id])
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // Paid, Unpaid
  repaidAmount    Float?
  repaymentBehavior String? // ON_TIME, LATE, EARLY
  payments        Payment[]
  journalEntries  JournalEntry[]
  auditLogs       AuditLog[]
}

model Payment {
  id                              String        @id @default(uuid())
  loanId                          String
  loan                            Loan          @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime      @default(now())
  outstandingBalanceBeforePayment Float
  journalEntryId                  String?       @unique
  journalEntry                    JournalEntry? @relation(fields: [journalEntryId], references: [id])
}

// Scoring Engine Models
model ScoringParameter {
  id         String @id @default(uuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String // This is the 'field' from the custom params
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
    id              String      @id @default(uuid())
    providerId      String
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters      String // JSON string of ScoringParameter[] at the time of saving
    savedAt         DateTime    @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

// Join table for history and products
model ScoringConfigurationProduct {
    id          String      @id @default(uuid())
    configId    String
    productId   String
    config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedAt  DateTime    @default(now())
    assignedBy  String

    @@unique([configId, productId])
}

// Ledger Models
model LedgerAccount {
    id             String         @id @default(uuid())
    providerId     String
    provider       LoanProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name           String
    type           String // Receivable, Received, Income
    category       String // Principal, Interest, Penalty, ServiceFee
    balance        Float          @default(0)
    ledgerEntries  LedgerEntry[]
}

model JournalEntry {
    id              String        @id @default(uuid())
    providerId      String
    provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    loanId          String?
    loan            Loan?         @relation(fields: [loanId], references: [id])
    date            DateTime
    description     String
    ledgerEntries   LedgerEntry[]
    payment         Payment?
}

model LedgerEntry {
    id              String          @id @default(uuid())
    journalEntryId  String
    journalEntry    JournalEntry    @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
    ledgerAccountId String
    ledgerAccount   LedgerAccount   @relation(fields: [ledgerAccountId], references: [id])
    type            String // Debit or Credit
    amount          Float
}

// Terms & Conditions
model TermsAndConditions {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    content     String      @db.NVarChar(Max)
    version     Int
    isActive    Boolean     @default(false)
    publishedAt DateTime
    agreements  BorrowerAgreement[]

    @@unique([providerId, version])
}

model BorrowerAgreement {
    id          String      @id @default(uuid())
    borrowerId  String
    borrower    Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    termsId     String
    terms       TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)
    acceptedAt  DateTime    @default(now())

    @@unique([borrowerId, termsId])
}

model AuditLog {
  id          String      @id @default(uuid())
  timestamp   DateTime    @default(now())
  actorId     String
  actor       User?       @relation(fields: [actorId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  action      String
  entity      String?     // e.g., 'USER', 'ROLE', 'LOAN'
  entityId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  providerId  String?
  provider    LoanProvider? @relation(fields: [providerId], references: [id])
  productId   String?
  product     LoanProduct? @relation(fields: [productId], references: [id])
  loanId      String?
  loan        Loan?       @relation(fields: [loanId], references: [id])
  configId    String?
  config      DataProvisioningConfig? @relation(fields: [configId], references: [id])
}
