// datasource db defines the database connection details.
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// -- Enums --
enum UserRoleName {
  SuperAdmin
  Admin
  LoanManager
  Auditor
  LoanProvider
}

enum UserStatus {
  Active
  Inactive
}

enum RepaymentStatus {
  Paid
  Unpaid
}

enum FeeType {
  Fixed
  Percentage
}

enum CalculationBase {
  Principal
  Compound
}

enum PenaltyType {
  Fixed
  PercentageOfPrincipal
  PercentageOfCompound
}

enum DataColumnType {
  String
  Number
  Date
}

// -- Models --

model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String                        @db.Text
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                      @default(false)

  // Relationships
  users                     User[]
  products                  LoanProduct[]
  scoringParameters         ScoringParameter[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]
  scoringHistory            ScoringConfigurationHistory[]
}


model LoanProduct {
  id                         String                        @id @default(cuid())
  name                       String
  description                String?
  icon                       String                        @db.Text
  minLoan                    Float?
  maxLoan                    Float?
  duration                   Int?
  serviceFee                 String? // JSON stored as string: { "type": "percentage", "value": 2 }
  dailyFee                   String? // JSON stored as string: { "type": "percentage", "value": 0.1, "calculationBase": "principal" }
  penaltyRules               String? // JSON stored as string: [{ "id": "p1", "fromDay": 1, "toDay": 15, "type": "fixed", "value": 50 }]
  status                     String                        @default("Active") // e.g., Active, Disabled
  allowMultipleLoans         Boolean                       @default(false)
  serviceFeeEnabled          Boolean?
  dailyFeeEnabled            Boolean?
  penaltyRulesEnabled        Boolean?
  dataProvisioningEnabled    Boolean?
  
  // Relationships
  provider                   LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                 String
  loans                      Loan[]
  loanAmountTiers            LoanAmountTier[]
  scoringConfigurationLinks  ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}


model Loan {
  id               String          @id @default(cuid())
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float           @default(0)
  disbursedDate    DateTime        @default(now())
  dueDate          DateTime
  repaymentStatus  RepaymentStatus @default(Unpaid)
  repaidAmount     Float?

  // Relationships
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  payments         Payment[]
  providerId       String
  productId        String
  borrowerId       String
}

model Borrower {
    id              String            @id @unique
    provisionedData ProvisionedData[]
    loans           Loan[]
}


model Payment {
  id                                String   @id @default(cuid())
  loanId                            String
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment Float?

  // Relationship
  loan Loan @relation(fields: [loanId], references: [id])
}


model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string for permissions

  // Relationship
  users User[]
}


model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String  @default("Active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  role          Role          @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
  loanProviderId String?
}


model ScoringConfigurationHistory {
    id              String                        @id @default(cuid())
    providerId      String
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    savedAt         DateTime                      @default(now())
    parameters      String                        @db.Text // JSON string of ScoringParameter[] at the time of saving

    // Relationships
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String   @id @default(cuid())
    configId    String
    productId   String
    assignedAt  DateTime @default(now())
    assignedBy  String

    // Relationships
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([configId, productId])
}


model ScoringParameter {
    id         String @id @default(cuid())
    providerId String
    name       String
    weight     Int

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    rules    ScoringRule[]
}

model ScoringRule {
    id          String           @id @default(cuid())
    parameterId String
    field       String
    condition   String // e.g., '>', '<', '==', 'between'
    value       String
    score       Int

    // Relationships
    parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model DataProvisioningConfig {
    id         String      @id @default(cuid())
    providerId String
    name       String
    columns    String      @db.Text // JSON string for column definitions

    // Relationships
    provider LoanProvider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
    uploads  DataProvisioningUpload[]
    data     ProvisionedData[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String

    // Relationships
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model ProvisionedData {
    id         String @id @default(cuid())
    borrowerId String
    configId   String
    data       String @db.Text
    createdAt  DateTime @default(now())

    // Relationships
    borrower Borrower               @relation(fields: [borrowerId], references: [id])
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([borrowerId, configId])
}


model LoanAmountTier {
    id         String @id @default(cuid())
    productId  String
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Relationships
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model LedgerAccount {
    id         String   @id @default(cuid())
    providerId String
    name       String
    type       String // 'Receivable' or 'Received'
    category   String // 'Principal', 'Interest', 'Penalty'
    balance    Float    @default(0)

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
