// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id             String  @id @default(cuid())
  name           String  @unique
  icon           String
  colorHex       String?
  displayOrder   Int
  accountNumber  String?
  initialBalance Float   @default(0)
  allowCrossProviderLoans Boolean @default(false)

  products                LoanProduct[]
  users                   User[]
  scoringParameters       ScoringParameter[]
  dataProvisioningConfigs DataProvisioningConfig[]
  loans                   Loan[]
  ledgerAccounts          LedgerAccount[]
  scoringHistory          ScoringConfigurationHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanProduct {
  id        String @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])

  name        String
  description String
  icon        String
  minLoan     Float  @default(0)
  maxLoan     Float  @default(0)
  duration    Int    @default(30)
  status      String @default("Active") // Active, Disabled

  // Fee Structure
  serviceFeeEnabled     Boolean? @default(false)
  serviceFee            Json? // { type: 'fixed'/'percentage', value: number }
  dailyFeeEnabled       Boolean? @default(false)
  dailyFee              Json? // { type: 'fixed'/'percentage', value: number, calculationBase: 'principal'/'compound' }
  
  // Penalty Rules
  penaltyRulesEnabled   Boolean? @default(false)
  penaltyRules          Json?     // [{ fromDay: number, toDay: number|null, type: 'fixed'/'percentageOfPrincipal'/'percentageOfCompound', value: number }]
  
  allowConcurrentLoans    Boolean  @default(false)
  allowMultipleLoans      Boolean  @default(false)

  // Data Provisioning Integration
  dataProvisioningEnabled   Boolean? @default(false)
  dataProvisioningConfigId  String?
  dataProvisioningConfig    DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id])

  loans           Loan[]
  loanAmountTiers LoanAmountTier[]
  scoringHistory  ScoringConfigurationProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, providerId])
}

model Loan {
  id        String @id @default(cuid())
  providerId String
  provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id])
  
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id])

  loanAmount     Float
  serviceFee     Float
  penaltyAmount  Float    @default(0)
  repaidAmount   Float?   @default(0)
  disbursedDate  DateTime
  dueDate        DateTime
  repaymentStatus String // Paid, Unpaid

  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Borrower {
  id    String @id
  loans Loan[]
  provisionedData ProvisionedData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProvisionedData {
    id String @id @default(cuid())
    borrowerId String
    borrower   Borrower @relation(fields: [borrowerId], references: [id])

    configId String
    config   DataProvisioningConfig @relation(fields: [configId], references: [id])

    data Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([borrowerId, configId])
}

model Payment {
  id      String @id @default(cuid())
  loanId  String
  loan    Loan   @relation(fields: [loanId], references: [id])

  amount Float
  date   DateTime
  outstandingBalanceBeforePayment Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String // e.g., 'Active', 'Inactive'
  
  roleId        String
  role          Role    @relation(fields: [roleId], references: [id])
  
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // Stored as a JSON string
  users       User[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


// SCORING ENGINE MODELS
model ScoringParameter {
  id          String   @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id])
  name        String   // e.g., 'Age', 'Salary', 'LoanHistory'
  weight      Int      // e.g., 20 (for 20% of total score)
  rules       Rule[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

  field       String          // e.g. 'age', 'monthlyIncome'
  condition   String          // e.g. '>', '<=', '=='
  value       String
  score       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanAmountTier {
    id String @id @default(cuid())
    productId String
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    
    fromScore Int
    toScore   Int
    loanAmount Float
}

model ScoringConfigurationHistory {
    id String @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    
    parameters Json
    savedAt    DateTime @default(now())
    
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    configId String
    config   ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)

    productId String
    product   LoanProduct @relation(fields: [productId], references: [id])
    
    assignedAt DateTime @default(now())
    assignedBy String   // User ID

    @@id([configId, productId])
}


// DATA PROVISIONING MODELS
model DataProvisioningConfig {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id])
    
    name    String
    columns Json // [{ id, name, type: 'string'/'number'/'date', isIdentifier: bool, options: [] }]
    
    uploads     ProvisionedDataUpload[]
    usedInProducts LoanProduct[]
    provisionedData ProvisionedData[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProvisionedDataUpload {
    id String @id @default(cuid())
    configId String
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String // User's name or ID
}

// LEDGER MODELS
model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id])
    
    name String // e.g., "Principal Receivable", "Interest Received"
    type String // "Receivable", "Received"
    category String // "Principal", "Interest", "Penalty"
    balance Float @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LedgerTransaction {
    id String @id @default(cuid())
    accountId String
    // account LedgerAccount @relation(fields: [accountId], references: [id])

    type String // "Debit", "Credit"
    amount Float
    description String
    loanId String? // Optional link to a loan
    paymentId String? // Optional link to a payment

    createdAt DateTime @default(now())
}
