// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

// ================================================= //
//                 Loan Models                       //
// ================================================= //

model LoanProvider {
    id                          String    @id @default(cuid())
    name                        String    @unique
    icon                        String?   @db.Text
    colorHex                    String?
    displayOrder                Int       @default(0)
    accountNumber               String?
    initialBalance              Float     @default(0)
    allowMultipleProviderLoans  Boolean   @default(false)
    allowCrossProviderLoans     Boolean   @default(false)

    // Relationships
    products                    LoanProduct[]
    scoringParameters           ScoringParameter[]
    dataProvisioningConfigs     DataProvisioningConfig[]
    scoringConfigurationHistory ScoringConfigurationHistory[]
    ledgerAccounts              LedgerAccount[]
    users                       User[]
}

model LoanProduct {
    id                          String   @id @default(cuid())
    name                        String
    description                 String?
    icon                        String?  @db.Text
    minLoan                     Float?
    maxLoan                     Float?
    duration                    Int?
    serviceFee                  Json?
    dailyFee                    Json?
    penaltyRules                Json?
    status                      String   @default("Active") // Active, Disabled
    allowMultipleLoans          Boolean  @default(false) // Allows multiple loans of the SAME product
    serviceFeeEnabled           Boolean?
    dailyFeeEnabled             Boolean?
    penaltyRulesEnabled         Boolean?
    dataProvisioningEnabled     Boolean?

    // Relationships
    provider                    LoanProvider   @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    dataProvisioningConfigId    String?

    @@unique([name, providerId])
}

model Loan {
    id              String     @id @default(cuid())
    loanAmount      Float
    serviceFee      Float
    penaltyAmount   Float      @default(0)
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String     // Unpaid, Paid
    repaidAmount    Float?

    // Relationships
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String
    payments         Payment[]

    @@index([borrowerId])
}

model Payment {
    id                              String   @id @default(cuid())
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float?

    // Relationships
    loan   Loan   @relation(fields: [loanId], references: [id])
    loanId String
}

model Borrower {
    id              String            @id
    loans           Loan[]
    provisionedData ProvisionedData[]
}

model ProvisionedData {
    id         String   @id @default(cuid())
    data       Json
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relationships
    borrower   Borrower @relation(fields: [borrowerId], references: [id])
    borrowerId String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId   String

    @@unique([borrowerId, configId])
}


// ================================================= //
//               Configuration Models                //
// ================================================= //

model DataProvisioningConfig {
    id        String                      @id @default(cuid())
    name      String
    columns   Json?
    provider  LoanProvider                @relation(fields: [providerId], references: [id])
    providerId String
    uploads   DataProvisioningUpload[]
    products  LoanProduct[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    fileName   String
    rowCount   Int
    uploadedAt DateTime @default(now())
    uploadedBy String

    // Relationships
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId   String
}


model ScoringParameter {
    id       String @id @default(cuid())
    name     String
    weight   Int

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
    rules      Rule[]
}

model Rule {
    id          String @id @default(cuid())
    field       String
    condition   String
    value       String
    score       Int

    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId String
}


model LoanAmountTier {
    id         String      @id @default(cuid())
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Relationships
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
}

model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    savedAt    DateTime @default(now())
    parameters Json

    // Relationships
    provider                LoanProvider                  @relation(fields: [providerId], references: [id])
    providerId              String
    appliedProducts         ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String   @id @default(cuid())
    assignedAt  DateTime @default(now())
    assignedBy  String

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
    configId   String
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId  String

    @@unique([configId, productId])
}

// ================================================= //
//                  User Models                      //
// ================================================= //

model User {
    id           String        @id @default(cuid())
    fullName     String
    email        String        @unique
    phoneNumber  String        @unique
    password     String
    status       String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    // Relationships
    role         Role          @relation(fields: [roleId], references: [id])
    roleId       String
    loanProvider LoanProvider? @relation(fields: [loanProviderId], references: [id])
    loanProviderId String?
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions Json

    // Relationships
    users       User[]
}

// ================================================= //
//               Financial Models                    //
// ================================================= //

model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0)

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id])
}
