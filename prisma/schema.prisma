// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ==============================================================
// Authentication & Authorization Models
// ==============================================================

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}


model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String   @db.NVarChar(MAX)
  users       User[]
}

// ==============================================================
// Loan Provider & Product Models
// ==============================================================

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String                        @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  users                       User[]
  loans                       Loan[]
}

model LoanProduct {
  id                          String                         @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: NoAction)
  name                        String
  description                 String
  icon                        String                         @db.NVarChar(MAX)
  status                      String                         @default("Active") // e.g., "Active", "Disabled"
  minLoan                     Float?
  maxLoan                     Float?
  serviceFeeEnabled           Boolean                        @default(true)
  serviceFee                  String?
  dailyFeeEnabled             Boolean                        @default(true)
  dailyFee                    String?
  penaltyRulesEnabled         Boolean                        @default(true)
  penaltyRules                String?
  dataProvisioningEnabled     Boolean                        @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?        @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  loans                       Loan[]
  scoringHistory              ScoringConfigurationHistory[]  @relation("ProductScoringHistory")
  loanAmountTiers             LoanAmountTier[]

  @@unique([name, providerId])
}

// ==============================================================
// Customer & Loan Models
// ==============================================================

model Customer {
  id             String   @id @default(uuid())
  age            Int
  gender         String
  monthlyIncome  Float
  educationLevel String
  loanHistory    String
  loans          Loan[]
  provisionedData ProvisionedData[]
}

model Loan {
  id                String       @id @default(uuid())
  customerId        String
  providerId        String
  productId         String
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float        @default(0)
  disbursedDate     DateTime     @default(now())
  dueDate           DateTime
  repaymentStatus   String       // e.g., "Paid", "Unpaid"
  repaidAmount      Float?
  
  customer            Customer     @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  payments            Payment[]
}

model Payment {
  id                              String    @id @default(uuid())
  loanId                          String
  amount                          Float
  date                            DateTime  @default(now())
  outstandingBalanceBeforePayment Float?
  loan                            Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
}


// ==============================================================
// Credit Scoring & Data Provisioning Models
// ==============================================================

model ScoringParameter {
  id         String                 @id @default(uuid())
  providerId String
  name       String
  weight     Int
  rules      ScoringParameterRule[]
  provider   LoanProvider           @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model ScoringParameterRule {
  id          String           @id @default(uuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}


model ScoringConfigurationHistory {
  id                String        @id @default(uuid())
  providerId        String
  savedAt           DateTime      @default(now())
  parameters        String        @db.NVarChar(MAX) // JSON string of parameters
  provider          LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appliedProducts   LoanProduct[] @relation("ProductScoringHistory")
}

model LoanAmountTier {
  id         String      @id @default(uuid())
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DataProvisioningConfig {
  id            String                @id @default(uuid())
  providerId    String
  name          String
  columns       String
  provider      LoanProvider          @relation(fields: [providerId], references: [id], onDelete: NoAction)
  products      LoanProduct[]
  uploads       DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id            String                @id @default(uuid())
    configId      String
    fileName      String
    rowCount      Int
    uploadedAt    DateTime              @default(now())
    uploadedBy    String
    config        DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model ProvisionedData {
    id          String      @id @default(uuid())
    customerId  String
    configId    String
    data        String      @db.NVarChar(MAX)
    createdAt   DateTime    @default(now())

    customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}
