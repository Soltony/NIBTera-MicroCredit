// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model LoanProvider {
  id                        String              @id @default(cuid())
  name                      String              @unique
  icon                      String              @db.Text
  colorHex                  String?
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float               @default(0)
  allowMultipleProviderLoans Boolean            @default(false)
  allowCrossProviderLoans   Boolean            @default(false)

  // Relationships
  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                        String      @id @default(cuid())
  name                      String
  description               String?
  icon                      String      @db.Text
  minLoan                   Float?
  maxLoan                   Float?
  duration                  Int?
  serviceFee                String      @default("{\"type\":\"percentage\",\"value\":0}") // JSON as string
  dailyFee                  String      @default("{\"type\":\"percentage\",\"value\":0, \"calculationBase\":\"principal\"}") // JSON as string
  penaltyRules              String      @default("[]") // JSON as string
  status                    String      @default("Active") // Active, Disabled
  allowMultipleLoans        Boolean     @default(false)
  serviceFeeEnabled         Boolean     @default(false)
  dailyFeeEnabled           Boolean     @default(false)
  penaltyRulesEnabled       Boolean     @default(false)
  dataProvisioningEnabled   Boolean     @default(false)
  
  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  dataProvisioningConfigId    String?
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}


model Loan {
  id                   String       @id @default(cuid())
  loanAmount           Float
  serviceFee           Float
  penaltyAmount        Float        @default(0)
  disbursedDate        DateTime
  dueDate              DateTime
  repaymentStatus      String       @default("Unpaid") // Unpaid, Paid
  repaidAmount         Float?       @default(0)

  // Relationships
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId       String
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId        String
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  borrowerId       String
  payments         Payment[]
}


model Payment {
    id                                String       @id @default(cuid())
    loanId                            String
    amount                            Float
    date                              DateTime     @default(now())
    outstandingBalanceBeforePayment   Float?

    // Relationships
    loan                              Loan         @relation(fields: [loanId], references: [id])
}

model LoanAmountTier {
    id          String      @id @default(cuid())
    productId   String
    fromScore   Float
    toScore     Float
    loanAmount  Float

    // Relationships
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationships
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON as String
  users       User[]
}

model LedgerAccount {
    id          String       @id @default(cuid())
    providerId  String
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float        @default(0)

    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model ScoringParameter {
    id          String       @id @default(cuid())
    providerId  String
    name        String
    weight      Float

    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    rules       Rule[]
}

model Rule {
    id          String            @id @default(cuid())
    parameterId String
    field       String
    condition   String
    value       String
    score       Float

    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
    id           String       @id @default(cuid())
    providerId   String
    parameters   String // JSON as String
    savedAt      DateTime     @default(now())
    
    // Relationships
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String   @id @default(cuid())
    configId   String
    productId  String
    assignedBy String
    assignedAt DateTime @default(now())

    // Relationships
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    
    @@unique([configId, productId])
}

model Borrower {
    id               String             @id @default(cuid())
    loans            Loan[]
    provisionedData  ProvisionedData[]
}

model DataProvisioningConfig {
    id          String       @id @default(cuid())
    providerId  String
    name        String
    columns     String // JSON as String
    
    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    uploads     DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String       @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime     @default(now())
    uploadedBy  String

    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model ProvisionedData {
    id         String      @id @default(cuid())
    borrowerId String
    configId   String
    data       String      // JSON as String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    
    // Relationships
    borrower   Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction)

    @@unique([borrowerId, configId])
}
