
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ==================================
// User and Access Control Models
// ==================================

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String // "Active" or "Inactive"
  roleId        String
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  role          Role          @relation(fields: [roleId], references: [id], onDelete: NoAction)
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction)
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  permissions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]
}

// ==================================
// Core Loan and Provider Models
// ==================================

model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String?
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  ledgerAccounts              LedgerAccount[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
}

model LoanProduct {
  id                          String    @id @default(cuid())
  name                        String
  description                 String?
  icon                        String?
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  allowMultipleLoans          Boolean   @default(false)
  status                      String    @default("Active") // "Active" or "Disabled"
  // Storing complex fee/penalty structures as JSON strings
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  dataProvisioningEnabled     Boolean?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // Relationships
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}


model Loan {
  id               String   @id @default(cuid())
  borrowerId       String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float    @default(0)
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String   // "Paid" or "Unpaid"
  repaidAmount     Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  providerId         String
  provider           LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction) // NoAction to prevent cycles with Provider -> Product -> Loan
  productId          String
  product            LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction) // NoAction to prevent cycles

  payments         Payment[]
  borrower         Borrower @relation(fields: [borrowerId], references: [id])
}

model Payment {
  id                               String   @id @default(cuid())
  amount                           Float
  date                             DateTime
  outstandingBalanceBeforePayment  Float?
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt

  // Relationships
  loanId                           String
  loan                             Loan     @relation(fields: [loanId], references: [id])
}

// ==================================
// Credit Scoring Models
// ==================================

model ScoringParameter {
  id        String @id @default(cuid())
  name      String
  weight    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  providerId String
  provider   LoanProvider           @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules      ScoringParameterRule[]
}

model ScoringParameterRule {
  id          String  @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
  id          String   @id @default(cuid())
  fromScore   Int
  toScore     Int
  loanAmount  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  productId   String
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model ScoringConfigurationHistory {
  id          String   @id @default(cuid())
  savedAt     DateTime @default(now())
  parameters  String   // JSON string of ScoringParameter[] at the time of saving
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  providerId  String
  provider    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    assignedBy  String
    assignedAt  DateTime @default(now())
    
    // Relationships
    configId   String
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId  String
    product    LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([configId, productId])
}


// ==================================
// Data Provisioning Models
// ==================================

model DataProvisioningConfig {
  id        String   @id @default(cuid())
  name      String
  columns   String // JSON string detailing the column mappings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  products   LoanProduct[]
  provisionedData ProvisionedData[]
  uploads    DataProvisioningUpload[]
}

model Borrower {
  id        String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
    id         String   @id @default(cuid())
    data       String   // JSON object as a string
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relationships
    borrowerId String
    borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    
    @@unique([borrowerId, configId])
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    fileName   String
    rowCount   Int
    uploadedBy String
    uploadedAt DateTime @default(now())

    // Relationships
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


// ==================================
// Financial Ledger Models
// ==================================

model LedgerAccount {
    id        String   @id @default(cuid())
    name      String
    type      String   // e.g., 'Receivable', 'Received'
    category  String   // e.g., 'Principal', 'Interest', 'Penalty'
    balance   Float    @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
