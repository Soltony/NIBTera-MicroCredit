// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

// ==============================================================
// AUTHENTICATION & AUTHORIZATION
// ==============================================================
model User {
    id            String        @id @default(cuid())
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    fullName      String
    email         String        @unique
    phoneNumber   String        @unique
    password      String
    status        String // "Active", "Inactive"

    // Relationships
    role          Role          @relation(fields: [roleId], references: [id])
    roleId        String
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
    loanProviderId String?
}

model Role {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String   @unique
    permissions String // JSON blob for permissions

    // Relationships
    users       User[]
}


// ==============================================================
// CORE LENDING MODELS
// ==============================================================
model LoanProvider {
    id                        String      @id @default(cuid())
    createdAt                 DateTime    @default(now())
    updatedAt                 DateTime    @updatedAt
    name                      String      @unique
    icon                      String      @db.Text
    colorHex                  String?
    displayOrder              Int
    accountNumber             String?
    initialBalance            Float       @default(0)
    allowCrossProviderLoans   Boolean     @default(false)

    // Relationships
    users                     User[]
    products                  LoanProduct[]
    dataProvisioningConfigs   DataProvisioningConfig[]
    scoringParameters         ScoringParameter[]
    scoringHistory            ScoringConfigurationHistory[]
    ledgerAccounts            LedgerAccount[]
    loans                     Loan[]
}

model LoanProduct {
    id                          String    @id @default(cuid())
    createdAt                   DateTime  @default(now())
    updatedAt                   DateTime  @updatedAt
    name                        String
    description                 String?   @db.Text
    icon                        String    @db.Text
    minLoan                     Float
    maxLoan                     Float
    duration                    Int       @default(30)
    status                      String    @default("Active") // "Active", "Disabled"
    allowMultipleLoans          Boolean   @default(false)
    serviceFee                  String?   // JSON for { type: 'percentage' | 'fixed', value: number }
    serviceFeeEnabled           Boolean   @default(false)
    dailyFee                    String?   // JSON for { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
    dailyFeeEnabled             Boolean   @default(false)
    penaltyRules                String?   // JSON for array of penalty rules
    penaltyRulesEnabled         Boolean   @default(false)
    dataProvisioningEnabled     Boolean   @default(false)

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    
    // This relation creates a cycle. The config can be inferred from the provider.
    // dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction) 
    dataProvisioningConfigId    String?

    @@unique([name, providerId])
}

model Loan {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    loanAmount      Float
    serviceFee      Float
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String   // "Paid", "Unpaid"
    repaidAmount    Float?
    penaltyAmount   Float    @default(0)

    // Relationships
    providerId       String
    provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String
    payments         Payment[]
}

model Payment {
    id                                String   @id @default(cuid())
    createdAt                         DateTime @default(now())
    updatedAt                         DateTime @updatedAt
    date                              DateTime
    amount                            Float
    outstandingBalanceBeforePayment   Float?

    // Relationships
    loan                              Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
    loanId                            String
}

model Borrower {
    id              String   @id
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relationships
    loans           Loan[]
    provisionedData ProvisionedData[]
}


// =g============================================================
// DATA & SCORING
// ==============================================================
model ProvisionedData {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    data       String   @db.Text

    // Relationships
    borrower    Borrower                @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    borrowerId  String
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    
    @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    columns    String   @db.Text // JSON for column definitions

    // Relationships
    provider        LoanProvider                @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId      String
    uploads         DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    uploadedAt DateTime @default(now())
    fileName   String
    rowCount   Int
    uploadedBy String

    // Relationships
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId   String
}

model ScoringParameter {
    id         String @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    weight     Int

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    rules      ScoringRule[]
}

model ScoringRule {
    id          String           @id @default(cuid())
    field       String
    condition   String
    value       String
    score       Int

    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId String
}

model LoanAmountTier {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Relationships
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId  String
}

model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    savedAt    DateTime @default(now())
    parameters String   @db.Text

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    products   ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    assignedBy  String

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    configId   String
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    productId  String

    @@unique([configId, productId])
}


// ==============================================================
// FINANCIAL LEDGER
// ==============================================================
model LedgerAccount {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    type       String   // Receivable or Received
    category   String   // Principal, Interest, or Penalty
    balance    Float    @default(0)

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
}
