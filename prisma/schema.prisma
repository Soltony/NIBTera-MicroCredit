// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String
  colorHex                  String
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float
  allowCrossProviderLoans   Boolean                       @default(false)
  products                  LoanProduct[]
  loans                     Loan[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  users                     User[]
  ledgerAccounts            LedgerAccount[]
  createdAt                 DateTime                      @default(now())
  updatedAt                 DateTime                      @updatedAt
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFee                  String? // JSON stored as string
  dailyFee                    String? // JSON stored as string
  penaltyRules                String? // JSON stored as string
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt

  @@unique([name, providerId])
}

model Loan {
  id               String       @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  borrowerId      String
  borrower        Borrower     @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String
  repaidAmount    Float?
  payments        Payment[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Borrower {
    id   String @id @unique
    loans Loan[]
    provisionedData ProvisionedData[]
}

model Payment {
  id                String   @id @default(cuid())
  loanId            String
  loan              Loan     @relation(fields: [loanId], references: [id])
  amount            Float
  date              DateTime
  outstandingBalanceBeforePayment Float?
  createdAt         DateTime @default(now())
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // Stored as a JSON string
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id              String        @id @default(cuid())
  fullName        String
  email           String        @unique
  phoneNumber     String
  password        String
  status          String
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model LoanAmountTier {
    id String @id @default(cuid())
    productId String
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore Int
    toScore Int
    loanAmount Float
}


model ScoringParameter {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name String
    weight Int
    rules Rule[]
}

model Rule {
    id String @id @default(cuid())
    parameterId String
    parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field String
    condition String
    value String
    score Int
}

model ScoringConfigurationHistory {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters String // JSON of ScoringParameter[]
    savedAt DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id String @id @default(cuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String
}


model DataProvisioningConfig {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name String
    columns String // JSON stored as string
    products LoanProduct[]
    uploads DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id String @id @default(cuid())
    configId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String
}

model ProvisionedData {
    id String @id @default(cuid())
    borrowerId String
    borrower Borrower @relation(fields: [borrowerId], references: [id])
    configId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data String // JSON stored as string
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([borrowerId, configId])
}

model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name String
    type String // Receivable, Received, Income
    category String // Principal, Interest, ServiceFee, Penalty
    balance Float @default(0)
}
