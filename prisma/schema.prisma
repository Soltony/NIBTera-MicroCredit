// datasource db defines the database connection details.
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client for JavaScript should be generated.
generator client {
  provider = "prisma-client-js"
}

// User model represents the users who can log in to the admin panel.
model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // Relationships
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
  loanProviderId String?
}

// Role model defines the permissions for different types of users.
model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String
  // Relationships
  users       User[]
}


// LoanProvider model represents the financial institutions offering loans.
model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float?                        @default(0)
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  ledgerAccounts              LedgerAccount[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
}


// LoanProduct model defines the specific loan products offered by a provider.
model LoanProduct {
  id                          String                        @id @default(cuid())
  name                        String
  description                 String
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String
  allowMultipleLoans          Boolean
  
  // JSON-like fields stored as strings
  serviceFee                  String?
  serviceFeeEnabled           Boolean?
  dailyFee                    String?
  dailyFeeEnabled             Boolean?
  penaltyRules                String?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  
  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistoryProducts      ScoringConfigurationProduct[]

  @@unique([name, providerId])
}


// Borrower represents an end-user who takes out a loan.
model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

// Loan model represents an instance of a loan taken by a borrower.
model Loan {
  id                 String       @id @default(cuid())
  loanAmount         Float
  serviceFee         Float
  penaltyAmount      Float        @default(0)
  repaidAmount       Float?
  disbursedDate      DateTime
  dueDate            DateTime
  repaymentStatus    String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relationships
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId         String
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId          String
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  borrowerId         String
  payments         Payment[]
}


// Payment model represents a repayment made towards a loan.
model Payment {
  id                              String   @id @default(cuid())
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  // Relationships
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
}


// LedgerAccount model represents financial accounts for booking loan transactions.
model LedgerAccount {
  id         String     @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name       String
  type       String // "Receivable" or "Received"
  category   String // "Principal", "Interest", or "Penalty"
  balance    Float      @default(0)
}


// DataProvisioningConfig model defines the structure for custom data uploaded by providers.
model DataProvisioningConfig {
  id          String                      @id @default(cuid())
  name        String
  columns     String // Stored as a JSON string
  // Relationships
  provider    LoanProvider                @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId  String
  products    LoanProduct[]
  uploads     DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String @id @default(cuid())
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
    
    // Relationships
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

// ProvisionedData holds the raw data from uploads for each borrower.
model ProvisionedData {
    id        String      @id @default(cuid())
    data      String // Stored as a JSON string
    createdAt DateTime    @default(now())

    // Relationships
    borrowerId String
    borrower   Borrower    @relation(fields: [borrowerId], references: [id])
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])

    @@unique([borrowerId, configId])
}


// ScoringParameter and Rule models define the credit scoring engine's logic.
model ScoringParameter {
  id       String @id @default(cuid())
  name     String
  weight   Int
  // Relationships
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId String
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int
  // Relationships
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
}

// LoanAmountTier defines the loan amounts based on score ranges.
model LoanAmountTier {
  id         String      @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float
  // Relationships
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
}


// ScoringConfigurationHistory stores versioned copies of scoring rules.
model ScoringConfigurationHistory {
    id        String                        @id @default(cuid())
    savedAt   DateTime                      @default(now())
    parameters String  // Stored as JSON string
    
    // Relationships
    providerId String
    provider   LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    products   ScoringConfigurationProduct[]
}

// ScoringConfigurationProduct links a history item to the products it was applied to.
model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    assignedAt  DateTime                      @default(now())
    assignedBy  String

    // Relationships
    configId   String
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId  String
    product    LoanProduct                   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
