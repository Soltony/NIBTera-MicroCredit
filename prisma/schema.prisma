// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ==================================
//          AUTHENTICATION
// ==================================
model User {
  id            String    @id @default(uuid())
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  status        String    @default("Active") // Active, Inactive
  roleId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  loanProviderId String?
  
  role          Role      @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])

  @@index([roleId])
  @@index([loanProviderId])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON string for permissions
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ==================================
//          LOAN MANAGEMENT
// ==================================
model LoanProvider {
  id                        String   @id @default(uuid())
  name                      String   @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int
  accountNumber             String?
  allowMultipleProviderLoans Boolean @default(false)
  allowCrossProviderLoans   Boolean @default(true)
  
  users                     User[]
  products                  LoanProduct[]
  loans                     Loan[]
  scoringParameters         ScoringParameter[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringHistory            ScoringConfigurationHistory[]
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model LoanProduct {
  id            String    @id @default(uuid())
  providerId    String
  name          String
  description   String
  icon          String
  minLoan       Float
  maxLoan       Float
  status        String    @default("Active") // Active, Disabled
  
  serviceFeeEnabled     Boolean @default(true)
  serviceFee            String  // JSON string for FeeRule
  
  dailyFeeEnabled       Boolean @default(true)
  dailyFee              String  // JSON string for DailyFeeRule

  penaltyRulesEnabled   Boolean @default(true)
  penaltyRules          String  // JSON string for PenaltyRule[]
  
  provider        LoanProvider     @relation(fields: [providerId], references: [id])
  loans           Loan[]
  loanAmountTiers LoanAmountTier[]
  scoringHistory  ScoringConfigurationHistory[] @relation("ProductScoringHistory")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([name, providerId])
  @@index([providerId])
}

model LoanAmountTier {
  id          String   @id @default(uuid())
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float
  
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([productId])
}

// ==================================
//        CUSTOMER & LOAN DATA
// ==================================
model Customer {
  id             String   @id @default(uuid())
  age            Int
  gender         String
  monthlyIncome  Float
  educationLevel String
  loanHistory    String // JSON string for loan history
  
  loans          Loan[]
  provisionedData ProvisionedData[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Loan {
  id                String    @id @default(uuid())
  customerId        String
  providerId        String
  productId         String
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float     @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String    // Unpaid, Paid
  repaidAmount      Float?    @default(0)
  
  customer          Customer      @relation(fields: [customerId], references: [id])
  provider          LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product           LoanProduct   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments          Payment[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([customerId])
  @@index([providerId])
  @@index([productId])
}

model Payment {
  id                              String   @id @default(uuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  
  createdAt                       DateTime @default(now())
  
  @@index([loanId])
}

// ==================================
//      SCORING & DATA PROVISIONING
// ==================================
model ScoringParameter {
  id          String   @id @default(uuid())
  providerId  String
  name        String
  weight      Int
  
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules       ScoringParameterRule[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([providerId])
}

model ScoringParameterRule {
  id          String   @id @default(uuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@index([parameterId])
}

model ScoringConfigurationHistory {
  id              String   @id @default(uuid())
  providerId      String
  parameters      String // JSON string of ScoringParameter[] at the time of saving
  savedAt         DateTime @default(now())
  
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  appliedProducts LoanProduct[] @relation("ProductScoringHistory")
  
  @@index([providerId])
}

model DataProvisioningConfig {
  id          String   @id @default(uuid())
  providerId  String
  name        String
  columns     String // JSON string for DataColumn[]
  
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  uploads     DataProvisioningUpload[]
  data        ProvisionedData[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([providerId])
}

model DataProvisioningUpload {
  id          String   @id @default(uuid())
  configId    String
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
}

model ProvisionedData {
    id          String @id @default(uuid())
    customerId  String
    configId    String
    data        String // JSON string of the uploaded row data
    createdAt   DateTime @default(now())

    customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@unique([customerId, configId])
    @@index([customerId])
    @@index([configId])
}
