// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String   @id @default(cuid())
  name                      String   @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int      @default(0)
  accountNumber             String?
  initialBalance            Float    @default(0)
  allowCrossProviderLoans   Boolean  @default(false)

  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                          String   @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String
  
  allowConcurrentLoans        Boolean                       @default(false)
  
  serviceFee                  String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number }
  serviceFeeEnabled           Boolean?
  
  dailyFee                    String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  dailyFeeEnabled             Boolean?
  
  penaltyRules                String? // JSON stored as string: PenaltyRule[]
  penaltyRulesEnabled         Boolean?
  
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}


model Loan {
  id                String      @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  borrowerId      String
  borrower        Borrower    @relation(fields: [borrowerId], references: [id], onDelete: NoAction)
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  loanAmount      Float
  serviceFee      Float
  repaidAmount    Float?
  penaltyAmount   Float       @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String      // "Paid" or "Unpaid"
  payments          Payment[]
}

model Payment {
  id                  String      @id @default(cuid())
  loanId              String
  loan                Loan        @relation(fields: [loanId], references: [id])
  amount              Float
  date                DateTime
  outstandingBalanceBeforePayment Float?
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // Stored as a JSON string
  users       User[]
}

model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  roleId        String
  role          Role    @relation(fields: [roleId], references: [id])

  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model DataProvisioningConfig {
  id         String   @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  name       String
  columns    String // JSON string representing the column configuration
  products   LoanProduct[]
  uploads    DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id         String   @id @default(cuid())
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id])
  fileName   String
  rowCount   Int
  uploadedAt DateTime @default(now())
  uploadedBy String
}

model Borrower {
  id              String @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id        String   @id @default(cuid())
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id])
  configId  String
  config    DataProvisioningConfig @relation(fields: [configId], references: [id])
  data      String // JSON string of the provisioned data
  createdAt DateTime @default(now())

  @@unique([borrowerId, configId])
}


model ScoringParameter {
  id        String @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  name      String
  weight    Int
  rules     ScoringRule[]
}

model ScoringRule {
  id          String  @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
    id          String @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    savedAt     DateTime @default(now())
    parameters  String // JSON string of ScoringParameter[]
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String @id @default(cuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String
    
    @@unique([configId, productId])
}


model LoanAmountTier {
    id          String      @id @default(cuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}

model LedgerAccount {
  id         String       @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  name       String
  type       String // Receivable, Received, Income
  category   String // Principal, Interest, ServiceFee, Penalty
  balance    Float        @default(0)

  @@unique([providerId, name])
}
