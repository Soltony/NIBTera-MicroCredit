// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model LoanProvider {
  id                        String                     @id @default(cuid())
  name                      String                     @unique
  icon                      String
  colorHex                  String
  displayOrder              Int
  accountNumber             String?
  startingCapital           Float
  initialBalance            Float // This will be the live, fluctuating balance
  allowCrossProviderLoans   Boolean                    @default(false)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
  journalEntries            JournalEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String                       @default("Active") // e.g., Active, Disabled
  allowConcurrentLoans        Boolean                      @default(false)
  serviceFeeEnabled           Boolean?
  serviceFee                  Json? // { type: 'fixed' | 'percentage', value: number }
  dailyFeeEnabled             Boolean?
  dailyFee                    Json? // { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean?
  penaltyRules                Json? // Array of PenaltyRule
  dataProvisioningEnabled     Boolean?                     @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, providerId])
}

model LoanAmountTier {
    id          String      @id @default(cuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProvisionedData {
    id        String                  @id @default(cuid())
    borrowerId String
    borrower  Borrower                @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId  String
    config    DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    data      Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([borrowerId, configId])
}


model Loan {
  id              String    @id @default(cuid())
  borrowerId      String
  borrower        Borrower  @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id])
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float     @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // e.g., Paid, Unpaid
  repaidAmount    Float?
  payments        Payment[]
  journalEntries  JournalEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                              String    @id @default(cuid())
  loanId                          String
  loan                            Loan      @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  journalEntryId                  String?   @unique
  journalEntry                    JournalEntry? @relation(fields: [journalEntryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              String        @id @default(cuid())
  fullName        String
  email           String        @unique
  phoneNumber     String        @unique
  password        String
  status          String // e.g., Active, Inactive
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Data Provisioning Models
model DataProvisioningConfig {
  id            String             @id @default(cuid())
  providerId    String
  provider      LoanProvider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name          String
  columns       Json // JSON array of column definitions { id, name, type, isIdentifier, options? }
  uploads       DataProvisioningUpload[]
  provisionedData ProvisionedData[]
  products      LoanProduct[]

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  @@unique([providerId, name])
}

model DataProvisioningUpload {
    id          String                  @id @default(cuid())
    configId    String
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime                @default(now())
}


// Scoring Engine Models
model ScoringParameter {
  id         String   @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  weight     Int
  rules      Rule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rule {
  id          String            @id @default(cuid())
  parameterId String
  parameter   ScoringParameter  @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ScoringConfigurationHistory {
    id              String      @id @default(cuid())
    providerId      String
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters      Json // JSON snapshot of ScoringParameter[] at time of save
    savedAt         DateTime    @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                       @id @default(cuid())
    configId    String
    config      ScoringConfigurationHistory  @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId   String
    product     LoanProduct                  @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedAt  DateTime                     @default(now())
    assignedBy  String

    @@unique([configId, productId])
}

// Double-entry accounting models
model LedgerAccount {
    id              String          @id @default(cuid())
    providerId      String
    provider        LoanProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name            String
    type            String // Receivable, Received, Income
    category        String // Principal, Interest, Penalty, ServiceFee
    balance         Float           @default(0.0)
    entries         LedgerEntry[]
    
    @@unique([providerId, name])
}

model JournalEntry {
  id              String        @id @default(cuid())
  providerId      String
  provider        LoanProvider  @relation(fields: [providerId], references: [id])
  loanId          String?
  loan            Loan?         @relation(fields: [loanId], references: [id])
  payment         Payment?
  date            DateTime
  description     String
  entries         LedgerEntry[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model LedgerEntry {
  id              String        @id @default(cuid())
  journalEntryId  String
  journalEntry    JournalEntry  @relation(fields: [journalEntryId], references: [id])
  ledgerAccountId String
  ledgerAccount   LedgerAccount @relation(fields: [ledgerAccountId], references: [id])
  type            String        // 'Debit' or 'Credit'
  amount          Float
  
  createdAt       DateTime      @default(now())
}
