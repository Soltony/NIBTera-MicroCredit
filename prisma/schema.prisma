// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model LoanProvider {
  id                        String              @id @default(cuid())
  name                      String              @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float?
  allowCrossProviderLoans   Boolean             @default(false)

  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                        String      @id @default(cuid())
  providerId                String
  provider                  LoanProvider @relation(fields: [providerId], references: [id])

  name                      String
  description               String?
  icon                      String
  minLoan                   Float?
  maxLoan                   Float?
  duration                  Int?
  status                    String      @default("Active") // Active, Disabled
  allowConcurrentLoans      Boolean     @default(false)

  serviceFeeEnabled         Boolean?    @default(false)
  serviceFee                String?     // { type: 'fixed'/'percentage', value: number }
  dailyFeeEnabled           Boolean?    @default(false)
  dailyFee                  String?     // { type: 'fixed'/'percentage', value: number, calculationBase: 'principal'/'compound' }

  penaltyRulesEnabled       Boolean?    @default(false)
  penaltyRules              String?     // [{ fromDay: number, toDay: number|null, type: 'fixed'/'percentageOfPrincipal'/'percentageOfCompound', value: number }]
  
  dataProvisioningEnabled   Boolean?    @default(false)
  dataProvisioningConfigId  String?
  dataProvisioningConfig    DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  loans                     Loan[]
  loanAmountTiers           LoanAmountTier[]
  scoringConfigurations     ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model Loan {
  id                String      @id @default(cuid())
  providerId        String
  provider          LoanProvider @relation(fields: [providerId], references: [id])
  borrowerId        String
  borrower          Borrower @relation(fields: [borrowerId], references: [id])
  productId         String
  product           LoanProduct @relation(fields: [productId], references: [id])
  
  loanAmount        Float
  serviceFee        Float       @default(0)
  penaltyAmount     Float       @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String      // Paid, Unpaid
  repaidAmount      Float?

  payments          Payment[]
}

model Payment {
  id                              String      @id @default(cuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

// Stores the raw data uploaded for a specific borrower against a specific config
model ProvisionedData {
    id        String @id @default(cuid())
    borrowerId String
    configId  String
    borrower  Borrower @relation(fields: [borrowerId], references: [id])
    config    DataProvisioningConfig @relation(fields: [configId], references: [id])
    
    data String
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([borrowerId, configId])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String
  users       User[]
}

model User {
  id            String       @id @default(cuid())
  fullName      String
  email         String       @unique
  phoneNumber   String       @unique
  password      String
  status        String       @default("Active") // Active, Inactive
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}


model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  
  field       String
  condition   String // >, <, ==, etc.
  value       String
  score       Int
}

model LoanAmountTier {
  id         String @id @default(cuid())
  productId  String
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model ScoringConfigurationHistory {
    id         String      @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])

    parameters String
    savedAt    DateTime @default(now())

    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String @id @default(cuid())
    configId    String
    config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id])
    
    assignedAt  DateTime @default(now())
    assignedBy  String // User ID
}


model DataProvisioningConfig {
    id         String      @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    
    name    String
    columns String // [{ id, name, type: 'string'/'number'/'date', isIdentifier: bool, options: [] }]

    uploads          DataProvisioningUpload[]
    provisionedData  ProvisionedData[]
    loanProducts     LoanProduct[]
}

model DataProvisioningUpload {
    id          String @id @default(cuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}

model LedgerAccount {
  id         String @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  
  name       String
  type       String // Receivable, Received
  category   String // Principal, Interest, Penalty
  balance    Float  @default(0.0)
}
