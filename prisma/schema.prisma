
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================
// AUTHENTICATION & USERS
// ==============================================================
model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])

  @@index([roleId])
  @@index([loanProviderId])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String
  users       User[]
}

// ==============================================================
// LOAN PROVIDERS & PRODUCTS
// ==============================================================
model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  
  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  ledgerAccounts              LedgerAccount[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
}

model LoanProduct {
  id                          String    @id @default(cuid())
  name                        String
  description                 String?
  icon                        String?
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String
  allowMultipleLoans          Boolean   @default(false)
  
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  
  // Relationships
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]

  @@unique([name, providerId])
  @@index([providerId])
  @@index([dataProvisioningConfigId])
}

model Loan {
  id                 String   @id @default(cuid())
  borrowerId         String
  disbursedDate      DateTime
  dueDate            DateTime
  loanAmount         Float
  serviceFee         Float
  penaltyAmount      Float    @default(0)
  repaymentStatus    String
  repaidAmount       Float?
  
  // Relationships
  providerId         String
  provider           LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction) // NoAction to prevent cycles with Provider -> Product -> Loan
  productId          String
  product            LoanProduct  @relation(fields: [productId], references: [id], onDelete: Restrict) // Restrict deletion of product if loans exist
  
  payments           Payment[]
  borrower           Borrower     @relation(fields: [borrowerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([productId])
  @@index([borrowerId])
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  
  // Relationships
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([loanId])
}

// ==============================================================
// BORROWER & DATA PROVISIONING
// ==============================================================
model Borrower {
  id             String            @id
  provisionedData ProvisionedData[]
  loans          Loan[]
}

model ProvisionedData {
  id         String   @id @default(cuid())
  borrowerId String
  configId   String
  data       String
  createdAt  DateTime @default(now())

  // Relationships
  borrower   Borrower                 @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([borrowerId, configId])
  @@index([borrowerId])
  @@index([configId])
}

model DataProvisioningConfig {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  columns     String

  // Relationships
  provider        LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  provisionedData ProvisionedData[]
  products        LoanProduct[]
  uploads         DataProvisioningUpload[]

  @@index([providerId])
}

model DataProvisioningUpload {
    id          String @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String

    // Relationships
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@index([configId])
}


// ==============================================================
// CREDIT SCORING
// ==============================================================
model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  name       String
  weight     Int

  // Relationships
  provider   LoanProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules      ScoringRule[]

  @@index([providerId])
}

model ScoringRule {
  id          String  @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  
  // Relationships
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

  @@index([parameterId])
}

model LoanAmountTier {
    id         String      @id @default(cuid())
    productId  String
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Relationships
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([productId])
}

model ScoringConfigurationHistory {
    id              String                         @id @default(cuid())
    providerId      String
    parameters      String
    savedAt         DateTime                       @default(now())
    
    // Relationships
    provider        LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]

    @@index([providerId])
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    configId    String
    productId   String
    assignedBy  String
    assignedAt  DateTime                      @default(now())
    
    // Relationships
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    
    @@unique([configId, productId])
    @@index([configId])
    @@index([productId])
}


// ==============================================================
// ACCOUNTING & LEDGER
// ==============================================================
model LedgerAccount {
    id          String @id @default(cuid())
    providerId  String
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float  @default(0)

    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

    @@index([providerId])
}
