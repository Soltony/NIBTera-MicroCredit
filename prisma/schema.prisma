
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model LoanProvider {
  id       String        @id @default(cuid())
  name     String        @unique
  icon     String
  colorHex String?
  products LoanProduct[]
  users    User[]
  scoringParameters ScoringParameter[]
}

model LoanProduct {
  id              String        @id @default(cuid())
  providerId      String
  name            String
  description     String
  icon            String
  minLoan         Float
  maxLoan         Float
  serviceFee      String
  dailyFee        String
  penaltyFee      String
  status          String
  provider        LoanProvider  @relation(fields: [providerId], references: [id])
  loanDetails     LoanDetails[]
}

model LoanDetails {
  id              String    @id @default(cuid())
  providerId      String
  productId       String
  loanAmount      Float
  serviceFee      Float
  interestRate    Float
  disbursedDate   DateTime
  dueDate         DateTime
  penaltyAmount   Float
  repaymentStatus String
  repaidAmount    Float?
  provider        LoanProvider @relation(fields: [providerId], references: [id])
  product         LoanProduct  @relation(fields: [productId], references: [id])
  payments        Payment[]
}

model Payment {
  id                             String      @id @default(cuid())
  loanId                         String
  amount                         Float
  date                           DateTime
  outstandingBalanceBeforePayment Float
  loan                           LoanDetails @relation(fields: [loanId], references: [id])
}

model User {
  id          String        @id @default(cuid())
  fullName    String
  email       String        @unique
  phoneNumber String        @unique
  password    String
  roleName    String
  status      String
  providerId  String?
  provider    LoanProvider? @relation(fields: [providerId], references: [id])
  role        Role          @relation(fields: [roleName], references: [name])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json
  users       User[]
}

model ScoringParameter {
  id         String                 @id @default(cuid())
  providerId String
  name       String
  weight     Int
  provider   LoanProvider           @relation(fields: [providerId], references: [id])
  rules      ScoringParameterRule[]
}

model ScoringParameterRule {
  id                 String           @id @default(cuid())
  scoringParameterId String
  field              String
  condition          String
  value              String
  score              Int
  scoringParameter   ScoringParameter @relation(fields: [scoringParameterId], references: [id], onDelete: Cascade)
}
