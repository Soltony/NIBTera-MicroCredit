// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float?
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                      @default(true)
  products                  LoanProduct[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  users                     User[]
}

model LoanProduct {
  id                          String                        @id @default(uuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                  String
  name                        String
  description                 String
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  serviceFee                  String? // JSON stored as string
  dailyFee                    String? // JSON stored as string
  penaltyRules                String? // JSON stored as string
  status                      String                        @default("Active")
  serviceFeeEnabled           Boolean                       @default(false)
  dailyFeeEnabled             Boolean                       @default(false)
  penaltyRulesEnabled         Boolean                       @default(false)
  dataProvisioningEnabled     Boolean                       @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id])
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationHistory[]

  @@unique([name, providerId])
}

model Loan {
  id              String       @id @default(uuid())
  customerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  product         LoanProduct  @relation(fields: [productId], references: [id])
  productId       String
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float        @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String
  repaidAmount    Float?
  payments        Payment[]
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

model Customer {
  id             String @id
  age            Int
  monthlyIncome  Float
  gender         String
  educationLevel String
  loanHistory    String // JSON stored as string
  loans          Loan[] @relation(fields: [id], references: [customerId])

  // New fields for data provisioning
  provisionedData ProvisionedData[]
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON stored as string
  users       User[]
}

// Models for Credit Scoring Engine
model ScoringParameter {
  id         String @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id              String           @id @default(uuid())
  parameter       ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId     String
  field           String
  condition       String
  value           String
  score           Int
}

model LoanAmountTier {
  id        String      @id @default(uuid())
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  fromScore Int
  toScore   Int
  loanAmount Float
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  parameters      String // JSON representation of the ScoringParameter[] at the time of saving
  savedAt         DateTime      @default(now())
  appliedProducts LoanProduct[]
}

// Models for Data Provisioning
model DataProvisioningConfig {
  id        String          @id @default(uuid())
  provider  LoanProvider    @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId String
  name      String
  columns   String // JSON representation of DataColumn[]
  uploads   DataProvisioningUpload[]
  products  LoanProduct[]
}

model DataProvisioningUpload {
    id String @id @default(uuid())
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId String
    fileName String
    rowCount Int
    uploadedBy String
    uploadedAt DateTime @default(now())
}

model ProvisionedData {
    id String @id @default(uuid())
    customer Customer @relation(fields: [customerId], references: [id])
    customerId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId String
    data String // JSON representation of the row data
    createdAt DateTime @default(now())
}

// Model for Financial Ledgers
model LedgerAccount {
    id String @id @default(uuid())
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name String
    type String // e.g., Receivable, Received
    category String // e.g., Principal, Interest, Penalty
    balance Float @default(0)
}
