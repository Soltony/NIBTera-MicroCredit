// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String   @db.VarChar(MAX)
  users       User[]
}

model LoanProvider {
  id          String   @id @default(cuid())
  name        String   @unique
  icon        String   @db.VarChar(MAX)
  colorHex    String?
  displayOrder Int
  accountNumber String?
  initialBalance Float?
  allowMultipleProviderLoans Boolean @default(false)
  allowCrossProviderLoans    Boolean @default(false)
  
  users       User[]
  products    LoanProduct[]
  scoringParameters ScoringParameter[]
  scoringHistory    ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  ledgerAccounts      LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  name                        String
  description                 String
  icon                        String                        @db.VarChar(MAX)
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String
  allowMultipleLoans          Boolean                       @default(false)

  // Fee Structures - Stored as JSON strings
  serviceFee                  String?                       @db.VarChar(MAX)
  dailyFee                    String?                       @db.VarChar(MAX)
  penaltyRules                String?                       @db.VarChar(MAX)
  
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?

  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Borrower {
  id              String @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id          String   @id @default(cuid())
  borrowerId  String
  configId    String
  data        String   @db.VarChar(MAX)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  borrower    Borrower                @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([borrowerId, configId])
}

model Loan {
  id              String      @id @default(cuid())
  borrowerId      String
  providerId      String
  productId       String
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float       @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String      // e.g., "Unpaid", "Paid"
  repaidAmount    Float?

  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product         LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  borrower        Borrower     @relation(fields: [borrowerId], references: [id], onDelete: NoAction)
  payments        Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model ScoringParameter {
  id         String   @id @default(cuid())
  providerId String
  name       String
  weight     Int
  rules      Rule[]
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
  id        String      @id @default(cuid())
  productId String
  fromScore Int
  toScore   Int
  loanAmount Float
  
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
    id              String      @id @default(cuid())
    providerId      String
    parameters      String      @db.VarChar(MAX) // JSON string of parameters
    savedAt         DateTime    @default(now())
    appliedProducts ScoringConfigurationProduct[]

    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    assignedBy  String
    assignedAt  DateTime                      @default(now())

    @@unique([configId, productId])
}

model DataProvisioningConfig {
  id          String      @id @default(cuid())
  providerId  String
  name        String
  columns     String      @db.VarChar(MAX) // JSON string
  
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  uploads     DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id          String      @id @default(cuid())
  configId    String
  fileName    String
  rowCount    Int
  uploadedAt  DateTime    @default(now())
  uploadedBy  String
  
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model LedgerAccount {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  type        String   // 'Receivable' or 'Received'
  category    String   // 'Principal', 'Interest', 'Penalty'
  balance     Float    @default(0.0)

  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
