// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowMultipleProviderLoans Boolean                       @default(false)
  allowCrossProviderLoans   Boolean                       @default(false)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  createdAt                 DateTime                      @default(now())
  updatedAt                 DateTime                      @updatedAt
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                        String                        @id @default(uuid())
  provider                  LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                String
  name                      String
  description               String?
  icon                      String
  minLoan                   Float?
  maxLoan                   Float?
  status                    String                        @default("Active")
  serviceFee                String? // JSON stored as string
  dailyFee                  String? // JSON stored as string
  penaltyRules              String? // JSON stored as string
  serviceFeeEnabled         Boolean                       @default(true)
  dailyFeeEnabled           Boolean                       @default(true)
  penaltyRulesEnabled       Boolean                       @default(true)
  dataProvisioningEnabled   Boolean?                      @default(false)
  dataProvisioningConfig    DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id])
  dataProvisioningConfigId  String?
  scoringHistory            ScoringConfigurationHistory[]
  loans                     Loan[]
  loanAmountTiers           LoanAmountTier[]
  createdAt                 DateTime                      @default(now())
  updatedAt                 DateTime                      @updatedAt

  @@unique([name, providerId])
}

model Loan {
  id                String        @id @default(uuid())
  customer          Customer      @relation(fields: [customerId], references: [id])
  customerId        String
  provider          LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId        String
  product           LoanProduct   @relation(fields: [productId], references: [id])
  productId         String
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float         @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String        @default("Unpaid") // e.g., Unpaid, Paid, Overdue
  repaidAmount      Float?
  payments          Payment[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Customer {
  id             String            @id @default(uuid())
  age            Int
  gender         String
  monthlyIncome  Float
  educationLevel String
  loanHistory    String // JSON stored as string
  loans          Loan[]
  provisionedData ProvisionedData[]
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON stored as string
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Scoring Models
model ScoringParameter {
  id         String @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  parameters      String // JSON stored as string
  savedAt         DateTime      @default(now())
  appliedProducts LoanProduct[]
}

model LoanAmountTier {
  id         String      @id @default(uuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
}


// Data Provisioning Models
model DataProvisioningConfig {
  id              String            @id @default(uuid())
  provider        LoanProvider      @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  name            String
  columns         String // JSON stored as string
  products        LoanProduct[]
  uploads         DataProvisioningUpload[]
  provisionedData ProvisionedData[]

  @@unique([providerId, name])
}

model DataProvisioningUpload {
  id          String                 @id @default(uuid())
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  fileName    String
  rowCount    Int
  uploadedAt  DateTime               @default(now())
  uploadedBy  String
}

model ProvisionedData {
    id         String                 @id @default(uuid())
    customer   Customer               @relation(fields: [customerId], references: [id])
    customerId String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId   String
    data       String // JSON stored as string
    createdAt  DateTime               @default(now())

    @@unique([customerId, configId])
}


// Ledger and Accounting Models
model LedgerAccount {
    id         String   @id @default(uuid())
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float    @default(0)

    @@unique([providerId, name])
}
