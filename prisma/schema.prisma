// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// #############################################################################
// Borrower & Provisioned Data
// #############################################################################
model Borrower {
  id              String            @id @default(cuid())
  loans           Loan[]
  provisionedData ProvisionedData[]
}

model ProvisionedData {
  id         String   @id @default(cuid())
  data       String
  createdAt  DateTime @default(now())

  // Relationships
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([borrowerId, configId])
}


// #############################################################################
// Loan, Provider, and Product Models
// #############################################################################
model LoanProvider {
  id                           String                        @id @default(cuid())
  name                         String                        @unique
  icon                         String?                       @db.Text
  colorHex                     String?
  displayOrder                 Int                           @default(0)
  accountNumber                String?
  initialBalance               Float?
  allowMultipleProviderLoans   Boolean                       @default(false)
  allowCrossProviderLoans      Boolean                       @default(false)

  // Relationships
  products                     LoanProduct[]
  users                        User[]
  scoringParameters            ScoringParameter[]
  scoringHistory               ScoringConfigurationHistory[]
  dataProvisioningConfigs      DataProvisioningConfig[]
  ledgerAccounts               LedgerAccount[]
}

model LoanProduct {
  id                           String                        @id @default(cuid())
  name                         String
  description                  String?
  icon                         String?                       @db.Text
  minLoan                      Float?
  maxLoan                      Float?
  duration                     Int?
  serviceFee                   String?
  dailyFee                     String?
  penaltyRules                 String?
  status                       String                        @default("Active") // Active, Disabled
  allowMultipleLoans           Boolean                       @default(false)
  serviceFeeEnabled            Boolean?
  dailyFeeEnabled              Boolean?
  penaltyRulesEnabled          Boolean?
  dataProvisioningEnabled      Boolean?

  // Relationships
  provider                     LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  providerId                   String
  loans                        Loan[]
  loanAmountTiers              LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  dataProvisioningConfig       DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dataProvisioningConfigId     String?

  @@unique([name, providerId])
}

model Loan {
  id              String   @id @default(cuid())
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float    @default(0)
  repaidAmount    Float?
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // Paid, Unpaid

  // Relationships
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  productId  String
  product    LoanProduct @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  payments   Payment[]

  // Denormalized for easier querying
  providerId String
}

model Payment {
  id                                String   @id @default(cuid())
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment   Float?

  // Relationships
  loanId String
  loan   Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
}


// #############################################################################
// Credit Scoring Engine Models
// #############################################################################
model DataProvisioningConfig {
  id           String            @id @default(cuid())
  name         String
  columns      String?
  provider     LoanProvider      @relation(fields: [providerId], references: [id])
  providerId   String
  products     LoanProduct[]
  uploads      DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id String @id @default(cuid())
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String
    
    // Relationships
    configId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
  id         String @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float

  // Relationships
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ScoringParameter {
  id         String  @id @default(cuid())
  name       String
  weight     Int
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
  id         String   @id @default(cuid())
  savedAt    DateTime @default(now())
  parameters String

  // Relationships
  providerId String
  provider   LoanProvider                    @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id         String @id @default(cuid())
  assignedBy String
  assignedAt DateTime @default(now())

  // Relationships
  configId  String
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  productId String
  product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User                        @relation(fields: [assignedBy], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([configId, productId])
}


// #############################################################################
// User and Access Control
// #############################################################################
model User {
  id              String                        @id @default(cuid())
  fullName        String
  email           String                        @unique
  phoneNumber     String                        @unique
  password        String
  status          String // Active, Inactive
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt

  // Relationships
  roleId          String
  role            Role                          @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider?                 @relation(fields: [loanProviderId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  scoringProductsAssigned ScoringConfigurationProduct[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String

  // Relationships
  users User[]
}


// #############################################################################
// Financial Ledgers
// #############################################################################
model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0)

    @@unique([providerId, name])
}
