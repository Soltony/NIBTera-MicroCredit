// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String
  users       User[]
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active")
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model LoanProvider {
  id                          String                       @id @default(cuid())
  name                        String                       @unique
  icon                        String                       @db.VarChar(MAX)
  colorHex                    String?
  displayOrder                Int                          @default(0)
  accountNumber               String?
  initialBalance              Float?
  allowMultipleProviderLoans  Boolean                      @default(false)
  allowCrossProviderLoans     Boolean                      @default(false)
  products                    LoanProduct[]
  users                       User[]
  scoringParameters           ScoringParameter[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  name                        String
  description                 String
  icon                        String                        @db.VarChar(MAX)
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  allowMultipleLoans          Boolean                       @default(false)
  serviceFee                  String
  dailyFee                    String
  penaltyRules                String
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  status                      String                        @default("Active")
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  scoringConfigurations       ScoringConfigurationProduct[]
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]

  @@unique([name, providerId])
}

model Loan {
  id                String       @id @default(cuid())
  borrower          Borrower     @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  provider          LoanProvider @relation(fields: [providerId], references: [id])
  providerId        String
  product           LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId         String
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String       @default("Unpaid")
  repaidAmount      Float?
  payments          Payment[]
}

model Payment {
  id                                String   @id @default(cuid())
  loan                              Loan     @relation(fields: [loanId], references: [id])
  loanId                            String
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment Float?
}

model DataProvisioningConfig {
  id          String            @id @default(cuid())
  provider    LoanProvider      @relation(fields: [providerId], references: [id])
  providerId  String
  name        String
  columns     String
  products    LoanProduct[]
  uploads     DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime @default(now())
}


model Borrower {
  id              String            @id
  loans           Loan[]
  provisionedData ProvisionedData[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ProvisionedData {
  id          String   @id @default(cuid())
  borrower    Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId  String
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  data        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([borrowerId, configId])
}

model ScoringParameter {
  id         String @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
    id              String                        @id @default(cuid())
    provider        LoanProvider                  @relation(fields: [providerId], references: [id])
    providerId      String
    parameters      String
    savedAt         DateTime                      @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id])
    configId    String
    product     LoanProduct                   @relation(fields: [productId], references: [id])
    productId   String
    assignedBy  String // User ID
    assignedAt  DateTime                      @default(now())
}

model LoanAmountTier {
  id          String      @id @default(cuid())
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float
}

model LedgerAccount {
    id          String       @id @default(cuid())
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    providerId  String
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float        @default(0.0)
}
