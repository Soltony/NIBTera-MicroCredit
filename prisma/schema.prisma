// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String                        @default("Building2")
  colorHex                  String                        @default("#FFFFFF")
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowCrossProviderLoans   Boolean                       @default(false)
  
  // Relations
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]

  createdAt                 DateTime                      @default(now())
  updatedAt                 DateTime                      @updatedAt
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  name                        String
  description                 String                        @default("")
  icon                        String                        @default("PersonStanding")
  minLoan                     Float                         @default(0)
  maxLoan                     Float                         @default(0)
  duration                    Int                           @default(30)
  status                      String                        @default("Active") // Active, Disabled
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFee                  String? // JSON for { type: 'fixed' | 'percentage', value: number }
  dailyFee                    String? // JSON for { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRules                String? // JSON for array of PenaltyRule
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)    

  // Relations
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  
  @@unique([name, providerId])
}

model Loan {
  id                  String      @id @default(cuid())
  borrowerId          String
  borrower            Borrower    @relation(fields: [borrowerId], references: [id])
  productId           String
  product             LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  loanAmount          Float
  serviceFee          Float
  penaltyAmount       Float       @default(0)
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String      @default("Unpaid") // Paid, Unpaid
  repaidAmount        Float?

  // Relations
  payments            Payment[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}


model ProvisionedData {
  id        String    @id @default(cuid())
  borrowerId  String
  borrower    Borrower  @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId  String
  config    DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  data      String // JSON string of the uploaded data for this borrower
  createdAt DateTime  @default(now())

  @@unique([borrowerId, configId])
}


model DataProvisioningConfig {
  id          String                @id @default(cuid())
  providerId  String
  provider    LoanProvider          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  columns     String // JSON string for DataColumn[]
  
  // Relations
  uploads     DataProvisioningUpload[]
  products    LoanProduct[]
  provisionedData ProvisionedData[]

  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model DataProvisioningUpload {
  id          String                  @id @default(cuid())
  configId    String
  config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime                @default(now())
}


model LoanAmountTier {
    id        String      @id @default(cuid())
    productId String
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore Int
    toScore   Int
    loanAmount Float
}


model Payment {
    id            String    @id @default(cuid())
    loanId        String
    loan          Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
    amount        Float
    date          DateTime
    outstandingBalanceBeforePayment Float?
}

model ScoringParameter {
    id          String @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    weight      Int
    rules       ScoringRule[]
}

model ScoringRule {
    id          String            @id @default(cuid())
    parameterId String
    parameter   ScoringParameter  @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field       String
    condition   String
    value       String
    score       Int
}

model ScoringConfigurationHistory {
    id              String @id @default(cuid())
    providerId      String
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters      String // JSON of ScoringParameter[]
    savedAt         DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String      @id @default(cuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String

    @@unique([configId, productId])
}


model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active") // Active, Inactive
  
  // Relations
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string for Permissions object
  
  // Relations
  users       User[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LedgerAccount {
    id          String       @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    type        String       // Receivable, Received, Income
    category    String       // Principal, Interest, ServiceFee, Penalty
    balance     Float        @default(0)

    @@unique([providerId, name])
}
