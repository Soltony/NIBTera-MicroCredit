
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                      String       @id @default(cuid())
  fullName                String
  email                   String       @unique
  phoneNumber             String
  password                String
  status                  String       @default("Active") // Active, Inactive
  roleName                String
  providerId              String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  role                    Role         @relation(fields: [roleName], references: [name], onDelete: NoAction, onUpdate: NoAction)
  provider                LoanProvider? @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProvisionedDataUploads  ProvisionedDataUpload[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // Stored as a JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model LoanProvider {
  id                          String    @id @default(cuid())
  name                        String    @unique
  icon                        String
  colorHex                    String
  displayOrder                Int
  accountNumber               String?
  allowMultipleProviderLoans  Boolean   @default(false)
  allowCrossProviderLoans     Boolean   @default(false)
  products                    LoanProduct[]
  users                       User[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringParameters           ScoringParameter[]
}

model LoanProduct {
  id                          String    @id @default(cuid())
  name                        String
  description                 String
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  status                      String    @default("Active") // Active, Disabled
  serviceFeeEnabled           Boolean   @default(false)
  serviceFee                  String // JSON: { type: 'fixed' | 'percentage', value: number }
  dailyFeeEnabled             Boolean   @default(false)
  dailyFee                    String // JSON: { type: 'fixed' | 'percentage', value: number, calculationBase?: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean   @default(false)
  penaltyRules                String // JSON: PenaltyRule[]
  providerId                  String
  provider                    LoanProvider @relation(fields: [providerId], references: [id])
  loanDetails                 LoanDetails[]
  loanAmountTiers             LoanAmountTier[]
  ScoringConfigurationHistory ScoringConfigurationHistory[]

  @@unique([providerId, name])
}

model LoanDetails {
  id                          String    @id @default(cuid())
  loanAmount                  Float
  serviceFee                  Float
  penaltyAmount               Float     @default(0)
  disbursedDate               DateTime
  dueDate                     DateTime
  repaymentStatus             String    @default("Unpaid") // Paid, Unpaid
  repaidAmount                Float     @default(0)
  providerId                  String
  productId                   String
  customerId                  String
  provider                    LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product                     LoanProduct  @relation(fields: [productId], references: [id])
  customer                    Customer     @relation(fields: [customerId], references: [id])
  payments                    Payment[]
}

model Payment {
  id                                String      @id @default(cuid())
  amount                            Float
  date                              DateTime    @default(now())
  outstandingBalanceBeforePayment   Float
  loanId                            String
  loan                              LoanDetails @relation(fields: [loanId], references: [id])
}

model Customer {
  id              String        @id @default(cuid())
  age             Int
  monthlyIncome   Float
  gender          String
  educationLevel  String
  loanHistory     String // JSON: { totalLoans: number, onTimeRepayments: number }
  loans           LoanDetails[]
  provisionedData ProvisionedData[]
}

model ScoringParameter {
  id         String   @id @default(cuid())
  name       String
  weight     Int
  rules      String // JSON: Rule[]
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  
  @@unique([providerId, name])
}

model LoanAmountTier {
  id         String      @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float
  productId  String
  product    LoanProduct @relation(fields: [productId], references: [id])
}

model DataProvisioningConfig {
  id         String   @id @default(cuid())
  name       String
  columns    String   // JSON: DataColumn[]
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  uploads    ProvisionedDataUpload[]

  @@unique([providerId, name])
}

model ProvisionedDataUpload {
  id         String   @id @default(cuid())
  fileName   String
  rowCount   Int
  uploadedBy String
  uploadedAt DateTime @default(now())
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id])
  data       ProvisionedData[]
}

model ProvisionedData {
  id          String   @id @default(cuid())
  data        String   // JSON string of the row data
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  uploadId    String
  upload      ProvisionedDataUpload @relation(fields: [uploadId], references: [id])
  createdAt   DateTime @default(now())
}

model ScoringConfigurationHistory {
  id                String       @id @default(cuid())
  savedAt           DateTime     @default(now())
  parameters        String       // JSON of ScoringParameter[] at the time of saving
  appliedProductIds String       // JSON of product IDs string[]
  providerId        String
  products          LoanProduct[]
}

model CustomParameter {
    id String @id @default(cuid())
    name String
    providerId String
    // No relation to provider to keep it simple as it's just for UI hints
}
