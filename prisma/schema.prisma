
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model LoanProvider {
  id       String        @id @default(uuid())
  name     String        @unique
  icon     String
  colorHex String
  products LoanProduct[]
  users    User[]
  loans    LoanDetails[]
  scoringParameters ScoringParameter[]
}

model LoanProduct {
  id           String        @id @default(uuid())
  name         String
  description  String
  icon         String
  minLoan      Float
  maxLoan      Float
  serviceFee   String
  dailyFee     String
  penaltyFee   String
  status       String
  provider     LoanProvider  @relation(fields: [providerId], references: [id])
  providerId   String
  loans        LoanDetails[]
}

model LoanDetails {
  id               String    @id @default(uuid())
  provider         LoanProvider @relation(fields: [providerId], references: [id])
  providerId       String
  product          LoanProduct  @relation(fields: [productId], references: [id])
  productId        String
  loanAmount       Float
  serviceFee       Float
  interestRate     Float
  disbursedDate    DateTime
  dueDate          DateTime
  penaltyAmount    Float
  repaymentStatus  String
  repaidAmount     Float?
  payments         Payment[]
}

model Payment {
  id                            String      @id @default(uuid())
  loan                          LoanDetails @relation(fields: [loanId], references: [id])
  loanId                        String
  amount                        Float
  date                          DateTime
  outstandingBalanceBeforePayment Float
}

model User {
  id          String        @id @default(uuid())
  fullName    String
  email       String        @unique
  phoneNumber String        @unique
  password    String
  status      String
  roleName    String
  role        Role          @relation(fields: [roleName], references: [name])
  provider    LoanProvider? @relation(fields: [providerId], references: [id])
  providerId  String?
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions Json
  users       User[]
}

model ScoringParameter {
  id         String                  @id @default(uuid())
  provider   LoanProvider            @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      ScoringParameterRule[]
}

model ScoringParameterRule {
  id          String            @id @default(uuid())
  parameter   ScoringParameter  @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}
