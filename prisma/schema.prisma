// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model LoanProvider {
  id String @id @default(uuid())
  name String @unique
  icon String @db.Text
  colorHex String?
  displayOrder Int @default(0)
  accountNumber String?
  initialBalance Float @default(0)
  allowCrossProviderLoans Boolean @default(false)
  products LoanProduct[]
  users User[]
  scoringParameters ScoringParameter[]
  scoringHistory ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  ledgerAccounts LedgerAccount[]
}

model LoanProduct {
  id String @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  description                 String?
  icon                        String                        @db.Text
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                        @default("Active")
  
  allowConcurrentLoans        Boolean                       @default(false)
  
  serviceFee                  String?                       @db.NVarChar(Max) // JSON stored as string
  serviceFeeEnabled           Boolean?                      @default(false)

  dailyFee                    String?                       @db.NVarChar(Max) // JSON stored as string
  dailyFeeEnabled             Boolean?                      @default(false)

  penaltyRules                String?                       @db.NVarChar(Max) // JSON stored as string
  penaltyRulesEnabled         Boolean?                      @default(false)

  dataProvisioningEnabled     Boolean?                      @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id String @id @default(uuid())
  borrowerId      String
  borrower        Borrower @relation(fields: [borrowerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float     @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String
  repaidAmount    Float?
  payments        Payment[]
  createdAt       DateTime  @default(now())
}

model Borrower {
  id String @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id        String    @id @default(uuid())
  borrowerId  String
  borrower    Borrower  @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId  String
  config    DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  data      String    @db.NVarChar(Max) // JSON string of the uploaded data for this borrower
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([borrowerId, configId])
}


model Payment {
  id          String   @id @default(uuid())
  loanId      String
  loan        Loan     @relation(fields: [loanId], references: [id])
  amount      Float
  date        DateTime @default(now())
  outstandingBalanceBeforePayment Float?
}

model LoanAmountTier {
  id        String      @id @default(uuid())
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromScore Int
  toScore   Int
  loanAmount Float
}

model DataProvisioningConfig {
  id String @id @default(uuid())
  providerId String
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name String
  columns String @db.NVarChar(Max) // Stored as a JSON string
  uploads DataProvisioningUpload[]
  products LoanProduct[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id String @id @default(uuid())
    configId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName String
    rowCount Int
    uploadedBy String
    uploadedAt DateTime @default(now())
}


model ScoringParameter {
    id String @id @default(uuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name String
    weight Int
    rules Rule[]
}

model Rule {
    id String @id @default(uuid())
    parameterId String
    parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field String
    condition String
    value String
    score Int
}

model ScoringConfigurationHistory {
    id String @id @default(uuid())
    providerId String
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters String @db.NVarChar(Max) // JSON string of ScoringParameter[]
    savedAt DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String                      @id @default(uuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String

    @@unique([configId, productId])
}

// Security and User Management
model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active")
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String   @db.NVarChar(Max) // JSON string for permissions
  users       User[]
}

model LedgerAccount {
  id          String   @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  type        String // Receivable, Received, Income
  category    String // Principal, Interest, ServiceFee, Penalty
  balance     Float    @default(0)

  @@unique([providerId, name])
}
