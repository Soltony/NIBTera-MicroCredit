
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String                        @db.VarChar(MAX)
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  products                  LoanProduct[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
  loans                     Loan[] // Added to complete the relation
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  name                        String
  description                 String?
  icon                        String                        @db.VarChar(MAX)
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String                        @default("Active")
  allowMultipleLoans          Boolean                       @default(false)
  serviceFeeEnabled           Boolean?
  serviceFee                  Json?
  dailyFeeEnabled             Boolean?
  dailyFee                    Json?
  penaltyRulesEnabled         Boolean?
  penaltyRules                Json?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id])
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model LoanAmountTier {
    id        String      @id @default(cuid())
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    fromScore Int
    toScore   Int
    loanAmount Float
}

model Borrower {
    id String @id
    provisionedData ProvisionedData[]
    loans Loan[]
}

model ProvisionedData {
    id         String      @id @default(cuid())
    borrowerId String
    borrower   Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data       Json
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    @@unique([borrowerId, configId])
}


model Loan {
  id              String   @id @default(cuid())
  borrowerId      String
  borrower        Borrower @relation(fields: [borrowerId], references: [id])
  providerId      String
  productId       String
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float    @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String   @default("Unpaid") // e.g., Unpaid, Paid, Overdue
  repaidAmount    Float?

  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product         LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  payments        Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String @db.VarChar(MAX)
  users       User[]
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active")
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Models for Credit Scoring Engine
model ScoringParameter {
  id         String       @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
  id         String                        @id @default(cuid())
  provider   LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  savedAt    DateTime                      @default(now())
  parameters String                        @db.VarChar(MAX)
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    assignedAt  DateTime                      @default(now())
    assignedBy  String // User ID
}

model DataProvisioningConfig {
    id        String              @id @default(cuid())
    provider  LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name      String
    columns   String              @db.VarChar(MAX) // JSON array of { name: string, type: 'string'|'number'|'date', isIdentifier: boolean }
    products  LoanProduct[]
    uploads   DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String                  @id @default(cuid())
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime                @default(now())
    uploadedBy  String
}

model LedgerAccount {
    id         String      @id @default(cuid())
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float    @default(0)
}
