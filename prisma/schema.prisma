
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                     @id @default(cuid())
  name                      String                     @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int                        @default(0)
  accountNumber             String?
  startingCapital           Float
  initialBalance            Float
  allowCrossProviderLoans   Boolean                    @default(false)
  nplThresholdDays          Int                        @default(60)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  termsAndConditions        TermsAndConditions[]
  ledgerAccounts            LedgerAccount[]
  journalEntries            JournalEntry[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String                       @default("Active") // Active, Disabled
  allowConcurrentLoans        Boolean                      @default(false)
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  serviceFee                  String? // JSON: { type: 'fixed' | 'percentage', value: number }
  dailyFee                    String? // JSON: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRules                String? // JSON: PenaltyRule[]
  dataProvisioningEnabled     Boolean?                     @default(false)
  eligibilityFilter           String? @db.NVarChar(Max)    // NEW: For storing eligibility allow-list
  loans                       Loan[]
  applications                LoanApplication[]
  loanAmountTiers             LoanAmountTier[]
  requiredDocuments           RequiredDocument[]
  scoringConfigurations       ScoringConfigurationProduct[]
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt

  @@unique([name, providerId])
}

model LoanAmountTier {
  id          String      @id @default(cuid())
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Borrower {
  id                String              @id
  status            String              @default("Active") // Active, NPL, Blocked
  loans             Loan[]
  applications      LoanApplication[]
  provisionedData   ProvisionedData[]
  agreements        BorrowerAgreement[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model LoanApplication {
  id                    String              @id @default(cuid())
  borrower              Borrower            @relation(fields: [borrowerId], references: [id])
  borrowerId            String
  product               LoanProduct         @relation(fields: [productId], references: [id])
  productId             String
  loanAmount            Float?
  status                String // e.g., PENDING_DOCUMENTS, PENDING_REVIEW, APPROVED, REJECTED, DISBURSED, NEEDS_REVISION
  rejectionReason       String?
  loan                  Loan?
  uploadedDocuments     UploadedDocument[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Loan {
  id                String            @id @default(cuid())
  borrower          Borrower          @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  product           LoanProduct       @relation(fields: [productId], references: [id])
  productId         String
  loanApplication   LoanApplication   @relation(fields: [loanApplicationId], references: [id])
  loanApplicationId String            @unique
  loanAmount        Float
  serviceFee        Float             @default(0)
  penaltyAmount     Float             @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String // Paid, Unpaid
  repaidAmount      Float?
  repaymentBehavior String? // ON_TIME, LATE, EARLY
  payments          Payment[]
  journalEntries    JournalEntry[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Payment {
  id                                String       @id @default(cuid())
  loan                              Loan         @relation(fields: [loanId], references: [id])
  loanId                            String
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment   Float?
  journalEntry                      JournalEntry?
  createdAt                         DateTime     @default(now())
  updatedAt                         DateTime     @updatedAt
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  status        String // Active, Inactive
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON string of permissions
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  action      String
  entity      String?
  entityId    String?
  details     String?  @db.NVarChar(Max)
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
}

model ScoringParameter {
  id         String @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ScoringConfigurationHistory {
    id              String @id @default(cuid())
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId      String
    parameters      String @db.NVarChar(Max) // JSON string of ScoringParameter[]
    savedAt         DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    product     LoanProduct @relation(fields: [productId], references: [id])
    productId   String
    assignedAt  DateTime @default(now())
    assignedBy  String // User ID

    @@id([configId, productId])
}

model DataProvisioningConfig {
  id        String    @id @default(cuid())
  provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name      String
  columns   String @db.NVarChar(Max) // JSON: { id, name, type, isIdentifier }[]
  uploads   DataProvisioningUpload[]
  provisionedData ProvisionedData[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DataProvisioningUpload {
  id              String  @id @default(cuid())
  config          DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId        String
  fileName        String
  rowCount        Int
  uploadedAt      DateTime @default(now())
  uploadedBy      String
  provisionedData ProvisionedData[]
}

model ProvisionedData {
  id         String      @id @default(cuid())
  borrowerId String
  borrower   Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  config     DataProvisioningConfig @relation(fields: [configId], references: [id])
  configId   String
  upload     DataProvisioningUpload? @relation(fields: [uploadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploadId   String?
  data       String @db.NVarChar(Max) // JSON object of the row data
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@unique([borrowerId, configId])
}

model RequiredDocument {
  id                String              @id @default(cuid())
  product             LoanProduct         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String
  name                String
  description         String?
  uploadedDocuments   UploadedDocument[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model UploadedDocument {
  id                String            @id @default(cuid())
  loanApplication   LoanApplication   @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)
  loanApplicationId String
  requiredDocument  RequiredDocument  @relation(fields: [requiredDocumentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  requiredDocumentId String
  fileName          String
  fileType          String
  fileContent       String            @db.NVarChar(Max) // For demo, stores base64. In prod, use URL.
  status            String            @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@unique([loanApplicationId, requiredDocumentId])
}


model TermsAndConditions {
    id              String @id @default(cuid())
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId      String
    content         String @db.NVarChar(Max)
    version         Int
    isActive        Boolean @default(false)
    publishedAt     DateTime @default(now())
    agreements      BorrowerAgreement[]
}

model BorrowerAgreement {
    id          String @id @default(cuid())
    borrower    Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    borrowerId  String
    terms       TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)
    termsId     String
    acceptedAt  DateTime @default(now())

    @@unique([borrowerId, termsId])
}

model Tax {
    id          String @id @default(cuid())
    name        String?
    rate        Float
    appliedTo   String @db.NVarChar(Max) // JSON array: ['interest', 'serviceFee', 'penalty']
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model LedgerAccount {
    id          String @id @default(cuid())
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId  String
    name        String
    type        String // Receivable, Received, Income
    category    String // Principal, Interest, Penalty, ServiceFee, Tax
    balance     Float @default(0.0)
    entries     LedgerEntry[]
}

model JournalEntry {
    id          String @id @default(cuid())
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    providerId  String
    loan        Loan? @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    loanId      String?
    payment     Payment? @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    paymentId   String? @unique
    date        DateTime
    description String
    entries     LedgerEntry[]
}

model LedgerEntry {
    id              String @id @default(cuid())
    journalEntry    JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
    journalEntryId  String
    ledgerAccount   LedgerAccount @relation(fields: [ledgerAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    ledgerAccountId String
    type            String // Debit or Credit
    amount          Float
}
