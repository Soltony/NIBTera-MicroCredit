// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Models for Core Loan Functionality
model LoanProvider {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String   @db.Text
  colorHex  String?
  displayOrder Int   @default(0)
  accountNumber String?
  initialBalance Float @default(0)
  allowMultipleProviderLoans Boolean @default(false)
  allowCrossProviderLoans Boolean @default(false)

  // Relationships
  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  ledgerAccounts            LedgerAccount[]
}


model LoanProduct {
  id                          String   @id @default(cuid())
  name                        String
  description                 String?
  icon                        String   @db.Text
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  serviceFee                  String?
  dailyFee                    String?
  penaltyRules                String?
  status                      String   @default("Active") // Active, Disabled
  allowMultipleLoans          Boolean  @default(false)
  serviceFeeEnabled           Boolean? @default(false)
  dailyFeeEnabled             Boolean? @default(false)
  penaltyRulesEnabled         Boolean? @default(false)
  dataProvisioningEnabled     Boolean? @default(false)
  
  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                  String
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?
  
  @@unique([name, providerId])
}


model Loan {
  id              String   @id @default(cuid())
  borrowerId      String
  productId       String
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // Paid, Unpaid
  repaidAmount    Float?

  // Relationships
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  payments         Payment[]
}

model Borrower {
  id String @id
  
  // Relationships
  loans           Loan[]
  provisionedData ProvisionedData[]
}


model ProvisionedData {
  borrowerId String
  configId   String
  data       String
  createdAt  DateTime @default(now())

  // Relationships
  borrower Borrower @relation(fields: [borrowerId], references: [id])
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  @@id([borrowerId, configId])
}


model DataProvisioningConfig {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  columns     String?

  // Relationships
  provider    LoanProvider                @relation(fields: [providerId], references: [id])
  products    LoanProduct[]
  uploads     DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id String @id @default(cuid())
    configId String
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String

    // Relationships
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String   @id @default(cuid())
  loanId      String
  amount      Float
  date        DateTime @default(now())
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
  id         String   @id @default(cuid())
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float

  // Relationships
  product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


// Models for Scoring Engine
model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  name       String
  weight     Int

  // Relationships
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules    ScoringRule[]
}

model ScoringRule {
  id          String @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}


model ScoringConfigurationHistory {
  id         String   @id @default(cuid())
  providerId String
  savedAt    DateTime @default(now())
  parameters String

  // Relationships
  provider          LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  appliedProducts   ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  configId   String
  productId  String
  assignedAt DateTime @default(now())
  assignedBy String

  // Relationships
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
  user      User                        @relation(fields: [assignedBy], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@id([configId, productId])
}

// Models for Access Control
model User {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  phoneNumber   String   @unique
  password      String
  status        String   @default("Active") // Active, Inactive
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  roleId        String
  role          Role     @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
  assignedScoringConfigs ScoringConfigurationProduct[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String

  // Relationships
  users User[]
}

// Models for Financial Ledgers
model LedgerAccount {
    id        String @id @default(cuid())
    providerId String
    name      String
    type      String // Receivable, Received
    category  String // Principal, Interest, Penalty
    balance   Float  @default(0.0)

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
