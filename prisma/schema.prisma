
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(uuid())
  fullName      String
  email         String   @unique
  phoneNumber   String   @unique
  password      String
  roleName      String
  role          Role     @relation(fields: [roleName], references: [name], onDelete: Cascade)
  status        String
  providerId    String?
  provider      LoanProvider? @relation(fields: [providerId], references: [id], onDelete: SetNull)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions Json
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LoanProvider {
  id        String   @id @default(uuid())
  name      String   @unique
  icon      String
  colorHex  String
  users     User[]
  products  LoanProduct[]
  scoringParameters ScoringParameter[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanProduct {
  id          String    @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  description String
  icon        String
  minLoan     Float
  maxLoan     Float
  serviceFee  String
  dailyFee    String
  penaltyFee  String
  status      String
  loanDetails LoanDetails[]
  scoringHistory ScoringConfigurationHistory[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LoanDetails {
  id               String   @id @default(uuid())
  providerId       String
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  productId        String
  product          LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  loanAmount       Float
  serviceFee       Float
  interestRate     Float
  disbursedDate    DateTime
  dueDate          DateTime
  penaltyAmount    Float
  repaymentStatus  String
  repaidAmount     Float?
  payments         Payment[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Payment {
  id                           String   @id @default(uuid())
  loanId                       String
  loan                         LoanDetails @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount                       Float
  date                         DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model ScoringParameter {
  id          String   @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  weight      Int
  rules       ScoringParameterRule[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScoringParameterRule {
  id          String   @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScoringConfigurationHistory {
  id              String   @id @default(uuid())
  providerId      String
  parameters      Json
  appliedProducts LoanProduct[]
  savedAt         DateTime @default(now())
}
