// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                  String   @id @default(cuid())
  name                String   @unique
  icon                String   @db.Text
  colorHex            String?
  displayOrder        Int
  accountNumber       String?
  initialBalance      Float
  allowMultipleProviderLoans Boolean @default(false)
  allowCrossProviderLoans Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                   String   @id @default(cuid())
  name                 String
  description          String?
  icon                 String   @db.Text
  minLoan              Float?
  maxLoan              Float?
  duration             Int?
  serviceFee           String?
  dailyFee             String?
  penaltyRules         String?
  status               String   @default("Active") // Active, Disabled
  allowMultipleLoans   Boolean  @default(false)
  serviceFeeEnabled    Boolean? @default(false)
  dailyFeeEnabled      Boolean? @default(false)
  penaltyRulesEnabled  Boolean? @default(false)
  dataProvisioningEnabled Boolean? @default(false)

  // Relationships
  provider                 LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId               String
  loans                    Loan[]
  loanAmountTiers          LoanAmountTier[]
  
  scoringConfigurationProducts ScoringConfigurationProduct[]
  
  dataProvisioningConfig   DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId String?

  @@unique([name, providerId])
}

model ProvisionedData {
  id        String   @id @default(cuid())
  data      String   @db.NVarChar(Max)
  createdAt DateTime @default(now())

  // Relationships
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([borrowerId, configId])
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model DataProvisioningConfig {
  id           String      @id @default(cuid())
  providerId   String
  name         String
  columns      String?     @db.NVarChar(Max)

  // Relationships
  provider            LoanProvider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  products            LoanProduct[]
  uploads             DataProvisioningUpload[]
  provisionedData     ProvisionedData[]
}

model DataProvisioningUpload {
  id          String   @id @default(cuid())
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime @default(now())

  // Relationships
  configId String
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model Loan {
  id              String   @id @default(cuid())
  loanAmount      Float
  serviceFee      Float
  repaidAmount    Float?   @default(0)
  penaltyAmount   Float    @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // Paid, Unpaid

  // Relationships
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id])
  borrowerId String
  borrower  Borrower    @relation(fields: [borrowerId], references: [id])
  payments  Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  amount                          Float
  date                            DateTime @default(now())
  outstandingBalanceBeforePayment Float?

  // Relationships
  loanId String
  loan   Loan   @relation(fields: [loanId], references: [id])
}

model LoanAmountTier {
  id         String @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float

  // Relationships
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
  id          String   @id @default(cuid())
  providerId  String
  savedAt     DateTime @default(now())
  parameters  String   @db.NVarChar(Max)

  // Relationships
  provider          LoanProvider                  @relation(fields: [providerId], references: [id])
  appliedProducts   ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id         String   @id @default(cuid())
  configId   String
  productId  String
  assignedBy String

  // Relationships
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User                        @relation(fields: [assignedBy], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([configId, productId])
}


model ScoringParameter {
  id       String @id @default(cuid())
  name     String
  weight   Int

  // Relationships
  providerId String
  provider   LoanProvider  @relation(fields: [providerId], references: [id])
  rules      ScoringRule[]

  @@unique([providerId, name])
}

model ScoringRule {
  id          String @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0.0)

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  phoneNumber   String   @unique
  password      String
  status        String   @default("Active") // Active, Inactive
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  roleId                     String
  role                       Role     @relation(fields: [roleId], references: [id])
  loanProviderId             String?
  loanProvider               LoanProvider? @relation(fields: [loanProviderId], references: [id])
  scoringConfigurationsAssigned ScoringConfigurationProduct[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String @db.NVarChar(Max)

  // Relationships
  users User[]
}
