
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  status        String // "Active", "Inactive"
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String
  users       User[]
}

model Loan {
  id                  String   @id @default(uuid())
  customerId          String
  customer            Customer @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  providerId          String
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  productId           String
  loanAmount          Float
  serviceFee          Float
  disbursedDate       DateTime @default(now())
  dueDate             DateTime
  repaymentStatus     String // "Paid", "Unpaid"
  repaidAmount        Float?
  penaltyAmount       Float    @default(0)
  payments            Payment[]
}

model Customer {
    id              String @id @default("1")
    age             Int
    gender          String
    monthlyIncome   Float
    educationLevel  String
    loanHistory     String // JSON string: { totalLoans: number, onTimeRepayments: number }
    loans           Loan[]
    provisionedData ProvisionedData[]
}

model LoanProvider {
  id                            String                        @id @default(uuid())
  name                          String                        @unique
  icon                          String                        @db.Text
  colorHex                      String?
  displayOrder                  Int                           @default(0)
  accountNumber                 String?
  products                      LoanProduct[]
  users                         User[]
  scoringParameters             ScoringParameter[]
  scoringConfigurationHistory   ScoringConfigurationHistory[]
  dataProvisioningConfigs       DataProvisioningConfig[]
  initialBalance                Float?
  ledgerAccounts                LedgerAccount[]
  allowMultipleProviderLoans    Boolean                       @default(false)
  allowCrossProviderLoans       Boolean                       @default(false)
  loans                         Loan[]
}


model LoanProduct {
  id                            String                        @id @default(uuid())
  providerId                    String
  name                          String
  description                   String?
  icon                          String                        @db.Text
  minLoan                       Float?
  maxLoan                       Float?
  duration                      Int?
  status                        String // "Active", "Disabled"
  allowMultipleLoans            Boolean                       @default(false)
  serviceFeeEnabled             Boolean?
  serviceFee                    String? // JSON string for FeeRule
  dailyFeeEnabled               Boolean?
  dailyFee                      String? // JSON string for DailyFeeRule
  penaltyRulesEnabled           Boolean?
  penaltyRules                  String? // JSON string for PenaltyRule[]
  dataProvisioningEnabled       Boolean?
  dataProvisioningConfigId      String?
  loans                         Loan[]
  loanAmountTiers               LoanAmountTier[]
  scoringHistories              ProductsOnScoringHistories[]

  provider                      LoanProvider                  @relation(fields: [providerId], references: [id])
  dataProvisioningConfig        DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id])

  @@unique([name, providerId])
}

model Payment {
  id                                String   @id @default(uuid())
  loanId                            String
  loan                              Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment   Float?
}


model ProductsOnScoringHistories {
  product          LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  scoringHistory   ScoringConfigurationHistory @relation(fields: [scoringHistoryId], references: [id], onDelete: Cascade)
  scoringHistoryId String
  assignedAt       DateTime                    @default(now())
  assignedBy       String // User ID

  @@id([productId, scoringHistoryId])
}


model ScoringConfigurationHistory {
  id         String                       @id @default(uuid())
  providerId String
  provider   LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  parameters String // JSON string of ScoringParameter[]
  savedAt    DateTime                     @default(now())
  appliedProducts ProductsOnScoringHistories[]
}

model ScoringParameter {
  id         String @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
  id        String      @id @default(uuid())
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromScore Int
  toScore   Int
  loanAmount Float
}

model ProvisionedData {
    id          String      @id @default(uuid())
    customerId  String
    customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data        String      @db.Text
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    
    @@unique([customerId, configId])
}

model DataProvisioningConfig {
    id        String @id @default(uuid())
    providerId String
    provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name      String
    columns   String @db.Text // JSON string: { name: string, type: 'string'|'number'|'date' }[]
    products  LoanProduct[]
    uploads   DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String      @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime    @default(now())
    uploadedBy  String
}

model LedgerAccount {
  id          String   @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)  
  name        String
  type        String   // 'Receivable', 'Received'
  category    String   // 'Principal', 'Interest', 'Penalty'
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
