
datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// ==============================================================
// App Models
// ==============================================================

model LoanProvider {
    id                          String   @id @default(cuid())
    name                        String   @unique
    icon                        String   @db.Text
    colorHex                    String?
    displayOrder                Int      @default(0)
    accountNumber               String?
    initialBalance              Float    @default(0)
    allowMultipleProviderLoans  Boolean  @default(false)
    allowCrossProviderLoans     Boolean  @default(false)

    // Relationships
    products                 LoanProduct[]
    users                    User[]
    scoringParameters        ScoringParameter[]
    dataProvisioningConfigs  DataProvisioningConfig[]
    scoringHistory           ScoringConfigurationHistory[]
    ledgerAccounts           LedgerAccount[]

    @@index([name])
}

model LoanProduct {
    id                          String   @id @default(cuid())
    name                        String
    description                 String   @db.Text
    icon                        String   @db.Text
    minLoan                     Float?
    maxLoan                     Float?
    duration                    Int?
    serviceFee                  String?
    dailyFee                    String?
    penaltyRules                String?
    status                      String   @default("Active") // Active, Disabled
    allowMultipleLoans          Boolean  @default(false)
    serviceFeeEnabled           Boolean  @default(false)
    dailyFeeEnabled             Boolean  @default(false)
    penaltyRulesEnabled         Boolean  @default(false)
    dataProvisioningEnabled     Boolean  @default(false)


    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    dataProvisioningConfigId    String?

    @@unique([name, providerId])
}


model Borrower {
    id              String            @id
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model ProvisionedData {
    id        String   @id @default(cuid())
    data      String   @db.Text
    createdAt DateTime @default(now())
    configId  String
    borrowerId String

    // Relationships
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    borrower Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)

    @@unique([borrowerId, configId])
}


model DataProvisioningConfig {
    id                      String                     @id @default(cuid())
    name                    String
    columns                 String?                    @db.Text
    providerId              String
    createdAt               DateTime                   @default(now())
    updatedAt               DateTime                   @updatedAt

    // Relationships
    provider                LoanProvider               @relation(fields: [providerId], references: [id])
    products                LoanProduct[]
    uploads                 DataProvisioningUpload[]
    provisionedData         ProvisionedData[]

    @@index([providerId])
}


model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String

    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@index([configId])
}



model Loan {
    id              String   @id @default(cuid())
    loanAmount      Float
    serviceFee      Float
    penaltyAmount   Float    @default(0)
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String // Paid, Unpaid
    repaidAmount    Float?

    // Foreign Keys
    productId String
    borrowerId  String

    // Relationships
    product  LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    borrower Borrower    @relation(fields: [borrowerId], references: [id])
    payments Payment[]

    @@index([repaymentStatus, dueDate])
    @@index([productId])
    @@index([borrowerId])
}

model Payment {
    id                              String   @id @default(cuid())
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float?

    // Foreign Keys
    loanId String

    // Relationships
    loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

    @@index([loanId])
}

model LoanAmountTier {
    id         String @id @default(cuid())
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Foreign Keys
    productId String

    // Relationships
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([productId])
}

model ScoringParameter {
    id         String @id @default(cuid())
    name       String
    weight     Int
    providerId String

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    rules    Rule[]

    @@index([providerId])
}

model Rule {
    id          String @id @default(cuid())
    field       String
    condition   String // "gt", "lt", "eq", "between"
    value       String
    score       Int
    parameterId String

    // Relationships
    parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

    @@index([parameterId])
}

model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    savedAt    DateTime @default(now())
    parameters String   @db.Text
    providerId String

    // Relationships
    provider          LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts   ScoringConfigurationProduct[]

    @@index([providerId])
}

model ScoringConfigurationProduct {
    id        String @id @default(cuid())
    configId  String
    productId String
    assignedBy String

    // Relationships
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)

    @@unique([configId, productId])
    @@index([productId])
}


// ==============================================================
// Admin & Auth Models
// ==============================================================

model User {
    id            String        @id @default(cuid())
    fullName      String
    email         String        @unique
    phoneNumber   String        @unique
    password      String
    status        String        @default("Active") // Active, Inactive
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    // Foreign Keys
    roleId        String
    loanProviderId String?

    // Relationships
    role          Role          @relation(fields: [roleId], references: [id])
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])

    @@index([roleId])
    @@index([loanProviderId])
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions String @db.Text

    // Relationships
    users User[]
}

model LedgerAccount {
    id         String   @id @default(cuid())
    providerId String
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float    @default(0)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
