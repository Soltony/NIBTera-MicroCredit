// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id        String @id @default(cuid())
  name      String @unique
  icon      String
  colorHex  String?
  displayOrder Int     @default(0)
  accountNumber String?
  initialBalance Float?

  // Relationships
  products                  LoanProduct[]
  users                       User[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  ledgerAccounts              LedgerAccount[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
}

model LoanProduct {
  id         String @id @default(cuid())
  name       String
  description String?
  icon       String
  minLoan    Float?
  maxLoan    Float?
  duration   Int?

  // Fee and Penalty fields stored as strings
  serviceFeeEnabled         Boolean?
  serviceFee                String?
  dailyFeeEnabled           Boolean?
  dailyFee                  String?
  penaltyRulesEnabled       Boolean?
  penaltyRules              String?
  dataProvisioningEnabled   Boolean?

  status             String      @default("Active") // "Active", "Disabled"
  allowMultipleLoans Boolean     @default(false)

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?

  loans              Loan[]
  loanAmountTiers    LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]

  @@unique([name, providerId])
}


model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  data       String // Storing as String instead of Json
  createdAt  DateTime @default(now())

  @@id([borrowerId, configId])
}


model Loan {
  id              String   @id @default(cuid())
  // Foreign Keys
  borrowerId      String
  providerId      String
  productId       String

  // Relationships
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  payments         Payment[]

  // Loan fields
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float    @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String   @default("Unpaid") // "Paid", "Unpaid"
  repaidAmount    Float?
}

model Payment {
  id                                String   @id @default(cuid())
  loanId                            String
  loan                              Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment Float?
}

model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String  @default("Active") // "Active" or "Inactive"
  createdAt     DateTime @default(now())
  
  // Relationships
  roleId        String
  role          Role    @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // Storing as String instead of Json
  
  // Relationships
  users       User[]
}


model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  weight     Int

  // Relationships
  rules      Rule[]
}

model Rule {
  id          String   @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
    id         String   @id @default(cuid())
    productId  String
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore  Int
    toScore    Int
    loanAmount Float
}


model ScoringConfigurationHistory {
    id          String   @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    savedAt     DateTime @default(now())
    parameters  String   // JSON stored as string

    // Relationships
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String                      @id @default(cuid())
    configId   String
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId  String
    product    LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedBy String
    assignedAt DateTime                    @default(now())

    @@unique([configId, productId])
}

model DataProvisioningConfig {
  id          String   @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  columns     String   // Storing as String instead of Json
  
  // Relationships
  provisionedData ProvisionedData[]
  uploads         DataProvisioningUpload[]
  products        LoanProduct[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}


model LedgerAccount {
    id         String       @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name       String
    type       String       // Receivable or Received
    category   String       // Principal, Interest, Penalty
    balance    Float        @default(0)

    @@unique([providerId, name])
}
