// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id        String @id @default(cuid())
  name      String @unique
  icon      String
  colorHex  String?
  displayOrder Int
  accountNumber String?
  initialBalance Float @default(0)

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  ledgerAccounts              LedgerAccount[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[] // Added inverse relation
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                        @default("Active")
  allowMultipleLoans          Boolean                       @default(false)

  // Fee and Penalty Structures (as strings)
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  dataProvisioningEnabled     Boolean?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationProduct[]
}

model Borrower {
  id        String   @id
  // This model can be extended with more borrower details if needed
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id         String   @id @default(cuid())
  borrower   Borrower @relation(fields: [borrowerId], references: [id])
  borrowerId String
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction)
  data       String
  createdAt  DateTime @default(now())

  @@unique([borrowerId, configId])
}


model Loan {
  id               String       @id @default(cuid())
  // Foreign keys
  borrowerId       String
  providerId       String
  productId        String
  
  // Relationships
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)

  // Loan details
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float        @default(0)
  repaidAmount     Float?       @default(0)
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String       @default("Unpaid") // e.g., Unpaid, Paid, Overdue

  payments         Payment[]
}

model Payment {
  id                                String   @id @default(cuid())
  loanId                            String
  loan                              Loan     @relation(fields: [loanId], references: [id])
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment   Float?
}


model ScoringParameter {
  id       String @id @default(cuid())
  name     String
  weight   Int
  // Relationships
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int
  // Relationships
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
}

model LoanAmountTier {
  id         String @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float
  // Relationships
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
}

model ScoringConfigurationHistory {
  id          String                        @id @default(cuid())
  savedAt     DateTime                      @default(now())
  parameters  String
  // Relationships
  provider    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String                      @id @default(cuid())
    configId   String
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId  String
    product    LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedAt DateTime                    @default(now())
    assignedBy String
    @@unique([configId, productId])
}

model LedgerAccount {
    id        String       @id @default(cuid())
    name      String
    type      String // "Receivable" or "Received"
    category  String // "Principal", "Interest", "Penalty"
    balance   Float        @default(0)
    // Relationships
    provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
}

model DataProvisioningConfig {
    id          String   @id @default(cuid())
    name        String
    columns     String // JSON string defining columns
    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId  String
    uploads     DataProvisioningUpload[]
    provisionedData ProvisionedData[]
    products    LoanProduct[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
    // Relationships
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

// User and Role Management
model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active")
  createdAt     DateTime      @default(now())
  // Relationships
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string
  // Relationships
  users       User[]
}
