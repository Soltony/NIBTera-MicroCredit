// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String                        @default("Building2")
  colorHex                    String?                       @default("#fdb913")
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)
  products                    LoanProduct[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  users                       User[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  loans                       Loan[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  name                        String
  description                 String                        @default("")
  icon                        String                        @default("PersonStanding")
  minLoan                     Float                         @default(0)
  maxLoan                     Float                         @default(0)
  duration                    Int                           @default(30)
  status                      String                        @default("Active")
  allowMultipleLoans          Boolean                       @default(false)
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model DataProvisioningConfig {
  id             String                @id @default(cuid())
  provider       LoanProvider          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId     String
  name           String
  columns        String?
  uploads        DataProvisioningUpload[]
  products       LoanProduct[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id           String                  @id @default(cuid())
  config       DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId     String
  fileName     String
  rowCount     Int
  uploadedAt   DateTime                @default(now())
  uploadedBy   String
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
}

model ProvisionedData {
  id         String                 @id @default(cuid())
  borrower   Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   String
  data       String?
  createdAt  DateTime               @default(now())

  @@unique([borrowerId, configId])
}

model Loan {
  id              String       @id @default(cuid())
  borrowerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId      String
  product         LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId       String
  loanAmount      Float
  serviceFee      Float        @default(0)
  disbursedDate   DateTime     @default(now())
  dueDate         DateTime
  repaymentStatus String       @default("Unpaid") // Unpaid, Paid
  repaidAmount    Float?
  penaltyAmount   Float        @default(0)
  payments        Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId                          String
  amount                          Float
  date                            DateTime @default(now())
  outstandingBalanceBeforePayment Float?
}

model LoanAmountTier {
  id         String      @id @default(cuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model ScoringConfigurationHistory {
  id              String                        @id @default(cuid())
  provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  parameters      String
  savedAt         DateTime                      @default(now())
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id         String                      @id @default(cuid())
  config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   String
  product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  assignedBy String
}

model ScoringParameter {
  id         String       @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  status        String
  createdAt     DateTime      @default(now())
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
  loanProviderId String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String
  users       User[]
}

model LedgerAccount {
  id         String       @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  type       String // Receivable, Received
  category   String // Principal, Interest, Penalty
  balance    Float        @default(0)
}
