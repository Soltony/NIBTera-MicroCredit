// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// ================================================= //
//                 Loan & Financial                  //
// ================================================= //

model LoanProvider {
  id               String       @id @default(cuid())
  name             String       @unique
  icon             String
  colorHex         String
  displayOrder     Int
  accountNumber    String?
  initialBalance   Float        @default(0)
  
  // Relations
  products         LoanProduct[]
  users            User[]
  scoringParameters ScoringParameter[]
  scoringHistory    ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  loans            Loan[]
  ledgerAccounts   LedgerAccount[]
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int                          @default(30)
  allowMultipleLoans          Boolean                      @default(false)
  serviceFee                  String
  dailyFee                    String
  penaltyRules                String
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  status                      String                       @default("Active")
  
  // Relations
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scoringConfigurations       ScoringConfigurationProduct[]
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  
  @@unique([name, providerId])
}


model Loan {
  id                String       @id @default(cuid())
  borrowerId        String
  provider          LoanProvider   @relation(fields: [providerId], references: [id])
  providerId        String
  product           LoanProduct    @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId         String
  loanAmount        Float
  serviceFee        Float
  repaidAmount      Float?
  penaltyAmount     Float
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String       @default("Unpaid") // e.g., Unpaid, Paid, Overdue
  
  // Relations
  borrower          Borrower @relation(fields: [borrowerId], references: [id])
  payments          Payment[]
}

model Payment {
    id              String @id @default(cuid())
    loan            Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
    loanId          String
    amount          Float
    date            DateTime @default(now())
    outstandingBalanceBeforePayment Float?
}

model LedgerAccount {
    id          String  @id @default(cuid())
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId  String
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float @default(0)
}

// ================================================= //
//                  Data & Scoring                   //
// ================================================= //

model DataProvisioningConfig {
  id          String        @id @default(cuid())
  provider    LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  columns     String
  
  // Relations
  products          LoanProduct[]
  provisionedData   ProvisionedData[]
  uploads           DataProvisioningUpload[]
}

model DataProvisioningUpload {
    id          String @id @default(cuid())
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}


model Borrower {
    id          String      @id
    loans       Loan[]
    provisionedData ProvisionedData[]
}


model ProvisionedData {
    id          String      @id @default(cuid())
    borrower    Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    borrowerId  String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    data        String
    createdAt   DateTime                @default(now())
    updatedAt   DateTime                @updatedAt
    
    @@unique([borrowerId, configId])
}


model ScoringParameter {
    id          String  @id @default(cuid())
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId  String
    name        String
    weight      Int

    // Relations
    rules       Rule[]
}

model Rule {
    id          String      @id @default(cuid())
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId String
    field       String
    condition   String
    value       String
    score       Int
}

model LoanAmountTier {
    id          String      @id @default(cuid())
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    fromScore   Int
    toScore     Int
    loanAmount  Float
}


model ScoringConfigurationHistory {
    id              String                        @id @default(cuid())
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId      String
    parameters      String                          // JSON string of ScoringParameter[] at the time of saving
    savedAt         DateTime                      @default(now())
    
    // Relations
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    product     LoanProduct                   @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    productId   String
    assignedAt  DateTime                      @default(now())
    assignedBy  String // User ID
}


// ================================================= //
//                   Users & Roles                   //
// ================================================= //

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String
  users       User[]
}