// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


//
// Models
//

// Authentication and Authorization
model User {
    id            String    @id @default(cuid())
    fullName      String
    email         String    @unique
    phoneNumber   String    @unique
    password      String
    status        String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relationships
    role          Role?      @relation(fields: [roleId], references: [id])
    roleId        String?
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
    loanProviderId String?
}

model Role {
    id          String   @id @default(cuid())
    name        String   @unique
    permissions String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relationships
    users       User[]
}


// Core Loan Models
model LoanProvider {
    id                        String      @id @default(cuid())
    name                      String      @unique
    icon                      String      @db.Text
    colorHex                  String
    displayOrder              Int         @default(0)
    accountNumber             String?
    initialBalance            Float       @default(0)
    allowCrossProviderLoans   Boolean     @default(false)
    createdAt                 DateTime    @default(now())
    updatedAt                 DateTime    @updatedAt

    // Relationships
    products                    LoanProduct[]
    users                       User[]
    scoringParameters           ScoringParameter[]
    dataProvisioningConfigs     DataProvisioningConfig[]
    ledgerAccounts              LedgerAccount[]
    scoringConfigurationHistory ScoringConfigurationHistory[]
}


model LoanProduct {
    id                         String    @id @default(cuid())
    name                       String
    description                String?   @db.Text
    icon                       String    @db.Text
    minLoan                    Float
    maxLoan                    Float
    duration                   Int
    status                     String
    allowMultipleLoans         Boolean
    serviceFee                 String?   @db.Text
    dailyFee                   String?   @db.Text
    penaltyRules               String?   @db.Text
    serviceFeeEnabled          Boolean?
    dailyFeeEnabled            Boolean?
    penaltyRulesEnabled        Boolean?
    dataProvisioningEnabled    Boolean?
    createdAt                  DateTime  @default(now())
    updatedAt                  DateTime  @updatedAt

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
    providerId                  String

    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
    dataProvisioningConfigId    String?

    @@unique([name, providerId])
}


model Loan {
    id               String     @id @default(cuid())
    loanAmount       Float
    serviceFee       Float
    penaltyAmount    Float      @default(0)
    repaidAmount     Float?
    disbursedDate    DateTime
    dueDate          DateTime
    repaymentStatus  String
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    
    // Relationships
    payments         Payment[]
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String
}

model Payment {
    id                                String   @id @default(cuid())
    amount                            Float
    date                              DateTime @default(now())
    outstandingBalanceBeforePayment   Float
    
    // Relationships
    loan                              Loan     @relation(fields: [loanId], references: [id])
    loanId                            String
}

model Borrower {
    id              String    @id
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    
    // Relationships
    loans           Loan[]
    provisionedData ProvisionedData[]
}

model ProvisionedData {
    id         String   @id @default(cuid())
    borrowerId String
    configId   String
    data       String   @db.Text
    createdAt  DateTime @default(now())

    // Relationships
    borrower Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction)

    @@unique([borrowerId, configId])
}


// Settings & Configuration
model DataProvisioningConfig {
    id          String    @id @default(cuid())
    providerId  String
    name        String
    columns     String    @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relationships
    provider        LoanProvider                @relation(fields: [providerId], references: [id], onDelete: Cascade)
    products        LoanProduct[]
    uploads         DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime @default(now())

    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model ScoringParameter {
    id         String @id @default(cuid())
    providerId String
    name       String
    weight     Int

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    rules    Rule[]
}

model Rule {
    id          String @id @default(cuid())
    parameterId String
    field       String
    condition   String
    value       String
    score       Int

    // Relationships
    parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
    id        String  @id @default(cuid())
    productId String
    fromScore Int
    toScore   Int
    loanAmount Float

    // Relationships
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model ScoringConfigurationHistory {
    id          String    @id @default(cuid())
    providerId  String
    parameters  String    @db.Text
    savedAt     DateTime  @default(now())

    // Relationships
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String    @id @default(cuid())
    configId    String
    productId   String
    assignedBy  String
    assignedAt  DateTime  @default(now())

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)

    @@unique([configId, productId])
}


model LedgerAccount {
    id        String   @id @default(cuid())
    providerId String
    name      String
    type      String   // Receivable or Received
    category  String   // Principal, Interest, Penalty
    balance   Float    @default(0)

    // Relationships
    provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
