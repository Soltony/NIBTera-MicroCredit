// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

// ==================================
//        AUTHENTICATION
// ==================================

model User {
    id            String       @id @default(cuid())
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    fullName      String
    email         String       @unique
    phoneNumber   String       @unique
    password      String
    status        String
    // Relationships
    role          Role         @relation(fields: [roleId], references: [id])
    roleId        String
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
    loanProviderId String?
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions String @db.Text
    // Relationships
    users       User[]
}

// ==================================
//        CORE LENDING MODELS
// ==================================

model LoanProvider {
    id                        String                      @id @default(cuid())
    name                      String                      @unique
    icon                      String                      @db.Text
    colorHex                  String?
    displayOrder              Int                         @default(0)
    accountNumber             String?
    initialBalance            Float?
    allowCrossProviderLoans   Boolean                     @default(false)
    // Relationships
    products                  LoanProduct[]
    users                     User[]
    dataProvisioningConfigs   DataProvisioningConfig[]
    scoringParameters         ScoringParameter[]
    scoringHistory            ScoringConfigurationHistory[]
    ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
    id                          String                       @id @default(cuid())
    name                        String
    description                 String?
    icon                        String                       @db.Text
    minLoan                     Float
    maxLoan                     Float
    duration                    Int
    status                      String
    allowMultipleLoans          Boolean                      @default(false)
    serviceFee                  String?                      @db.Text
    dailyFee                    String?                      @db.Text
    penaltyRules                String?                      @db.Text
    serviceFeeEnabled           Boolean?
    dailyFeeEnabled             Boolean?
    penaltyRulesEnabled         Boolean?
    dataProvisioningEnabled     Boolean?
    // Relationships
    provider                    LoanProvider                 @relation(fields: [providerId], references: [id])
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    dataProvisioningConfigId    String?

    @@unique([name, providerId])
}

model Loan {
    id              String      @id @default(cuid())
    loanAmount      Float
    serviceFee      Float
    penaltyAmount   Float       @default(0)
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String
    repaidAmount    Float?
    // Relationships
    payments        Payment[]
    product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId       String
    borrower        Borrower    @relation(fields: [borrowerId], references: [id])
    borrowerId      String
}

model Payment {
    id                              String   @id @default(cuid())
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float?
    // Relationships
    loan                            Loan     @relation(fields: [loanId], references: [id])
    loanId                          String
}

model Borrower {
    id              String            @id @default(cuid())
    // Relationships
    loans           Loan[]
    provisionedData ProvisionedData[]
}

// ==================================
//     DATA & SCORING MODELS
// ==================================

model ProvisionedData {
    id          String                   @id @default(cuid())
    data        String                   @db.Text
    createdAt   DateTime                 @default(now())
    // Relationships
    borrower    Borrower                 @relation(fields: [borrowerId], references: [id])
    borrowerId  String
    config      DataProvisioningConfig   @relation(fields: [configId], references: [id])
    configId    String

    @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
    id          String              @id @default(cuid())
    name        String
    columns     String              @db.Text
    // Relationships
    provider    LoanProvider        @relation(fields: [providerId], references: [id])
    providerId  String
    uploads     DataProvisioningUpload[]
    loanProducts LoanProduct[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String                 @id @default(cuid())
    fileName    String
    rowCount    Int
    uploadedAt  DateTime               @default(now())
    uploadedBy  String
    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String
}

model ScoringParameter {
    id         String       @id @default(cuid())
    name       String
    weight     Int
    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
    rules      Rule[]
}

model Rule {
    id          String           @id @default(cuid())
    field       String
    condition   String
    value       String
    score       Int
    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id])
    parameterId String
}

model LoanAmountTier {
    id         String      @id @default(cuid())
    fromScore  Int
    toScore    Int
    loanAmount Float
    // Relationships
    product    LoanProduct @relation(fields: [productId], references: [id])
    productId  String
}

model ScoringConfigurationHistory {
    id         String      @id @default(cuid())
    savedAt    DateTime    @default(now())
    parameters String      @db.Text
    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String      @id @default(cuid())
    assignedBy String
    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId   String
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId  String

    @@unique([configId, productId])
}

// ==================================
//     FINANCIAL LEDGER MODELS
// ==================================

model LedgerAccount {
    id         String       @id @default(cuid())
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float        @default(0)
    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
}
