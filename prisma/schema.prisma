// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)
  products                    LoanProduct[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  loans                       Loan[]
  users                       User[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
}

model LoanProduct {
  id                          String                        @id @default(uuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                  String
  name                        String
  description                 String
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  serviceFee                  String // JSON stored as string
  dailyFee                    String // JSON stored as string
  penaltyRules                String // JSON stored as string
  status                      String                        @default("Active")
  serviceFeeEnabled           Boolean                       @default(true)
  dailyFeeEnabled             Boolean                       @default(true)
  penaltyRulesEnabled         Boolean                       @default(true)
  dataProvisioningEnabled     Boolean                       @default(false)
  dataProvisioningConfigId    String?
  scoringHistory              ScoringConfigurationHistory[] @relation("ProductScoringHistory")
  loanAmountTiers             LoanAmountTier[]
  loans                       Loan[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt

  @@unique([name, providerId])
}

model LoanAmountTier {
  id          String      @id @default(uuid())
  product     LoanProduct @relation(fields: [productId], references: [id])
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model DataProvisioningConfig {
  id          String                    @id @default(uuid())
  provider    LoanProvider              @relation(fields: [providerId], references: [id])
  providerId  String
  name        String
  columns     String // JSON stored as string
  uploads     DataProvisioningUpload[]
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
}

model DataProvisioningUpload {
  id          String                  @id @default(uuid())
  config      DataProvisioningConfig  @relation(fields: [configId], references: [id])
  configId    String
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime                @default(now())
}

model ProvisionedData {
    id          String      @id @default(uuid())
    customerId  String
    configId    String
    data        String // JSON stored as string
    createdAt   DateTime    @default(now())
    
    @@unique([customerId, configId])
}


model ScoringParameter {
  id         String                 @id @default(uuid())
  provider   LoanProvider           @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      ScoringParameterRule[]
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

model ScoringParameterRule {
  id          String            @id @default(uuid())
  parameter   ScoringParameter  @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  parameters      String // JSON stored as string
  savedAt         DateTime      @default(now())
  appliedProducts LoanProduct[] @relation("ProductScoringHistory")
}

model Customer {
  id              String   @id @default(uuid())
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String // JSON stored as string
  loans           Loan[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Loan {
  id                String       @id @default(uuid())
  customerId        String
  providerId        String
  productId         String
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float        @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String
  repaidAmount      Float?
  customer          Customer     @relation(fields: [customerId], references: [id])
  provider          LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product           LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments          Payment[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
}

model User {
  id             String        @id @default(uuid())
  fullName       String
  email          String        @unique
  phoneNumber    String        @unique
  password       String
  status         String
  roleId         String
  loanProviderId String?
  role           Role          @relation(fields: [roleId], references: [id])
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON stored as string
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
