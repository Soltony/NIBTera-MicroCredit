// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ==============================================================
// Authentication and Authorization
// ==============================================================

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String // "Active", "Inactive"
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  role          Role          @relation(fields: [roleId], references: [id], onDelete: NoAction) // Can't delete a role if users are assigned to it
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
  loanProviderId String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String   // JSON string of permissions
  users       User[]
}

// ==============================================================
// Core Loan Provider and Product
// ==============================================================

model LoanProvider {
  id                         String                        @id @default(cuid())
  name                       String                        @unique
  icon                       String
  colorHex                   String?
  displayOrder               Int                           @default(0)
  accountNumber              String?
  initialBalance             Float                         @default(0)
  allowMultipleProviderLoans Boolean                       @default(false)
  allowCrossProviderLoans    Boolean                       @default(false)

  // Relationships (Owned by Provider - will be deleted if provider is deleted)
  products                   LoanProduct[]
  scoringParameters          ScoringParameter[]
  dataProvisioningConfigs    DataProvisioningConfig[]
  scoringHistory             ScoringConfigurationHistory[]
  ledgerAccounts             LedgerAccount[]
  users                      User[]
  loans                      Loan[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String // "Active", "Disabled"
  allowMultipleLoans          Boolean                       @default(false)

  // Fee and Rule Settings (Stored as JSON strings)
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  dataProvisioningEnabled     Boolean?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistoryProducts      ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}


// ==============================================================
// Borrower and Loan Data
// ==============================================================

model Borrower {
    id   String @id
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model ProvisionedData {
    id          String      @id @default(cuid())
    borrowerId  String
    borrower    Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction) // Prevent deleting config if data exists
    data        String
    createdAt   DateTime    @default(now())

    @@unique([borrowerId, configId])
}


model Loan {
  id               String      @id @default(cuid())
  borrowerId       String
  borrower         Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  providerId       String
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction) // NoAction to prevent cycles with Provider -> Product -> Loan
  productId        String
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction) // NoAction to prevent cycles
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float       @default(0)
  repaidAmount     Float?
  repaymentStatus  String // "Paid", "Unpaid"
  disbursedDate    DateTime
  dueDate          DateTime
  
  payments         Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount                          Float
  date                            DateTime @default(now())
  outstandingBalanceBeforePayment Float?
}


// ==============================================================
// Credit Scoring Engine
// ==============================================================

model ScoringParameter {
  id         String @id @default(cuid())
  name       String
  weight     Int

  // Relationships
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
}

model LoanAmountTier {
  id         String @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float

  // Relationships
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
}


model ScoringConfigurationHistory {
    id          String                        @id @default(cuid())
    savedAt     DateTime                      @default(now())
    parameters  String // JSON string
    
    // Relationships
    providerId  String
    provider    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String                      @id @default(cuid())
    configId   String
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId  String
    product    LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedBy String

    @@unique([configId, productId])
}

// ==============================================================
// Data Provisioning (For custom data uploads)
// ==============================================================

model DataProvisioningConfig {
  id          String   @id @default(cuid())
  name        String
  columns     String   // JSON string of column definitions

  // Relationships
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  products    LoanProduct[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String  @id @default(cuid())
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String

    // Relationships
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


// ==============================================================
// Accounting / Ledger
// ==============================================================

model LedgerAccount {
    id        String   @id @default(cuid())
    name      String
    type      String   // Receivable, Received
    category  String   // Principal, Interest, Penalty
    balance   Float    @default(0)

    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
