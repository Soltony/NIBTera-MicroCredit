// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  status        String
  roleId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation("LoanProviderToUser", fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON storing permission object
  users       User[]
}

model LoanProvider {
  id                          String    @id @default(uuid())
  name                        String    @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int
  accountNumber               String?
  allowCrossProviderLoans     Boolean   @default(true)
  allowMultipleProviderLoans  Boolean   @default(false)

  products                LoanProduct[]
  scoringParameters       ScoringParameter[]
  dataProvisioningConfigs DataProvisioningConfig[]
  loans                   Loan[]
  users                   User[]    @relation("LoanProviderToUser")
  scoringHistory          ScoringConfigurationHistory[]
}

model LoanProduct {
  id          String @id @default(uuid())
  providerId  String
  name        String
  description String
  icon        String
  minLoan     Float
  maxLoan     Float
  status      String

  serviceFeeEnabled   Boolean @default(true)
  serviceFee          String  // JSON: { type: 'percentage' | 'fixed', value: number }

  dailyFeeEnabled     Boolean @default(true)
  dailyFee            String  // JSON: { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }

  penaltyRulesEnabled Boolean @default(true)
  penaltyRules        String // JSON: [ { fromDay: number, toDay: number, type: 'fixed' | 'percentageOfPrincipal', value: number } ]

  provider                  LoanProvider     @relation(fields: [providerId], references: [id])
  loans                     Loan[]
  loanAmountTiers           LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationHistory[] @relation("AppliedProductsForScoringHistory")

  @@unique([name, providerId])
}

model LoanAmountTier {
  id         String @id @default(uuid())
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ScoringParameter {
    id         String      @id @default(uuid())
    providerId String
    name       String
    weight     Int
    rules      ScoringParameterRule[]
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

    @@index([providerId])
}

model ScoringParameterRule {
    id          String      @id @default(uuid())
    parameterId String
    field       String
    condition   String
    value       String
    score       Int
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

    @@index([parameterId])
}

model DataProvisioningConfig {
    id          String   @id @default(uuid())
    providerId  String
    name        String
    columns     String // JSON
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    uploads     DataProvisioningUpload[]
    provisionedData ProvisionedData[]

    @@index([providerId])
}

model DataProvisioningUpload {
    id           String   @id @default(uuid())
    configId     String
    fileName     String
    rowCount     Int
    uploadedAt   DateTime @default(now())
    uploadedBy   String
    config       DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@index([configId])
}

model ScoringConfigurationHistory {
    id          String      @id @default(uuid())
    providerId  String
    savedAt     DateTime    @default(now())
    parameters  String      // JSON of ScoringParameter[] at the time of save
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    appliedProducts LoanProduct[] @relation("AppliedProductsForScoringHistory")

    @@index([providerId])
}

model Customer {
    id             String @id @default(uuid())
    age            Int
    gender         String
    monthlyIncome  Float
    educationLevel String
    loanHistory    String // JSON: { totalLoans: number, onTimeRepayments: number }
    loans          Loan[]
    provisionedData ProvisionedData[]
}

model Loan {
    id              String      @id @default(uuid())
    customerId      String
    providerId      String
    productId       String
    loanAmount      Float
    serviceFee      Float
    penaltyAmount   Float
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String      // e.g., "Unpaid", "Paid", "Overdue"
    repaidAmount    Float?

    customer        Customer    @relation(fields: [customerId], references: [id])
    provider        LoanProvider @relation(fields: [providerId], references: [id])
    product         LoanProduct @relation(fields: [productId], references: [id])
    payments        Payment[]

    @@index([customerId])
    @@index([providerId])
    @@index([productId])
}

model Payment {
    id                  String      @id @default(uuid())
    loanId              String
    amount              Float
    date                DateTime
    outstandingBalanceBeforePayment Float
    loan                Loan        @relation(fields: [loanId], references: [id], onDelete: Cascade)
    
    @@index([loanId])
}

model ProvisionedData {
    id          String      @id @default(uuid())
    customerId  String
    configId    String
    data        String // JSON of the row data
    createdAt   DateTime    @default(now())

    customer    Customer @relation(fields: [customerId], references: [id])
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    
    @@unique([customerId, configId])
}
