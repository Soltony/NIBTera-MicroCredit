
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model LoanProvider {
  id              String   @id @default(cuid())
  name            String   @unique
  icon            String   @db.Text
  colorHex        String?
  displayOrder    Int
  accountNumber   String?
  initialBalance  Float    @default(0)
  allowMultipleProviderLoans Boolean @default(false)
  allowCrossProviderLoans Boolean @default(false)

  // Relationships
  products          LoanProduct[]
  users             User[]
  scoringParameters ScoringParameter[]
  dataProvisioningConfigs DataProvisioningConfig[]
  ledgerAccounts    LedgerAccount[]
  scoringHistory    ScoringConfigurationHistory[]
}


model LoanProduct {
  id               String   @id @default(cuid())
  name             String
  description      String?
  icon             String   @db.Text
  minLoan          Float?
  maxLoan          Float?
  duration         Int?
  serviceFee       String?
  dailyFee         String?
  penaltyRules     String?
  status           String   @default("Active") // Active, Disabled
  allowMultipleLoans Boolean @default(false)

  serviceFeeEnabled Boolean @default(false)
  dailyFeeEnabled   Boolean @default(false)
  penaltyRulesEnabled Boolean @default(false)
  dataProvisioningEnabled Boolean @default(false)
  dataProvisioningConfigId String?

  // Relationships
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId  String
  loans       Loan[]
  loanAmountTiers LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  dataProvisioningConfig DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([name, providerId])
}


model Loan {
    id              String @id @default(cuid())
    borrowerId      String
    loanAmount      Float
    serviceFee      Float
    penaltyAmount   Float  @default(0)
    repaidAmount    Float? @default(0)
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String // Paid, Unpaid
    
    // Relationships
    product     LoanProduct @relation(fields: [productId], references: [id])
    productId   String
    borrower    Borrower    @relation(fields: [borrowerId], references: [id])
    payments    Payment[]
}

model Payment {
    id            String   @id @default(cuid())
    amount        Float
    date          DateTime @default(now())
    outstandingBalanceBeforePayment Float?

    // Relationships
    loan   Loan   @relation(fields: [loanId], references: [id])
    loanId String
}


model Borrower {
    id String @id
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model ProvisionedData {
    id String @id @default(cuid())
    data String @db.NVarChar(MAX)
    createdAt DateTime @default(now())

    // Relationships
    borrowerId String
    borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
    id String @id @default(cuid())
    name String
    columns String? @db.NVarChar(MAX)
    
    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    provisionedData ProvisionedData[]
    products   LoanProduct[]
    uploads    DataProvisioningUpload[]
}

model DataProvisioningUpload {
    id String @id @default(cuid())
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String
    
    // Relationships
    configId String
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model ScoringParameter {
  id      String  @id @default(cuid())
  name    String
  weight  Int
  
  // Relationships
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  rules      Rule[]
}

model Rule {
  id          String  @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int
  
  // Relationships
  parameter    ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId  String
}


model ScoringConfigurationHistory {
  id         String   @id @default(cuid())
  savedAt    DateTime @default(now())
  parameters String @db.NVarChar(MAX)
  
  // Relationships
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId String
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id          String   @id @default(cuid())
  assignedAt  DateTime @default(now())
  assignedBy  String

  // Relationships
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
  configId  String
  product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId String
  user      User                        @relation(fields: [assignedBy], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([configId, productId])
}

model LoanAmountTier {
    id String @id @default(cuid())
    fromScore Int
    toScore   Int
    loanAmount Float

    // Relationships
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
}

model LedgerAccount {
    id String @id @default(cuid())
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0)

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
}

// AUTH MODELS
model User {
  id           String    @id @default(cuid())
  fullName     String
  email        String    @unique
  phoneNumber  String?   @unique
  password     String
  status       String    @default("Active") // Active, Inactive
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relationships
  role         Role      @relation(fields: [roleId], references: [id])
  roleId       String
  loanProvider LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  scoringConfigurationsAssigned ScoringConfigurationProduct[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String @db.NVarChar(MAX)
  
  // Relationships
  users User[]
}
