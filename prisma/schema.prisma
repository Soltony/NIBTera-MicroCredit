// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String                        @default("Building2")
  colorHex                  String                        @default("#fdb913")
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowCrossProviderLoans   Boolean                       @default(false)
  products                  LoanProduct[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String?
  icon                        String                        @default("PersonStanding")
  minLoan                     Float                         @default(0)
  maxLoan                     Float                         @default(1000)
  duration                    Int                           @default(30)
  serviceFee                  String? // JSON FeeRule
  dailyFee                    String? // JSON DailyFeeRule
  penaltyRules                String? // JSON PenaltyRule[]
  status                      String                        @default("Active") // Active, Disabled
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id              String      @id @default(uuid())
  borrowerId      String
  borrower        Borrower    @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id])
  loanAmount      Float
  serviceFee      Float       @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // Paid, Unpaid
  repaidAmount    Float?
  penaltyAmount   Float       @default(0)
  payments        Payment[]
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}


model ProvisionedData {
  id        String                 @id @default(uuid())
  borrowerId String
  borrower  Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId  String
  config    DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete Cascade)
  data      String
  createdAt DateTime               @default(now())

  @@unique([borrowerId, configId])
}


model Payment {
  id                              String   @id @default(uuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON string
  users       User[]
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String // Active, Inactive
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model ScoringParameter {
  id         String @id @default(uuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
    id              String @id @default(uuid())
    providerId      String
    provider        LoanProvider @relation(fields: [providerId], references: [id])
    savedAt         DateTime @default(now())
    parameters      String // JSON representation of ScoringParameter[]
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String   @id @default(uuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedAt DateTime                   @default(now())
    assignedBy String

    @@unique([configId, productId])
}

model LoanAmountTier {
    id         String      @id @default(uuid())
    productId  String
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore  Int
    toScore    Int
    loanAmount Float
}

model DataProvisioningConfig {
    id          String              @id @default(uuid())
    providerId  String
    provider    LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    columns     String // JSON DataColumn[]
    products    LoanProduct[]
    uploads     DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model LedgerAccount {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    type        String // Receivable, Received, Income
    category    String // Principal, Interest, ServiceFee, Penalty
    balance     Float  @default(0)
}
