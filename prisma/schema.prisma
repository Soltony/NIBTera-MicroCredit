// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String                        @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(true)
  products                    LoanProduct[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
  users                       User[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(uuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                  String
  name                        String
  description                 String
  icon                        String                        @db.NVarChar(MAX)
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int                           @default(30)
  status                      String                        @default("Active") // Active, Disabled
  serviceFee                  String? // JSON string: { type: 'percentage' | 'fixed', value: number }
  dailyFee                    String? // JSON string: { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRules                String? // JSON string: [{ fromDay: number, toDay: number, type: 'fixed' | 'percentageOfPrincipal', value: number }]
  serviceFeeEnabled           Boolean                       @default(false)
  dailyFeeEnabled             Boolean                       @default(false)
  penaltyRulesEnabled         Boolean                       @default(false)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  appliedScoringConfigurations ScoringConfigurationHistory[] @relation("AppliedScoringConfigs")

  @@unique([name, providerId])
}

model Loan {
  id                  String   @id @default(uuid())
  loanAmount          Float
  serviceFee          Float
  penaltyAmount       Float
  repaidAmount        Float?
  disbursedDate       DateTime @default(now())
  dueDate             DateTime
  repaymentStatus     String
  customer            Customer @relation(fields: [customerId], references: [id])
  customerId          String
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  providerId          String
  product             LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  productId           String
  payments            Payment[]
}

model Customer {
  id              String            @id
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id        String                  @id @default(uuid())
  customerId String
  customer   Customer                @relation(fields: [customerId], references: [id])
  configId  String
  config    DataProvisioningConfig @relation(fields: [configId], references: [id])
  data      String // JSON blob
  createdAt DateTime                @default(now())

  @@unique([customerId, configId])
}

model DataProvisioningConfig {
  id          String            @id @default(uuid())
  provider    LoanProvider      @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId  String
  name        String
  columns     String // JSON blob
  uploads     DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id          String                  @id @default(uuid())
  config      DataProvisioningConfig @relation(fields: [configId], references: [id])
  configId    String
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime                @default(now())
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  savedAt         DateTime      @default(now())
  parameters      String // JSON blob of ScoringParameter[]
  appliedProducts LoanProduct[] @relation("AppliedScoringConfigs")
}

model ScoringParameter {
  id         String @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String // e.g., '>', '<', '==', 'between'
  value       String // Can be a single value or a range like '18-25'
  score       Int
}

model LoanAmountTier {
  id         String      @id @default(uuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime @default(now())
  outstandingBalanceBeforePayment Float?
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON blob
  users       User[]
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}

model LedgerAccount {
  id          String   @id @default(uuid())
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  type        String // Receivable, Received
  category    String // Principal, Interest, Penalty
  balance     Float    @default(0)
}
