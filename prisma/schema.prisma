// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active") // e.g., Active, Inactive, Suspended
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String @db.NVarChar(MAX) // JSON string for permissions
  users       User[] @relation
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String                        @db.NVarChar(MAX)
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                       @default(false)
  products                  LoanProduct[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  users                     User[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                        String           @id @default(uuid())
  provider                  LoanProvider     @relation(fields: [providerId], references: [id])
  providerId                String
  name                      String
  description               String
  icon                      String           @db.NVarChar(MAX)
  minLoan                   Float?
  maxLoan                   Float?
  duration                  Int              @default(30)
  status                    String           @default("Active") // Active, Disabled
  serviceFee                String?          @db.NVarChar(MAX) // JSON for { type: 'percentage' | 'fixed', value: number }
  serviceFeeEnabled         Boolean          @default(true)
  dailyFee                  String?          @db.NVarChar(MAX) // JSON for { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
  dailyFeeEnabled           Boolean          @default(true)
  penaltyRules              String?          @db.NVarChar(MAX) // JSON for array of penalty rules
  penaltyRulesEnabled       Boolean          @default(true)
  loans                     Loan[]
  loanAmountTiers           LoanAmountTier[]
  scoringConfigurations     ScoringConfigurationHistory[] @relation("ProductScoringConfigurations")

  @@unique([name, providerId])
}

model Loan {
  id                String   @id @default(uuid())
  customerId        String
  provider          LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId        String
  product           LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId         String
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float    @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String   @default("Unpaid") // Unpaid, Paid
  repaidAmount      Float?
  payments          Payment[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

model Customer {
  id              String            @id @default(cuid())
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String            @db.NVarChar(MAX) // JSON string
  provisionedData ProvisionedData[]
}

model ScoringParameter {
  id         String  @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
    id          String      @id @default(uuid())
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    fromScore   Int
    toScore     Int
    loanAmount  Float
}

model ScoringConfigurationHistory {
    id              String @id @default(uuid())
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId      String
    savedAt         DateTime @default(now())
    parameters      String @db.NVarChar(MAX) // JSON string of ScoringParameter[] at the time of saving
    appliedProducts LoanProduct[] @relation("ProductScoringConfigurations")
}

model DataProvisioningConfig {
  id              String            @id @default(uuid())
  provider        LoanProvider      @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  name            String
  columns         String            @db.NVarChar(MAX)
  provisionedData ProvisionedData[]
  uploads         DataProvisioningUpload[]

  @@unique([providerId, name])
}

model DataProvisioningUpload {
    id          String @id @default(uuid())
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}

model ProvisionedData {
    id String @id @default(uuid())
    customer Customer @relation(fields: [customerId], references: [id])
    customerId String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String
    data        String @db.NVarChar(MAX) // JSON of the uploaded data for this customer
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@unique([customerId, configId])
}

model LedgerAccount {
    id String @id @default(uuid())
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId  String
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float @default(0)
}
