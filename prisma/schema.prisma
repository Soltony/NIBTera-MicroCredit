// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ==============================================================
// 1. Core Models for Loan Providers and Products
// ==============================================================

model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)

  // Relations
  products                    LoanProduct[]
  users                       User[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  name                        String
  description                 String
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String                       @default("Active") // Active, Disabled
  allowMultipleLoans          Boolean                      @default(false)

  // JSON fields stored as strings
  serviceFee                  String // JSON for FeeRule
  dailyFee                    String // JSON for DailyFeeRule
  penaltyRules                String // JSON for PenaltyRule[]

  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  
  // Relations
  loanAmountTiers             LoanAmountTier[]
  loans                       Loan[]
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model LoanAmountTier {
  id          String      @id @default(cuid())
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float
}


model Loan {
  id                String      @id @default(cuid())
  borrower          Borrower    @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  provider          LoanProvider   @relation(fields: [providerId], references: [id])
  providerId        String
  product           LoanProduct    @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId         String
  
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String // e.g., 'Paid', 'Unpaid'
  repaidAmount      Float?

  // Relations
  payments          Payment[]
}


model Payment {
  id                                String   @id @default(cuid())
  loan                              Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId                            String
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment   Float?
}


// ==============================================================
// 2. Data Provisioning
// ==============================================================

model DataProvisioningConfig {
  id         String        @id @default(cuid())
  provider   LoanProvider  @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  columns    String // Json

  // Relations
  products   LoanProduct[]
  uploads     DataProvisioningUpload[]
}

model DataProvisioningUpload {
  id         String                  @id @default(cuid())
  config     DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   String
  fileName   String
  rowCount   Int
  uploadedBy String
  uploadedAt DateTime                @default(now())
}


model ProvisionedData {
  id          String        @id @default(cuid())
  borrower    Borrower      @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId  String
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  data        String // Json
  createdAt   DateTime                @default(now())

  @@unique([borrowerId, configId])
}


// ==============================================================
// 3. User and Access Control
// ==============================================================

model Borrower {
  id               String            @id
  loans            Loan[]
  provisionedData  ProvisionedData[]
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON string of Permissions object
  
  // Relations
  users       User[]
}


// ==============================================================
// 4. Scoring Engine
// ==============================================================

model ScoringParameter {
  id         String       @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String // e.g., 'age', 'monthly_income'
  weight     Int // Weight out of 100 for this parameter
  
  // Relations
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String // The specific field from provisioned data to check
  condition   String // e.g., '>', '<', '==', 'between'
  value       String // The value to compare against (e.g., '30', '1000-2000', 'employed')
  score       Int
}

model ScoringConfigurationHistory {
    id              String                        @id @default(cuid())
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId      String
    parameters      String                          // JSON string of ScoringParameter[] at the time of saving
    savedAt         DateTime                      @default(now())

    // Relations
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    product     LoanProduct                   @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    productId   String
    assignedBy  String // User ID
    assignedAt  DateTime                      @default(now())
}


// ==============================================================
// 5. Accounting & Ledger
// ==============================================================

model LedgerAccount {
    id         String       @id @default(cuid())
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name       String
    type       String       // 'Receivable', 'Received'
    category   String       // 'Principal', 'Interest', 'Penalty'
    balance    Float        @default(0)
}
