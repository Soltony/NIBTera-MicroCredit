
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model LoanProvider {
  id                        String                     @id @default(cuid())
  name                      String                     @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int                        @default(0)
  accountNumber             String?
  startingCapital           Float                      @default(0)
  initialBalance            Float                      @default(0)
  allowCrossProviderLoans   Boolean                    @default(false)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
  journalEntries            JournalEntry[]
  termsAndConditions        TermsAndConditions[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int                          // in days
  status                      String                       @default("Active") // Active, Disabled
  allowConcurrentLoans        Boolean                      @default(false)
  serviceFee                  String?                      // JSON: { type: 'fixed' | 'percentage', value: number }
  dailyFee                    String?                      // JSON: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRules                String?                      // JSON: [{ fromDay: number, toDay: number | null, type: 'fixed' | 'percentageOfPrincipal' | 'percentageOfCompound', value: number, frequency: 'daily' | 'one-time' }]
  serviceFeeEnabled           Boolean?                     @default(false)
  dailyFeeEnabled             Boolean?                     @default(false)
  penaltyRulesEnabled         Boolean?                     @default(false)
  dataProvisioningEnabled     Boolean?                     @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id])
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt

  @@unique([name, providerId])
}

model LoanAmountTier {
    id          String      @id @default(cuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Loan {
  id              String      @id @default(cuid())
  borrowerId      String
  borrower        Borrower    @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id])
  loanAmount      Float
  serviceFee      Float       @default(0)
  penaltyAmount   Float
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String      // Paid, Unpaid
  repaidAmount    Float?
  payments        Payment[]
  journalEntries  JournalEntry[]
  repaymentBehavior RepaymentBehavior?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum RepaymentBehavior {
    ON_TIME
    LATE
    EARLY
}

model Borrower {
    id              String          @id
    status          String?         // NPL, etc.
    loans           Loan[]
    provisionedData ProvisionedData[]
    agreements      BorrowerAgreement[]
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}

model BorrowerAgreement {
    id           String             @id @default(cuid())
    borrowerId   String
    borrower     Borrower           @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    termsId      String
    terms        TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)
    acceptedAt   DateTime           @default(now())

    @@unique([borrowerId, termsId])
}


model TermsAndConditions {
    id          String      @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    content     String
    version     Int
    isActive    Boolean     @default(true)
    publishedAt DateTime
    agreements  BorrowerAgreement[]

    @@unique([providerId, version])
}


model Payment {
  id                    String   @id @default(cuid())
  loanId                String
  loan                  Loan     @relation(fields: [loanId], references: [id])
  amount                Float
  date                  DateTime
  outstandingBalanceBeforePayment Float
  journalEntryId        String?  @unique
  journalEntry          JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model User {
  id              String        @id @default(cuid())
  fullName        String
  email           String        @unique
  phoneNumber     String        @unique
  password        String
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  status          String        // Active, Inactive
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String   // JSON string
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model for storing provisioned data from external sources
model ProvisionedData {
    id          String      @id @default(cuid())
    borrowerId  String
    borrower    Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data        String // JSON string containing the row data
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    
    @@unique([borrowerId, configId])
}

// Model for defining the schema of provisioned data
model DataProvisioningConfig {
    id                      String                  @id @default(cuid())
    providerId              String
    provider                LoanProvider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name                    String
    columns                 String                  // JSON string of columns: { name: string, type: 'string'|'number'|'date', isIdentifier: boolean }[]
    products                LoanProduct[]
    provisionedData         ProvisionedData[]
    uploads                 DataProvisioningUpload[]
    createdAt               DateTime                @default(now())
    updatedAt               DateTime                @updatedAt
}

model DataProvisioningUpload {
    id          String                  @id @default(cuid())
    configId    String
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime                @default(now())
}


// Credit Scoring Engine Models
model ScoringParameter {
    id          String   @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String   // e.g., 'Age', 'Monthly Income', 'Time with Employer'
    weight      Int      // The maximum score this parameter can contribute
    rules       Rule[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Rule {
    id              String           @id @default(cuid())
    parameterId     String
    parameter       ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field           String           // The specific field from provisioned data to check
    condition       String           // e.g., '>', '<', '==', 'between'
    value           String           // The value to compare against (e.g., '30', '5000-10000', 'Employed')
    score           Int              // The score to award if the condition is met
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}


model ScoringConfigurationHistory {
    id              String                      @id @default(cuid())
    providerId      String
    provider        LoanProvider                @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters      String                      // JSON string of all ScoringParameter and Rule objects at the time of save
    savedAt         DateTime                    @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

// Join table between ScoringConfigurationHistory and LoanProduct
model ScoringConfigurationProduct {
    configId    String
    config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId   String
    product     LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedAt  DateTime                    @default(now())
    assignedBy  String                      // User ID of the admin who applied it
    
    @@id([configId, productId])
}

// Accounting Models
model LedgerAccount {
    id              String          @id @default(cuid())
    providerId      String
    provider        LoanProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name            String          // e.g., 'Principal Receivable', 'Interest Income'
    type            String          // 'Receivable', 'Received', 'Income'
    category        String          // 'Principal', 'Interest', 'Penalty', 'ServiceFee'
    balance         Float           @default(0)
    entries         LedgerEntry[]
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    
    @@unique([providerId, name])
}

model JournalEntry {
    id              String          @id @default(cuid())
    providerId      String
    provider        LoanProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
    loanId          String
    loan            Loan            @relation(fields: [loanId], references: [id])
    date            DateTime
    description     String
    entries         LedgerEntry[]
    Payment         Payment?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}

model LedgerEntry {
    id              String          @id @default(cuid())
    journalEntryId  String
    journalEntry    JournalEntry    @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
    ledgerAccountId String
    ledgerAccount   LedgerAccount   @relation(fields: [ledgerAccountId], references: [id])
    type            String          // 'Debit' or 'Credit'
    amount          Float
    createdAt       DateTime        @default(now())
}
