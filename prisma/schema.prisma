
datasource db {
  provider     = "sqlserver"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id            String        @id @default(cuid())
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    fullName      String
    email         String        @unique
    phoneNumber   String        @unique
    password      String
    status        String        @default("Active")

    // Relationships
    role          Role          @relation(fields: [roleId], references: [id])
    roleId        String
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    loanProviderId String?
}

model Role {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String   @unique
    permissions String

    // Relationships
    users       User[]
}

model LoanProvider {
    id                        String      @id @default(cuid())
    createdAt                 DateTime    @default(now())
    updatedAt                 DateTime    @updatedAt
    name                      String      @unique
    icon                      String      @db.Text
    colorHex                  String?
    displayOrder              Int         @default(0)
    accountNumber             String?
    initialBalance            Float       @default(0)
    allowCrossProviderLoans   Boolean     @default(false)
    
    // Relationships
    users                     User[]
    products                  LoanProduct[]
    dataProvisioningConfigs   DataProvisioningConfig[]
    scoringParameters         ScoringParameter[]
    ledgerAccounts            LedgerAccount[]
    scoringHistory            ScoringConfigurationHistory[]
}

model LoanProduct {
    id                          String      @id @default(cuid())
    createdAt                   DateTime    @default(now())
    updatedAt                   DateTime    @updatedAt
    name                        String
    description                 String?
    icon                        String      @db.Text
    minLoan                     Float?
    maxLoan                     Float?
    duration                    Int?
    status                      String      @default("Active")
    allowMultipleLoans          Boolean     @default(false)

    // Fee and Penalty Configuration
    serviceFeeEnabled           Boolean     @default(false)
    serviceFee                  String?      // JSON for { type, value }
    dailyFeeEnabled             Boolean     @default(false)
    dailyFee                    String?      // JSON for { type, value, calculationBase }
    penaltyRulesEnabled         Boolean     @default(false)
    penaltyRules                String?      // JSON for array of { fromDay, toDay, type, value }
    
    // Data Provisioning Configuration
    dataProvisioningEnabled     Boolean     @default(false)

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    dataProvisioningConfigId    String?

    @@unique([name, providerId])
}


model Loan {
    id               String   @id @default(cuid())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    loanAmount       Float
    serviceFee       Float    @default(0)
    penaltyAmount    Float    @default(0)
    disbursedDate    DateTime @default(now())
    dueDate          DateTime
    repaymentStatus  String   // e.g., "Paid", "Unpaid"
    repaidAmount     Float?

    // Relationships
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String
    payments         Payment[]
}

model Payment {
    id                                String   @id @default(cuid())
    createdAt                         DateTime @default(now())
    updatedAt                         DateTime @updatedAt
    date                              DateTime
    amount                            Float
    outstandingBalanceBeforePayment   Float?

    // Relationships
    loan                              Loan     @relation(fields: [loanId], references: [id])
    loanId                            String
}

// Stores the actual customer data uploaded for scoring.
model Borrower {
    id              String    @id
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    // Relationships
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model ProvisionedData {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    data        String   @db.Text
    
    // Relationships
    borrower    Borrower @relation(fields: [borrowerId], references: [id])
    borrowerId  String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String
    
    @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
    id          String @id @default(cuid())
    name        String
    columns     String @db.Text  // JSON array of column definitions

    // Relationships
    provider             LoanProvider @relation(fields: [providerId], references: [id])
    providerId           String
    provisionedData      ProvisionedData[]
    uploads              DataProvisioningUpload[]
    loanProducts         LoanProduct[]
}

model DataProvisioningUpload {
    id          String @id @default(cuid())
    uploadedAt  DateTime @default(now())
    fileName    String
    rowCount    Int
    uploadedBy  String

    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String
}


model ScoringParameter {
    id        String @id @default(cuid())
    name      String
    weight    Int

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
    rules      ScoringRule[]
}

model ScoringRule {
    id          String @id @default(cuid())
    field       String
    condition   String
    value       String
    score       Int

    // Relationships
    parameter    ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId  String
}


model LoanAmountTier {
    id         String   @id @default(cuid())
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Relationships
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
}

model ScoringConfigurationHistory {
  id         String   @id @default(cuid())
  savedAt    DateTime @default(now())
  parameters String   @db.Text // JSON string of the ScoringParameter[] at the time of saving

  // Relationships
  provider           LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId         String
  appliedProducts    ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String  @id @default(cuid())
    assignedAt  DateTime @default(now())
    assignedBy  String

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
    configId   String
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId  String

    @@unique([configId, productId])
}

model LedgerAccount {
    id        String   @id @default(cuid())
    name      String
    type      String   // Receivable, Received
    category  String   // Principal, Interest, Penalty
    balance   Float    @default(0)

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
}
