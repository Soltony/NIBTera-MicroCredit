generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  ledgerAccounts              LedgerAccount[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                        @default("Active") // Active, Disabled
  allowMultipleLoans          Boolean                       @default(false)
  
  // Fee and Penalty details stored as JSON strings
  serviceFeeEnabled           Boolean?
  serviceFee                  String? // JSON: { type: 'fixed' | 'percentage', value: number }
  dailyFeeEnabled             Boolean?
  dailyFee                    String? // JSON: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean?
  penaltyRules                String? // JSON: [ { fromDay: number, toDay: number | null, type: 'fixed' | 'percentageOfPrincipal' | 'percentageOfCompound', value: number } ]
  
  dataProvisioningEnabled     Boolean?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id                 String      @id @default(cuid())
  borrowerId         String
  providerId         String
  productId          String
  loanAmount         Float
  serviceFee         Float
  repaidAmount       Float?
  penaltyAmount      Float       @default(0)
  disbursedDate      DateTime
  dueDate            DateTime
  repaymentStatus    String      // Unpaid, Paid

  // Timestamps
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relationships
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  payments         Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id])
}


model ScoringParameter {
  id        String   @id @default(cuid())
  providerId String
  name      String
  weight    Int

  // Relationships
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  rules    Rule[]
}

model Rule {
  id          String   @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
  id          String   @id @default(cuid())
  providerId  String
  savedAt     DateTime @default(now())
  parameters  String // JSON string of ScoringParameter[] at the time of saving

  // Relationships
  provider         LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  appliedProducts  ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    configId    String
    productId   String
    assignedBy  String
    assignedAt  DateTime                      @default(now())
    
    // Relationships
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: NoAction)
    
    @@unique([configId, productId])
}

model LoanAmountTier {
    id         String      @id @default(cuid())
    productId  String
    fromScore  Int
    toScore    Int
    loanAmount Float

    // Relationships
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model LedgerAccount {
    id         String   @id @default(cuid())
    providerId String
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float    @default(0)

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
}


model DataProvisioningConfig {
  id         String   @id @default(cuid())
  providerId String
  name       String
  columns    String // JSON string representing the columns configuration

  // Relationships
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  provisionedData ProvisionedData[]
  uploads         DataProvisioningUpload[]
  products        LoanProduct[]
}

model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id         String      @id @default(cuid())
  borrowerId String
  configId   String
  data       String // JSON string
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relationships
  borrower Borrower                 @relation(fields: [borrowerId], references: [id])
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction)

  @@unique([borrowerId, configId])
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
    
    // Relationships
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction)
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active") // e.g., Active, Inactive, Suspended
  roleId        String
  loanProviderId String?

  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  role          Role          @relation(fields: [roleId], references: [id], onDelete: NoAction)
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON string for permissions

  // Relationships
  users       User[]
}
