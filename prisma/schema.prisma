// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


// MODELS

model LoanProvider {
  id                          String @id @default(uuid())
  name                        String @unique
  icon                        String @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int
  accountNumber               String?
  allowMultipleProviderLoans  Boolean @default(false)
  allowCrossProviderLoans     Boolean @default(false)

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
}


model User {
  id            String    @id @default(uuid())
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  status        String    @default("Active") // e.g., Active, Inactive
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  roleId          String
  role            Role         @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String @db.NVarChar(MAX) // JSON string for permissions

  // Relationships
  users User[]
}


model LoanProduct {
  id                          String @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  description                 String
  icon                        String @db.NVarChar(MAX)
  minLoan                     Float
  maxLoan                     Float
  status                      String                         @default("Active") // Active, Disabled
  serviceFee                  String?                        @db.NVarChar(MAX)
  dailyFee                    String?                        @db.NVarChar(MAX)
  penaltyRules                String?                        @db.NVarChar(MAX)
  serviceFeeEnabled           Boolean                        @default(true)
  dailyFeeEnabled             Boolean                        @default(true)
  penaltyRulesEnabled         Boolean                        @default(true)
  dataProvisioningEnabled     Boolean                        @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?        @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistory              ScoringConfigurationHistory[]  @relation("ProductScoringHistory")

  @@unique([name, providerId])
}


model LoanAmountTier {
  id         String @id @default(uuid())
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float

  // Relationships
  product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model Customer {
  id             String @id @default(uuid())
  age            Int
  gender         String
  monthlyIncome  Float
  educationLevel String
  loanHistory    String @db.NVarChar(MAX) // JSON string

  // Relationships
  loans            Loan[]
  provisionedData  ProvisionedData[]
}

model Loan {
  id                          String @id @default(uuid())
  customerId                  String
  providerId                  String
  productId                   String
  loanAmount                  Float
  serviceFee                  Float
  penaltyAmount               Float    @default(0)
  disbursedDate               DateTime
  dueDate                     DateTime
  repaymentStatus             String // e.g., Unpaid, Paid, Overdue
  repaidAmount                Float?

  // Relationships
  customer            Customer     @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  payments            Payment[]
}

model Payment {
  id                                String @id @default(uuid())
  loanId                            String
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment   Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
}


model ScoringParameter {
  id         String @id @default(uuid())
  providerId String
  name       String
  weight     Int

  // Relationships
  provider LoanProvider         @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules    ScoringParameterRule[]
}

model ScoringParameterRule {
  id          String @id @default(uuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}


model ScoringConfigurationHistory {
  id          String @id @default(uuid())
  providerId  String
  parameters  String @db.NVarChar(MAX)
  savedAt     DateTime @default(now())

  // Relationships
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appliedProducts LoanProduct[] @relation("ProductScoringHistory")
}


model DataProvisioningConfig {
  id         String @id @default(uuid())
  providerId String
  name       String
  columns    String @db.NVarChar(MAX) // JSON string for column definitions

  // Relationships
  provider    LoanProvider           @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products    LoanProduct[]
  uploads     DataProvisioningUpload[]
  dataEntries ProvisionedData[]
}


model DataProvisioningUpload {
  id         String @id @default(uuid())
  configId   String
  fileName   String
  rowCount   Int
  uploadedAt DateTime @default(now())
  uploadedBy String

  // Relationships
  config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model ProvisionedData {
  id         String   @id @default(uuid())
  customerId String
  configId   String
  data       String   @db.NVarChar(MAX) // JSON string of the row data
  createdAt  DateTime @default(now())

  // Relationships
  customer Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([customerId, configId])
}
