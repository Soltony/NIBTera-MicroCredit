// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String
  users       User[]
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanProviderId String?
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String                        @db.NVarChar(Max)
  colorHex                  String?
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float
  allowCrossProviderLoans   Boolean                       @default(false)
  allowMultipleProviderLoans Boolean                      @default(false)
  products                  LoanProduct[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]
  users                     User[]
  scoringParameters         ScoringParameter[]
}

model LoanProduct {
  id                        String                        @id @default(uuid())
  provider                  LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                String
  name                      String
  description               String?
  icon                      String                        @db.NVarChar(Max)
  minLoan                   Float?
  maxLoan                   Float?
  status                    String
  serviceFee                String?
  serviceFeeEnabled         Boolean                       @default(true)
  dailyFee                  String?
  dailyFeeEnabled           Boolean                       @default(true)
  penaltyRules              String?
  penaltyRulesEnabled       Boolean                       @default(true)
  loans                     Loan[]
  scoringHistory            ScoringConfigurationHistory[]
  loanAmountTiers           LoanAmountTier[]

  @@unique([name, providerId])
}

model Loan {
  id                  String       @id @default(uuid())
  customer            Customer     @relation(fields: [customerId], references: [id])
  customerId          String
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId          String
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId           String
  loanAmount          Float
  serviceFee          Float
  repaidAmount        Float?
  penaltyAmount       Float        @default(0)
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String
  payments            Payment[]
}

model Customer {
  id             String @id
  age            Int
  gender         String
  monthlyIncome  Float
  educationLevel String
  loanHistory    String // JSON stored as string
  loans          Loan[]
  provisionedData ProvisionedData[]
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float
}


model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  savedAt         DateTime      @default(now())
  parameters      String
  appliedProducts LoanProduct[]
}

model ScoringParameter {
  id         String  @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
  id        String      @id @default(uuid())
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  fromScore Int
  toScore   Int
  loanAmount Float
}

model DataProvisioningConfig {
  id              String       @id @default(uuid())
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  name            String
  columns         String // JSON array of { name: string, type: 'string' | 'number' | 'date' }
  uploads         DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id String @id @default(uuid())
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId String
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String
}

model ProvisionedData {
    id String @id @default(uuid())
    customer Customer @relation(fields: [customerId], references: [id])
    customerId String
    config DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId String
    data String // JSON object of the row data
    createdAt DateTime @default(now())
    
    @@unique([customerId, configId])
}

model LedgerAccount {
    id String @id @default(uuid())
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name String
    type String // Receivable or Received
    category String // Principal, Interest, Penalty
    balance Float @default(0.0)
}
