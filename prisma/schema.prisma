// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// --------------------------------------
// AUTH & USERS
// --------------------------------------

model User {
  id            String       @id @default(cuid())
  fullName      String
  email         String       @unique
  phoneNumber   String       @unique
  password      String
  status        String
  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string for permissions
  users       User[]
}

// --------------------------------------
// LOAN MANAGEMENT
// --------------------------------------

model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String                        @db.Text
  colorHex                    String
  displayOrder                Int
  accountNumber               String?
  startingCapital             Float
  initialBalance              Float
  allowCrossProviderLoans     Boolean                       @default(false)
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  users                       User[]
  ledgerAccounts              LedgerAccount[]
  journalEntries              JournalEntry[]
  termsAndConditions          TermsAndConditions[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  productType                 String                        @default("PERSONAL") // PERSONAL, SME
  description                 String
  icon                        String                        @db.Text
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String // Active, Disabled
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFee                  String // JSON FeeRule
  serviceFeeEnabled           Boolean?
  dailyFee                    String // JSON FeeRule
  dailyFeeEnabled             Boolean?
  penaltyRules                String // JSON array of PenaltyRule
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfiguration        ScoringConfigurationProduct[]
  requiredDocuments           RequiredDocument[]
  loanApplications            LoanApplication[]

  @@unique([name, providerId])
}

model Loan {
  id                          String          @id @default(cuid())
  borrowerId                  String
  borrower                    Borrower        @relation(fields: [borrowerId], references: [id])
  productId                   String
  product                     LoanProduct     @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanApplicationId           String          @unique
  loanApplication             LoanApplication @relation(fields: [loanApplicationId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  loanAmount                  Float
  serviceFee                  Float
  penaltyAmount               Float
  disbursedDate               DateTime
  dueDate                     DateTime
  repaymentStatus             String // Paid, Unpaid
  repaymentBehavior           String?     // ON_TIME, LATE, EARLY
  repaidAmount                Float?
  payments                    Payment[]
  journalEntries              JournalEntry[]
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
}

model Payment {
  id                                String   @id @default(cuid())
  loanId                            String
  loan                              Loan     @relation(fields: [loanId], references: [id])
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment Float?
  journalEntryId                    String?  @unique
  journalEntry                      JournalEntry? @relation(fields: [journalEntryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model Borrower {
  id                String             @id
  status            String             @default("Active") // Active, NPL
  provisionedData   ProvisionedData[]
  loans             Loan[]
  agreements        BorrowerAgreement[]
  loanApplications  LoanApplication[]
}

// --------------------------------------
// LOAN APPLICATION & DOCUMENTS
// --------------------------------------

model RequiredDocument {
    id                 String      @id @default(cuid())
    productId          String
    product            LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    name               String
    description        String?
    uploadedDocuments  UploadedDocument[]
}

model LoanApplication {
    id                  String      @id @default(cuid())
    borrowerId          String
    borrower            Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    productId           String
    product             LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    loanAmount          Float?
    status              String      @default("PENDING_DOCUMENTS") // PENDING_DOCUMENTS, PENDING_REVIEW, REJECTED, APPROVED, DISBURSED
    uploadedDocuments   UploadedDocument[]
    loan                Loan?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}

model UploadedDocument {
    id                  String      @id @default(cuid())
    loanApplicationId   String
    loanApplication     LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)
    requiredDocumentId  String
    requiredDocument    RequiredDocument @relation(fields: [requiredDocumentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    fileName            String
    fileType            String
    fileContent         String      @db.Text
    status              String      @default("PENDING") // PENDING, APPROVED, REJECTED
    reviewComment       String?     @db.Text
    uploadedAt          DateTime    @default(now())
    
    @@unique([loanApplicationId, requiredDocumentId])
}


// --------------------------------------
// DATA & SCORING
// --------------------------------------

model DataProvisioningConfig {
  id                 String                @id @default(cuid())
  providerId         String
  provider           LoanProvider          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name               String
  columns            String // JSON array of DataColumn
  products           LoanProduct[]
  uploads            DataProvisioningUpload[]
  provisionedData    ProvisionedData[]
}

model DataProvisioningUpload {
    id          String      @id @default(cuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime    @default(now())
}

model ProvisionedData {
    id          String      @id @default(cuid())
    borrowerId  String
    borrower    Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data        String // JSON string of the uploaded data for this borrower
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@unique([borrowerId, configId])
}


model ScoringParameter {
  id         String       @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
    id          String @id @default(cuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}


model ScoringConfigurationHistory {
    id              String @id @default(cuid())
    providerId      String
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters      String // JSON string of ScoringParameter[]
    savedAt         DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String                      @id @default(cuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String

    @@unique([configId, productId])
}

// --------------------------------------
// ACCOUNTING
// --------------------------------------

model LedgerAccount {
    id          String @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    type        String // Receivable, Received, Income
    category    String // Principal, Interest, ServiceFee, Penalty
    balance     Float @default(0)
    entries     LedgerEntry[]

    @@unique([providerId, name])
}

model JournalEntry {
    id          String @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    loanId      String?
    loan        Loan? @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    date        DateTime
    description String
    entries     LedgerEntry[]
    payment     Payment?
}

model LedgerEntry {
    id              String @id @default(cuid())
    journalEntryId  String
    journalEntry    JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
    ledgerAccountId String
    ledgerAccount   LedgerAccount @relation(fields: [ledgerAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    type            String // Debit or Credit
    amount          Float
}

// --------------------------------------
// AGREEMENTS
// --------------------------------------

model TermsAndConditions {
  id           String              @id @default(cuid())
  providerId   String
  provider     LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  content      String              @db.Text
  version      Int
  isActive     Boolean             @default(false)
  publishedAt  DateTime
  agreements   BorrowerAgreement[]

  @@unique([providerId, version])
}

model BorrowerAgreement {
  id          String             @id @default(cuid())
  borrowerId  String
  borrower    Borrower           @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  termsId     String
  terms       TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)
  acceptedAt  DateTime           @default(now())

  @@unique([borrowerId, termsId])
}

// --------------------------------------
// AUDITING
// --------------------------------------

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  action      String
  entity      String?
  entityId    String?
  details     String?  @db.Text
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())

  @@index([actorId])
  @@index([action])
  @@index([entity, entityId])
}
