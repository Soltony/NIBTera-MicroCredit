// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String                        @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  allowCrossProviderLoans     Boolean                       @default(false)
  allowMultipleProviderLoans  Boolean                       @default(false)
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  users                       User[]
}

model LoanProduct {
  id                          String                        @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id])
  name                        String
  description                 String?
  icon                        String                        @db.NVarChar(MAX)
  minLoan                     Float
  maxLoan                     Float
  status                      String                        @default("Active") // Active, Disabled
  serviceFee                  String? // JSON string for FeeRule
  dailyFee                    String? // JSON string for DailyFeeRule
  penaltyRules                String? // JSON string for PenaltyRule[]
  serviceFeeEnabled           Boolean                       @default(true)
  dailyFeeEnabled             Boolean                       @default(true)
  penaltyRulesEnabled         Boolean                       @default(true)
  dataProvisioningEnabled     Boolean                       @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id])
  loans                       Loan[]
  scoringHistory              ScoringConfigurationHistory[] @relation("ProductScoringHistory")
  loanAmountTiers             LoanAmountTier[]

  @@unique([name, providerId])
}

model LoanAmountTier {
  id        String      @id @default(uuid())
  productId String
  fromScore Int
  toScore   Int
  loanAmount Float
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON string for Permissions object
  users       User[]
}

model User {
  id             String        @id @default(uuid())
  fullName       String
  email          String        @unique
  phoneNumber    String        @unique
  password       String
  status         String        @default("Active") // Active, Inactive
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  roleId         String
  role           Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model ScoringParameter {
  id         String                 @id @default(uuid())
  providerId String
  name       String
  weight     Int
  rules      ScoringParameterRule[]
  provider   LoanProvider           @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model ScoringParameterRule {
  id          String           @id @default(uuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  providerId      String
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  parameters      String        @db.NVarChar(MAX) // JSON string for ScoringParameter[]
  savedAt         DateTime      @default(now())
  appliedProducts LoanProduct[] @relation("ProductScoringHistory")
}

model DataProvisioningConfig {
  id         String        @id @default(uuid())
  providerId String
  name       String
  columns    String // JSON string for DataColumn[]
  provider   LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  products   LoanProduct[]
  uploads    DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id           String                 @id @default(uuid())
    configId     String
    config       DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName     String
    rowCount     Int
    uploadedAt   DateTime               @default(now())
    uploadedBy   String
}

model ProvisionedData {
    id          String                 @id @default(uuid())
    customerId  String
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    data        String // JSON string of the uploaded data row
    createdAt   DateTime               @default(now())

    @@unique([customerId, configId])
}


// New Models
model Customer {
  id             String   @id
  age            Int
  gender         String
  monthlyIncome  Float
  educationLevel String
  loanHistory    String // JSON string
  loans          Loan[]
}

model Loan {
  id                  String      @id @default(uuid())
  customerId          String
  providerId          String
  productId           String
  loanAmount          Float
  serviceFee          Float
  penaltyAmount       Float       @default(0)
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String // Unpaid, Paid
  repaidAmount        Float?

  customer            Customer     @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  payments            Payment[]
}

model Payment {
  id                              String   @id @default(uuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float
  loan                            Loan     @relation(fields: [loanId], references: [id])
}
