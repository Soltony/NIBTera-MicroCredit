
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String?                       @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)

  // Relations
  products                    LoanProduct[]
  users                       User[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]      @relation(onDelete: NoAction, onUpdate: NoAction)
  loans                       Loan[]
  ledgerAccounts              LedgerAccount[]

  @@index([name])
}

model LoanProduct {
  id                          String   @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  description                 String?
  icon                        String?                        @db.NVarChar(MAX)
  minLoan                     Float?
  maxLoan                     Float?
  status                      String                         @default("Active") // Active, Disabled
  
  serviceFeeEnabled           Boolean                        @default(true)
  serviceFee                  String?                        // JSON: { type: 'percentage'/'fixed', value: number }
  dailyFeeEnabled             Boolean                        @default(true)
  dailyFee                    String?                        // JSON: { type: 'percentage'/'fixed', value: number, calculationBase: 'principal'/'compound' }
  penaltyRulesEnabled         Boolean                        @default(true)
  penaltyRules                String?                        // JSON array of PenaltyRule
  
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?        @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Relations
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistory              ScoringConfigurationHistory[]  @relation("ProductScoringHistory")

  @@unique([name, providerId])
  @@index([providerId])
}


model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON storing permissions
  users       User[]
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active") // Active, Inactive
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])

  @@index([email])
  @@index([loanProviderId])
}


model Loan {
  id                  String   @id @default(uuid())
  customerId          String
  providerId          String
  productId           String
  loanAmount          Float
  serviceFee          Float
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String   // Unpaid, Paid
  repaidAmount        Float?
  penaltyAmount       Float    @default(0)

  // Relations
  customer            Customer     @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  payments            Payment[]

  @@index([customerId])
  @@index([providerId])
  @@index([productId])
}

model Payment {
  id                                String   @id @default(uuid())
  loanId                            String
  loan                              Loan     @relation(fields: [loanId], references: [id])
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment   Float?

  @@index([loanId])
}


model Customer {
  id              String   @id @default(uuid())
  age             Int
  monthlyIncome   Float
  gender          String
  educationLevel  String
  loanHistory     String // JSON: { totalLoans: number, onTimeRepayments: number }

  // Relations
  loans           Loan[]
  provisionedData ProvisionedData[]
}

// SCORING ENGINE MODELS
model ScoringParameter {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    name        String // e.g., 'age', 'monthlyIncome'
    weight      Int    // The weight of this parameter in the total score

    rules       ScoringParameterRule[]

    @@index([providerId])
}

model ScoringParameterRule {
    id          String   @id @default(uuid())
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    
    field       String   // The specific field from customer data to evaluate
    condition   String   // e.g., '>', '<=', '=='
    value       String   // The value to compare against
    score       Int      // The score to award if the condition is met

    @@index([parameterId])
}

model ScoringConfigurationHistory {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    savedAt     DateTime @default(now())
    parameters  String @db.NVarChar(MAX) // JSON snapshot of the ScoringParameter[] at the time of saving
    
    // Many-to-many relationship with LoanProduct
    appliedProducts LoanProduct[] @relation("ProductScoringHistory")

    @@index([providerId])
}

model LoanAmountTier {
    id          String @id @default(uuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float

    @@index([productId])
}

// DATA PROVISIONING MODELS
model DataProvisioningConfig {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    name        String // e.g., "Bank Statement", "Credit Report"
    columns     String // JSON: [{ name: string, type: 'string'/'number'/'date', isIdentifier: boolean, dbField: 'ID' }]

    // Relations
    products    LoanProduct[]
    uploads     DataProvisioningUpload[]

    @@index([providerId])
}

model DataProvisioningUpload {
    id          String @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime @default(now())

    @@index([configId])
}

model ProvisionedData {
    id          String @id @default(uuid())
    customerId  String
    customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    configId    String // To know which config this data belongs to
    createdAt   DateTime @default(now())
    data        String // The actual JSON data for the row

    @@unique([customerId, configId]) // A customer can only have one set of data per config type
    @@index([customerId])
}

// LEDGER MODELS
model LedgerAccount {
    id          String   @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String   // e.g., "Principal Receivable", "Interest Received"
    type        String   // "Receivable", "Received"
    category    String   // "Principal", "Interest", "Penalty"
    balance     Float    @default(0)

    @@index([providerId])
}
