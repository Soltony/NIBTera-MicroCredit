// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Loan {
  id                  String       @id @default(uuid())
  customerId          String
  providerId          String
  productId           String
  loanAmount          Float
  serviceFee          Float
  penaltyAmount       Float        @default(0)
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String // "Paid" or "Unpaid"
  repaidAmount        Float?
  payments            Payment[]
  customer            Customer     @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: Cascade)
}

model Payment {
  id                              String   @id @default(uuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  loan                            Loan     @relation(fields: [loanId], references: [id])
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String
  displayOrder                Int
  accountNumber               String?
  initialBalance              Float?
  allowCrossProviderLoans     Boolean                       @default(false)
  allowMultipleProviderLoans  Boolean                       @default(false)
  products                    LoanProduct[]
  users                       User[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringParameters           ScoringParameter[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  ledgerAccounts              LedgerAccount[]
  loans                       Loan[]
}

model LoanProduct {
  id                            String                        @id @default(uuid())
  providerId                    String
  name                          String
  description                   String?
  icon                          String                        @db.NVarChar(Max)
  minLoan                       Float?
  maxLoan                       Float?
  duration                      Int?
  status                        String
  serviceFeeEnabled             Boolean?
  serviceFee                    String?
  dailyFeeEnabled               Boolean?
  dailyFee                      String?
  penaltyRulesEnabled           Boolean?
  penaltyRules                  String?
  dataProvisioningEnabled       Boolean?
  dataProvisioningConfigId      String?
  loans                         Loan[]
  loanAmountTiers               LoanAmountTier[]
  scoringHistories              ProductsOnScoringHistories[]
  provider                      LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  dataProvisioningConfig        DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)

  @@unique([name, providerId])
}

model LoanAmountTier {
  id         String      @id @default(uuid())
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ScoringParameter {
  id         String @id @default(uuid())
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
  provider   LoanProvider @relation(fields: [providerId], references: [id])
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model ProductsOnScoringHistories {
  product          LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  scoringHistory   ScoringConfigurationHistory @relation(fields: [scoringHistoryId], references: [id], onDelete: Cascade)
  scoringHistoryId String
  assignedAt       DateTime                    @default(now())

  @@id([productId, scoringHistoryId])
}

model ScoringConfigurationHistory {
  id              String                       @id @default(uuid())
  providerId      String
  parameters      String // JSON string of ScoringParameter[]
  savedAt         DateTime                     @default(now())
  appliedProducts ProductsOnScoringHistories[]
  provider        LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model DataProvisioningConfig {
  id         String            @id @default(uuid())
  providerId String
  name       String
  columns    String // JSON string of DataColumn[]
  provider   LoanProvider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  products   LoanProduct[]
  uploads    DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id         String                 @id @default(uuid())
  configId   String
  fileName   String
  rowCount   Int
  uploadedAt DateTime               @default(now())
  uploadedBy String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model ProvisionedData {
  id         String                 @id @default(uuid())
  customerId String
  configId   String
  data       String // JSON string of the row data
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  customer   Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([customerId, configId])
}

model Customer {
  id              String            @id
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String
  loans           Loan[]
  provisionedData ProvisionedData[]
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  roleId        String
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String
  users       User[]
}

model LedgerAccount {
    id         String   @id @default(uuid())
    providerId String
    name       String
    type       String // Receivable or Received
    category   String // Principal, Interest, or Penalty
    balance    Float    @default(0.0)
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

    @@unique([providerId, name])
}
