// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


// MODELS

model User {
    id            String       @id @default(cuid())
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    fullName      String
    email         String       @unique
    phoneNumber   String       @unique
    password      String
    status        String       // "Active", "Inactive"
    roleId        String
    loanProviderId String?

    // Relationships
    role          Role         @relation(fields: [roleId], references: [id])
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Role {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String   @unique
    permissions String   @db.Text // Stored as a JSON string

    // Relationships
    users User[]
}


model LoanProvider {
    id                        String      @id @default(cuid())
    createdAt                 DateTime    @default(now())
    updatedAt                 DateTime    @updatedAt
    name                      String      @unique
    icon                      String      @db.Text
    colorHex                  String
    displayOrder              Int
    accountNumber             String?
    initialBalance            Float
    allowCrossProviderLoans   Boolean     @default(false)

    // Relationships
    users                     User[]
    products                  LoanProduct[]
    dataProvisioningConfigs   DataProvisioningConfig[]
    scoringParameters         ScoringParameter[]
    scoringHistory            ScoringConfigurationHistory[]
    ledgerAccounts            LedgerAccount[]
    loans                     Loan[]
}

model LoanProduct {
    id                          String      @id @default(cuid())
    createdAt                   DateTime    @default(now())
    updatedAt                   DateTime    @updatedAt
    name                        String
    description                 String      @db.Text
    icon                        String      @db.Text
    minLoan                     Float
    maxLoan                     Float
    duration                    Int
    status                      String      // "Active", "Disabled"
    allowMultipleLoans          Boolean
    serviceFee                  String      @db.Text // JSON for { type: 'percentage' | 'fixed', value: number }
    dailyFee                    String      @db.Text // JSON for { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
    penaltyRules                String      @db.Text // JSON for array of { fromDay: number, toDay: number | null, type: 'fixed' | 'percentageOfPrincipal' | 'percentageOfCompound', value: number }
    serviceFeeEnabled           Boolean
    dailyFeeEnabled             Boolean
    penaltyRulesEnabled         Boolean
    dataProvisioningEnabled     Boolean
    providerId                  String
    dataProvisioningConfigId    String?

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([name, providerId])
}


model Loan {
    id               String   @id @default(cuid())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    loanAmount       Float
    serviceFee       Float
    penaltyAmount    Float
    disbursedDate    DateTime
    dueDate          DateTime
    repaymentStatus  String // "Paid", "Unpaid"
    repaidAmount     Float?

    // Foreign Keys
    providerId       String
    productId        String
    borrowerId       String

    // Relationships
    payments         Payment[]
    provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
}

model Payment {
    id                               String   @id @default(cuid())
    createdAt                        DateTime @default(now())
    updatedAt                        DateTime @updatedAt
    amount                           Float
    date                             DateTime
    outstandingBalanceBeforePayment  Float?

    // Foreign Keys
    loanId                           String
    
    // Relationships
    loan                             Loan     @relation(fields: [loanId], references: [id])
}

model Borrower {
    id            String            @id
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    
    // Relationships
    loans         Loan[]
    provisionedData ProvisionedData[]
}

model ProvisionedData {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    data        String   @db.Text // JSON string of the uploaded row data
    
    // Foreign Keys
    borrowerId  String
    configId    String
    
    // Relationships
    borrower    Borrower                @relation(fields: [borrowerId], references: [id])
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id])

    @@unique([borrowerId, configId])
}


model DataProvisioningConfig {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    name        String
    columns     String      @db.Text // JSON string for column definitions
    
    // Foreign Keys
    providerId  String
    
    // Relationships
    provider      LoanProvider              @relation(fields: [providerId], references: [id])
    uploads       DataProvisioningUpload[]
    products      LoanProduct[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime @default(now())
    
    // Foreign Keys
    configId    String
    
    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
}


model ScoringParameter {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    weight      Int
    
    // Foreign Keys
    providerId  String
    
    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    rules       Rule[]
}

model Rule {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    field       String
    condition   String
    value       String
    score       Int
    
    // Foreign Keys
    parameterId String
    
    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id])
}

model LoanAmountTier {
    id          String   @id @default(cuid())
    fromScore   Int
    toScore     Int
    loanAmount  Float

    // Foreign Keys
    productId   String
    
    // Relationships
    product     LoanProduct @relation(fields: [productId], references: [id])
}


model ScoringConfigurationHistory {
    id          String   @id @default(cuid())
    savedAt     DateTime @default(now())
    parameters  String   @db.Text
    
    // Foreign Keys
    providerId  String
    
    // Relationships
    provider    LoanProvider                    @relation(fields: [providerId], references: [id])
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String   @id @default(cuid())
    assignedBy  String
    assignedAt  DateTime @default(now())
    
    // Foreign Keys
    configId    String
    productId   String
    
    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)

    @@unique([configId, productId])
}

model LedgerAccount {
    id          String   @id @default(cuid())
    name        String
    type        String   // "Receivable", "Received"
    category    String   // "Principal", "Interest", "Penalty"
    balance     Float    @default(0)

    // Foreign Keys
    providerId  String
    
    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id])
}
