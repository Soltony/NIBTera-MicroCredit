// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String                        @db.NVarChar(MAX)
  colorHex                  String?
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                      @default(true)
  products                  LoanProduct[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  users                     User[]
  ledgerAccounts            LedgerAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanProduct {
  id           String  @id @default(uuid())
  provider     LoanProvider @relation(fields: [providerId], references: [id])
  providerId   String
  name         String
  description  String?
  icon         String  @db.NVarChar(MAX)
  minLoan      Float?
  maxLoan      Float?
  duration     Int?
  status       String  @default("Active") // Active, Disabled
  loans        Loan[]
  loanAmountTiers LoanAmountTier[]
  scoringConfigurations ScoringConfigurationHistory[] @relation("ProductScoringConfigurations")

  // Fee and Penalty Configuration
  serviceFeeEnabled         Boolean     @default(true)
  serviceFee                String?     // JSON stored as string: { type: 'percentage' | 'fixed', value: number }
  dailyFeeEnabled           Boolean     @default(true)
  dailyFee                  String?     // JSON stored as string: { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled       Boolean     @default(true)
  penaltyRules              String?     // JSON stored as string: { fromDay: number, toDay: number, type: 'fixed' | 'percentageOfPrincipal', value: number }[]

  @@unique([name, providerId])
}


model Loan {
  id                  String   @id @default(uuid())
  customer            Customer @relation(fields: [customerId], references: [id])
  customerId          String
  provider            LoanProvider @relation(fields: [providerId], references: [id])
  providerId          String
  product             LoanProduct @relation(fields: [productId], references: [id])
  productId           String
  loanAmount          Float
  repaidAmount        Float?
  serviceFee          Float
  penaltyAmount       Float    @default(0)
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String // "Paid", "Unpaid"
  payments            Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id              String            @id
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String // JSON stored as string: { totalLoans: number, onTimeRepayments: number }
  provisionedData ProvisionedData[]
  loans           Loan[]
}


model ScoringParameter {
  id         String       @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}


model ScoringConfigurationHistory {
  id                String        @id @default(uuid())
  provider          LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId        String
  savedAt           DateTime      @default(now())
  parameters        String      // JSON of ScoringParameter[]
  appliedProducts   LoanProduct[] @relation("ProductScoringConfigurations")
}

model LoanAmountTier {
  id          String      @id @default(uuid())
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float
}


model DataProvisioningConfig {
  id              String            @id @default(uuid())
  provider        LoanProvider      @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  name            String
  columns         String // JSON of DataColumn[]
  uploads         DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String                  @id @default(uuid())
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime                @default(now())
    uploadedBy  String
}


model ProvisionedData {
    id          String                  @id @default(uuid())
    customer    Customer                @relation(fields: [customerId], references: [id], onDelete: Cascade)
    customerId  String
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    data        String // JSON of the uploaded row data
    createdAt   DateTime                @default(now())
    updatedAt   DateTime                @updatedAt

    @@unique([customerId, configId])
}


// Security and User Management
model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  permissions String // JSON string for permissions
  users       User[]
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LedgerAccount {
  id            String   @id @default(uuid())
  provider      LoanProvider @relation(fields: [providerId], references: [id])
  providerId    String
  name          String
  type          String // "Receivable", "Received"
  category      String // "Principal", "Interest", "Penalty"
  balance       Float    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}