// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id              String        @id @default(cuid())
  fullName        String
  email           String        @unique
  phoneNumber     String        @unique
  password        String
  status          String
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON string for permissions
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LoanProvider {
  id                        String                     @id @default(cuid())
  name                      String                     @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int
  accountNumber             String?
  startingCapital           Float
  initialBalance            Float
  allowCrossProviderLoans   Boolean                    @default(false)
  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  ledgerAccounts            LedgerAccount[]
  journalEntries            JournalEntry[]
  termsAndConditions        TermsAndConditions[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model LoanProduct {
  id                           String                        @id @default(cuid())
  providerId                   String
  provider                     LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                         String
  description                  String
  icon                         String
  minLoan                      Float
  maxLoan                      Float
  duration                     Int
  status                       String
  allowConcurrentLoans         Boolean                       @default(false)
  serviceFeeEnabled            Boolean?
  serviceFee                   String? // JSON string { type: 'fixed' | 'percentage', value: number }
  dailyFeeEnabled              Boolean?
  dailyFee                     String? // JSON string { type: 'fixed' | 'percentage', value: number, calculationBase?: 'principal' | 'compound' }
  penaltyRulesEnabled          Boolean?
  penaltyRules                 String? // JSON string for PenaltyRule[]
  dataProvisioningEnabled      Boolean?
  dataProvisioningConfigId     String?
  dataProvisioningConfig       DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  loans                        Loan[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  loanAmountTiers              LoanAmountTier[]
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt

  @@unique([name, providerId])
}

model LoanAmountTier {
    id        String      @id @default(cuid())
    productId String
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore Int
    toScore   Int
    loanAmount Float
}

model Borrower {
  id               String            @id
  status           String            @default("Active") // e.g., Active, NPL, Blocked
  provisionedData  ProvisionedData[]
  loans            Loan[]
  agreements       BorrowerAgreement[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model DataProvisioningConfig {
  id            String             @id @default(cuid())
  providerId    String
  provider      LoanProvider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name          String
  columns       String // JSON string for columns configuration
  uploads       DataProvisioningUpload[]
  provisionedData ProvisionedData[]
  loanProducts  LoanProduct[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model DataProvisioningUpload {
  id           String                 @id @default(cuid())
  configId     String
  config       DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  fileName     String
  rowCount     Int
  uploadedBy   String
  uploadedAt   DateTime               @default(now())
}

model ProvisionedData {
  id         String                 @id @default(cuid())
  borrowerId String
  borrower   Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  data       String // JSON string of the uploaded data row
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([borrowerId, configId])
}

model Loan {
  id              String      @id @default(cuid())
  borrowerId      String
  borrower        Borrower    @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id])
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // "Paid", "Unpaid"
  repaidAmount    Float?
  payments        Payment[]
  journalEntries  JournalEntry[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  journalEntryId                  String?  @unique
  journalEntry                    JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
}

model ScoringParameter {
  id         String   @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  weight     Int
  rules      ScoringRule[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ScoringRule {
  id            String            @id @default(cuid())
  parameterId   String
  parameter     ScoringParameter  @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field         String
  condition     String // e.g., '>', '<', '==', 'between'
  value         String
  score         Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ScoringConfigurationHistory {
  id              String                        @id @default(cuid())
  providerId      String
  provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  parameters      String // JSON string of ScoringParameter[]
  savedAt         DateTime                      @default(now())
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id         String                      @id @default(cuid())
  configId   String
  config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  productId  String
  product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedBy String // User ID
  assignedAt DateTime                    @default(now())

  @@unique([configId, productId])
}

// Accounting Models
model LedgerAccount {
  id              String      @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name            String
  type            String // Receivable, Received, Income, Expense, etc.
  category        String // Principal, Interest, Penalty, ServiceFee
  balance         Float      @default(0)
  ledgerEntries   LedgerEntry[]

  @@unique([providerId, name])
}

model JournalEntry {
  id              String      @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  loanId          String
  loan            Loan        @relation(fields: [loanId], references: [id])
  date            DateTime
  description     String
  ledgerEntries   LedgerEntry[]
  payment         Payment?
}

model LedgerEntry {
  id                String      @id @default(cuid())
  journalEntryId    String
  journalEntry      JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  ledgerAccountId   String
  ledgerAccount     LedgerAccount @relation(fields: [ledgerAccountId], references: [id])
  type              String // Debit or Credit
  amount            Float
}

model TermsAndConditions {
  id           String        @id @default(cuid())
  providerId   String
  provider     LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  content      String
  version      Int
  isActive     Boolean       @default(true)
  agreements   BorrowerAgreement[]
  createdAt    DateTime      @default(now())
  publishedAt  DateTime      @default(now())
}

model BorrowerAgreement {
  id          String              @id @default(cuid())
  borrowerId  String
  borrower    Borrower            @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  termsId     String
  terms       TermsAndConditions  @relation(fields: [termsId], references: [id], onDelete: Cascade)
  acceptedAt  DateTime            @default(now())

  @@unique([borrowerId, termsId])
}
