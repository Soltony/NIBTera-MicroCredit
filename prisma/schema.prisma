// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


//==============================================================
// AUTH MODELS
//==============================================================
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  status        String    // Active, Inactive
  
  // Relationships
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id], onDelete: NoAction)
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction)
}

model Role {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  permissions String   @db.Text

  // Relationships
  users User[]
}


//==============================================================
// CORE LOAN MODELS
//==============================================================
model LoanProvider {
  id                        String   @id @default(cuid())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  name                      String   @unique
  icon                      String   @db.Text
  colorHex                  String
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float    @default(0)
  allowMultipleProviderLoans Boolean  @default(false)
  allowCrossProviderLoans    Boolean  @default(false)

  // Relationships
  products                  LoanProduct[]
  loans                     Loan[]
  scoringParameters         ScoringParameter[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  users                     User[]
  ledgerAccounts            LedgerAccount[]
  scoringHistory            ScoringConfigurationHistory[]
}


model LoanProduct {
  id                          String    @id @default(cuid())
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  name                        String
  description                 String    @db.Text
  icon                        String    @db.Text
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String    // Active, Disabled
  allowMultipleLoans          Boolean   @default(false)
  
  // Fee and Penalty Configuration
  serviceFeeEnabled           Boolean   @default(false)
  serviceFee                  String    @db.Text
  dailyFeeEnabled             Boolean   @default(false)
  dailyFee                    String    @db.Text
  penaltyRulesEnabled         Boolean   @default(false)
  penaltyRules                String    @db.Text
  
  // Data Provisioning Configuration
  dataProvisioningEnabled     Boolean   @default(false)

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                  String
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}


model Loan {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  borrowerId        String
  providerId        String
  productId         String
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float       @default(0)
  repaidAmount      Float?
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String      // Unpaid, Paid

  // Relationships
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments         Payment[]
}


model Payment {
  id                                String   @id @default(cuid())
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
  loanId                            String
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment   Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id])
}

model Borrower {
    id                  String @id
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    
    // Relationships
    loans               Loan[]
    provisionedData     ProvisionedData[]
}


//==============================================================
// CREDIT SCORING MODELS
//==============================================================
model ScoringParameter {
    id         String      @id @default(cuid())
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    name       String
    weight     Int
    
    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    rules      ScoringRule[]
}


model ScoringRule {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    field       String
    condition   String
    value       String
    score       Int
    
    // Relationships
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    savedAt    DateTime @default(now())
    parameters String   @db.Text
    
    // Relationships
    providerId String
    provider   LoanProvider                       @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    products   ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String   @id @default(cuid())
    configId   String
    productId  String
    assignedBy String
    assignedAt DateTime @default(now())

    // Relationships
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model LoanAmountTier {
    id         String   @id @default(cuid())
    fromScore  Int
    toScore    Int
    loanAmount Float
    
    // Relationships
    productId String
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


//==============================================================
// DATA PROVISIONING MODELS
//==============================================================
model DataProvisioningConfig {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  columns    String   @db.Text

  // Relationships
  providerId String
  provider   LoanProvider              @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploads    DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String

    // Relationships
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model ProvisionedData {
  id        String   @id @default(cuid())
  borrowerId String
  configId  String
  data      String   @db.Text
  createdAt DateTime @default(now())
  
  // Relationships
  borrower  Borrower                @relation(fields: [borrowerId], references: [id])
  config    DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: NoAction)

  @@unique([borrowerId, configId])
}


//==============================================================
// FINANCIAL LEDGER MODELS
//==============================================================
model LedgerAccount {
    id        String   @id @default(cuid())
    name      String
    type      String   // Receivable, Received
    category  String   // Principal, Interest, Penalty
    balance   Float    @default(0)

    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}