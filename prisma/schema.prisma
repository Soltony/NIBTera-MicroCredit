// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
  users                       User[]
  ledgerAccounts              LedgerAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanProduct {
  id                        String                        @id @default(uuid())
  provider                  LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                String
  name                      String
  description               String?
  icon                      String
  minLoan                   Float?
  maxLoan                   Float?
  status                    String                        @default("Active") // e.g., Active, Disabled
  serviceFee                String? // JSON string for { type, value }
  dailyFee                  String? // JSON string for { type, value, calculationBase }
  penaltyRules              String? // JSON string for array of { fromDay, toDay, type, value }
  loans                     Loan[]
  scoringHistory            ScoringConfigurationHistory[] @relation("ProductScoringHistory")
  loanAmountTiers           LoanAmountTier[]
  serviceFeeEnabled         Boolean                       @default(true)
  dailyFeeEnabled           Boolean                       @default(true)
  penaltyRulesEnabled       Boolean                       @default(true)

  @@unique([name, providerId])
}

model LoanAmountTier {
  id          String      @id @default(uuid())
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float
}

model Loan {
  id              String         @id @default(uuid())
  customer        Customer       @relation(fields: [customerId], references: [id])
  customerId      String
  provider        LoanProvider   @relation(fields: [providerId], references: [id])
  providerId      String
  product         LoanProduct    @relation(fields: [productId], references: [id])
  productId       String
  loanAmount      Float
  serviceFee      Float          @default(0)
  penaltyAmount   Float          @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String         @default("Unpaid") // e.g., Unpaid, Paid, Overdue
  repaidAmount    Float?
  payments        Payment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
}

model Customer {
  id            String   @id
  age           Int
  gender        String
  monthlyIncome Float
  educationLevel String
  loanHistory   String // JSON string for { totalLoans, onTimeRepayments }
  loans         Loan[]
  provisionedData ProvisionedData[]
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  status        String        @default("Active") // Active, Inactive
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON string for permissions
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScoringParameter {
  id          String        @id @default(uuid())
  provider    LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String // e.g., age, monthlyIncome
  weight      Int    // e.g., 30 for 30%
  rules       ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String // age, monthlyIncome, etc.
  condition   String // >, <, ==, between
  value       String // The value to compare against
  score       Int
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  parameters      String // JSON string of the ScoringParameter[] array
  savedAt         DateTime      @default(now())
  appliedProducts LoanProduct[] @relation("ProductScoringHistory")
}

model DataProvisioningConfig {
  id           String                  @id @default(uuid())
  provider     LoanProvider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId   String
  name         String
  columns      String // JSON string for columns config
  uploads      DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String                  @id @default(uuid())
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime                @default(now())
    uploadedBy  String
}

model ProvisionedData {
    id          String                  @id @default(uuid())
    customer    Customer                @relation(fields: [customerId], references: [id])
    customerId  String
    config      DataProvisioningConfig  @relation(fields: [configId], references: [id])
    configId    String
    data        String // JSON string of the row data
    createdAt   DateTime                @default(now())
    
    @@unique([customerId, configId])
}

model LedgerAccount {
  id          String   @id @default(uuid())
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  type        String   // Receivable, Received
  category    String   // Principal, Interest, Penalty
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
