// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String // "Active", "Inactive"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  roleId        String
  role          Role     @relation(fields: [roleId], references: [id])
  
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string
  users       User[]
}

model LoanProvider {
  id              String  @id @default(cuid())
  name            String  @unique
  icon            String
  colorHex        String?
  displayOrder    Int
  accountNumber   String?
  initialBalance  Float
  allowCrossProviderLoans Boolean @default(false)
  products        LoanProduct[]
  users           User[]
  scoringParameters ScoringParameter[]
  scoringHistory  ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  loans           Loan[]
  ledgerAccounts  LedgerAccount[]
}

model LoanProduct {
  id                 String  @id @default(cuid())
  providerId         String
  provider           LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name               String
  description        String?
  icon               String
  minLoan            Float?
  maxLoan            Float?
  duration           Int?
  status             String // "Active", "Disabled"
  allowConcurrentLoans Boolean @default(false)
  
  // Fee and penalty rules stored as JSON strings
  serviceFee         String?
  dailyFee           String?
  penaltyRules       String?
  
  serviceFeeEnabled     Boolean?
  dailyFeeEnabled       Boolean?
  penaltyRulesEnabled   Boolean?
  
  dataProvisioningEnabled Boolean?
  dataProvisioningConfigId String?
  dataProvisioningConfig DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id])

  loans              Loan[]
  loanAmountTiers    LoanAmountTier[]
  scoringConfigurations ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}

model LoanAmountTier {
  id         String      @id @default(cuid())
  productId  String
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model Loan {
  id              String   @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id])
  borrowerId      String
  borrower        Borrower @relation(fields: [borrowerId], references: [id])
  loanAmount      Float
  serviceFee      Float
  repaidAmount    Float?
  penaltyAmount   Float    @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // "Paid", "Unpaid"
  
  payments        Payment[]
}

model Payment {
  id             String   @id @default(cuid())
  loanId         String
  loan           Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount         Float
  date           DateTime
  outstandingBalanceBeforePayment Float?
}


model ScoringParameter {
  id         String   @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
  id         String   @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  savedAt    DateTime @default(now())
  parameters String // JSON string of ScoringParameter[]
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id          String   @id @default(cuid())
  configId    String
  config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  productId   String
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  assignedAt  DateTime @default(now())
  assignedBy  String // User ID

  @@unique([configId, productId])
}

model Borrower {
  id              String @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model DataProvisioningConfig {
    id         String   @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name       String
    columns    String // JSON string of column definitions
    uploads    DataProvisioningUpload[]
    products   LoanProduct[]
}

model ProvisionedData {
    id        String    @id @default(cuid())
    borrowerId String
    borrower  Borrower  @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId  String
    config    DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data      String    // JSON string of the uploaded data row
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@unique([borrowerId, configId])
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName   String
    rowCount   Int
    uploadedAt DateTime @default(now())
    uploadedBy String
}

model LedgerAccount {
  id         String   @id @default(cuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  type       String // "Receivable", "Received"
  category   String // "Principal", "Interest", "Penalty"
  balance    Float    @default(0)
}
