// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User and Role Management
model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String // "Active" or "Inactive"
  roleId        String
  role          Role    @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string for permissions
  users       User[]
}

// Core LoanFlow Entities
model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String
  colorHex                  String
  displayOrder              Int
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowCrossProviderLoans   Boolean                       @default(false)
  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String // "Active" or "Disabled"
  allowConcurrentLoans        Boolean                       @default(false)
  
  // Fee and Penalty Structures (as JSON strings)
  serviceFee                  String?
  dailyFee                    String?
  penaltyRules                String?

  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  
  // Data Provisioning Link
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigs              ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id              String      @id @default(cuid())
  borrowerId      String
  borrower        Borrower    @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float       @default(0)
  repaidAmount    Float?
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // "Paid" or "Unpaid"
  payments        Payment[]
  createdAt       DateTime    @default(now())
}

model Borrower {
    id              String @id
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model ProvisionedData {
    id          String @id @default(cuid())
    borrowerId  String
    borrower    Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data        String // JSON string of the uploaded data for this borrower
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@unique([borrowerId, configId])
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}


// Settings and Configuration
model DataProvisioningConfig {
  id            String        @id @default(cuid())
  providerId    String
  provider      LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name          String
  columns       String // JSON string detailing the expected columns and their types
  uploads       DataProvisioningUpload[]
  products      LoanProduct[]
}

model DataProvisioningUpload {
    id          String      @id @default(cuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime    @default(now())
    uploadedBy  String
}


model ScoringParameter {
  id          String @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  weight      Int
  rules       ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
    id            String @id @default(cuid())
    providerId    String
    provider      LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters    String // JSON string of the ScoringParameter[] array
    savedAt       DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String @id @default(cuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String // User ID
    
    @@unique([configId, productId])
}


model LoanAmountTier {
    id          String      @id @default(cuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}


model LedgerAccount {
  id          String   @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  type        String // Receivable, Received, Income
  category    String // Principal, Interest, ServiceFee, Penalty
  balance     Float    @default(0)

  @@unique([providerId, name])
}
