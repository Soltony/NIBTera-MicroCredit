// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model LoanProvider {
  id                        String   @id @default(uuid())
  name                      String   @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int      @default(0)
  accountNumber             String?
  initialBalance            Float    @default(0)
  allowCrossProviderLoans   Boolean  @default(false)

  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model LoanProduct {
  id                          String   @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                        @default("Active") // e.g., Active, Disabled
  allowConcurrentLoans        Boolean                       @default(false)
  
  serviceFee                  String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number }
  serviceFeeEnabled           Boolean? @default(false)

  dailyFee                    String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  dailyFeeEnabled             Boolean? @default(false)
  
  penaltyRules                String? // JSON stored as string: PenaltyRule[]
  penaltyRulesEnabled         Boolean? @default(false)
  
  dataProvisioningEnabled     Boolean? @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)    
  
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  @@unique([name, providerId])
}


model Loan {
  id              String   @id @default(uuid())
  borrowerId      String
  borrower        Borrower @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float    @default(0)
  repaidAmount    Float?   @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String   @default("Unpaid") // e.g., Unpaid, Paid

  payments        Payment[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProvisionedData {
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId  String
  config    DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  data      String // Storing JSON data as a string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([borrowerId, configId])
}


model Borrower {
  id             String   @id
  provisionedData ProvisionedData[]
  loans          Loan[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model Payment {
  id                              String   @id @default(uuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}

model LoanAmountTier {
    id          String @id @default(uuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}


model DataProvisioningConfig {
  id          String   @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  columns     String   // Storing JSON array of column definitions
  
  provisionedData ProvisionedData[]
  uploads         DataProvisioningUpload[]
  products        LoanProduct[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DataProvisioningUpload {
    id          String   @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}


model ScoringParameter {
  id          String   @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  weight      Int
  rules       ScoringRule[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model ScoringConfigurationHistory {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters  String // JSON string of ScoringParameter[]
    savedAt     DateTime @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String      @id @default(uuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String
}

model User {
  id            String       @id @default(uuid())
  fullName      String
  email         String       @unique
  phoneNumber   String       @unique
  password      String
  status        String       @default("Active") // Active, Inactive
  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON stored as string
  users       User[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LedgerAccount {
  id          String      @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  type        String // "Receivable", "Received", "Income"
  category    String // "Principal", "Interest", "ServiceFee", "Penalty"
  balance     Float      @default(0)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([providerId, name])
}
