
datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}


// ==============================================================
// Authentication & Authorization
// ==============================================================
model User {
    id            String        @id @default(cuid())
    fullName      String
    email         String        @unique
    phoneNumber   String        @unique
    password      String
    status        String        // Active, Inactive
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    // Relationships
    role          Role          @relation(fields: [roleId], references: [id])
    roleId        String
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
    loanProviderId String?
}

model Role {
    id          String   @id @default(cuid())
    name        String   @unique
    permissions String // JSON string for permissions

    // Relationships
    users       User[]
}


// ==============================================================
// Loan & Provider Core Models
// ==============================================================
model LoanProvider {
    id                        String      @id @default(cuid())
    name                      String      @unique
    icon                      String
    colorHex                  String
    displayOrder              Int
    accountNumber             String?
    initialBalance            Float
    allowCrossProviderLoans   Boolean     @default(false)

    // Relationships
    users                       User[]
    products                    LoanProduct[]
    scoringParameters           ScoringParameter[]
    dataProvisioningConfigs     DataProvisioningConfig[]
    scoringConfigurationHistory ScoringConfigurationHistory[]
    ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
    id                          String      @id @default(cuid())
    name                        String
    description                 String
    icon                        String
    minLoan                     Float
    maxLoan                     Float
    duration                    Int
    status                      String      // Active, Disabled
    allowMultipleLoans          Boolean     @default(false)
    serviceFeeEnabled           Boolean     @default(false)
    serviceFee                  String      // JSON for FeeRule
    dailyFeeEnabled             Boolean     @default(false)
    dailyFee                    String      // JSON for FeeRule
    penaltyRulesEnabled         Boolean     @default(false)
    penaltyRules                String      // JSON for PenaltyRule[]
    dataProvisioningEnabled     Boolean     @default(false)

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
    dataProvisioningConfigId    String?

    @@unique([name, providerId])
}

model Loan {
    id               String   @id @default(cuid())
    loanAmount       Float
    serviceFee       Float
    penaltyAmount    Float    @default(0)
    disbursedDate    DateTime @default(now())
    dueDate          DateTime
    repaymentStatus  String   // Unpaid, Paid
    repaidAmount     Float?

    // Relationships
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String
    payments         Payment[]
}

model Payment {
    id                                String   @id @default(cuid())
    amount                            Float
    date                              DateTime @default(now())
    outstandingBalanceBeforePayment   Float

    // Relationships
    loan   Loan   @relation(fields: [loanId], references: [id])
    loanId String
}

model LedgerAccount {
    id          String   @id @default(cuid())
    name        String
    type        String   // Receivable, Received
    category    String   // Principal, Interest, Penalty
    balance     Float    @default(0)

    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    providerId  String
}


// ==============================================================
// Borrower & Data Provisioning
// ==============================================================
model Borrower {
    id              String            @id
    loans           Loan[]
    provisionedData ProvisionedData[]
}

model DataProvisioningConfig {
    id         String      @id @default(cuid())
    name       String
    columns    String // JSON string for column definitions

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
    uploads    DataProvisioningUpload[]
    products   LoanProduct[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    fileName   String
    rowCount   Int
    uploadedAt DateTime @default(now())
    uploadedBy String

    // Relationships
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId   String
}

model ProvisionedData {
    data     String // JSON string for the row data
    createdAt DateTime @default(now())

    // Relationships
    borrower    Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId  String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String
    
    @@id([borrowerId, configId])
}


// ==============================================================
// Credit Scoring Engine
// ==============================================================
model ScoringParameter {
    id       String @id @default(cuid())
    name     String
    weight   Int

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    providerId String
    rules      ScoringRule[]
}

model ScoringRule {
    id          String   @id @default(cuid())
    field       String
    condition   String
    value       String
    score       Int

    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId String
}

model LoanAmountTier {
    id          String      @id @default(cuid())
    fromScore   Int
    toScore     Int
    loanAmount  Float

    // Relationships
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
}

model ScoringConfigurationHistory {
    id         String      @id @default(cuid())
    providerId String
    parameters String // JSON string of ScoringParameter[]
    savedAt    DateTime    @default(now())

    // Relationships
    provider          LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    appliedProducts   ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String   @id @default(cuid())
    configId    String
    productId   String
    assignedBy  String
    assignedAt  DateTime @default(now())

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
}
