
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  fullName      String
  email         String       @unique
  phoneNumber   String       @unique
  password      String
  status        String
  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Loan {
  id              String       @id @default(uuid())
  customer            Customer     @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customerId          String
  providerId          String
  productId           String
  loanAmount          Float
  serviceFee          Float
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String // e.g., Paid, Unpaid
  repaidAmount        Float?
  penaltyAmount       Float        @default(0)
  payments            Payment[]
}

model LoanProvider {
  id                           String                        @id @default(uuid())
  name                         String                        @unique
  icon                         String                        @db.NVarChar(MAX)
  colorHex                     String?
  displayOrder                 Int                           @default(0)
  accountNumber                String?
  initialBalance               Float?                        @default(0)
  allowMultipleProviderLoans   Boolean                       @default(false)
  allowCrossProviderLoans      Boolean                       @default(false)
  users                        User[]
  products                     LoanProduct[]
  scoringParameters            ScoringParameter[]
  scoringConfigurationHistory  ScoringConfigurationHistory[]
  dataProvisioningConfigs      DataProvisioningConfig[]
  ledgerAccounts               LedgerAccount[]
  loans                        Loan[]
}

model LoanProduct {
  id                            String                        @id @default(uuid())
  provider                      LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                    String
  name                          String
  description                   String?
  icon                          String                        @db.NVarChar(MAX)
  minLoan                       Float?
  maxLoan                       Float?
  duration                      Int                           @default(30)
  status                        String
  serviceFeeEnabled             Boolean?                      @default(true)
  serviceFee                    String? // JSON stored as string
  dailyFeeEnabled               Boolean?                      @default(true)
  dailyFee                      String? // JSON stored as string
  penaltyRulesEnabled           Boolean?                      @default(true)
  penaltyRules                  String? // JSON stored as string
  dataProvisioningEnabled       Boolean?                      @default(false)
  dataProvisioningConfigId      String?
  dataProvisioningConfig        DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)
  loans                         Loan[]
  loanAmountTiers               LoanAmountTier[]
  scoringHistories              ProductsOnScoringHistories[]

  @@unique([name, providerId])
}


model ProductsOnScoringHistories {
  product          LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId        String
  scoringHistory   ScoringConfigurationHistory @relation(fields: [scoringHistoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scoringHistoryId String
  assignedAt       DateTime                    @default(now())

  @@id([productId, scoringHistoryId])
}


model LoanAmountTier {
  id         String      @id @default(uuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

model Customer {
  id              String            @id
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String // JSON stored as string
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON stored as string
  users       User[]
}

model ScoringParameter {
  id         String       @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
  id              String                        @id @default(uuid())
  provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  parameters      String // JSON stored as string
  savedAt         DateTime                      @default(now())
  appliedProducts ProductsOnScoringHistories[]
}

model DataProvisioningConfig {
  id          String              @id @default(uuid())
  provider    LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  columns     String // JSON stored as string
  uploads     DataProvisioningUpload[]
  products    LoanProduct[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id          String                 @id @default(uuid())
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  fileName    String
  rowCount    Int
  uploadedAt  DateTime               @default(now())
  uploadedBy  String
}

model ProvisionedData {
  id          String                 @id @default(uuid())
  customer    Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  data        String // JSON stored as string

  @@unique([customerId, configId])
}

model LedgerAccount {
  id         String       @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  type       String // Receivable, Received
  category   String // Principal, Interest, Penalty
  balance    Float        @default(0)
}
