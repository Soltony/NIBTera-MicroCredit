// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  roleId        String
  role          Role @relation(fields: [roleId], references: [id])
  
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String @db.NVarChar(Max)
  users       User[]
}

model LoanProvider {
  id          String @id @default(uuid())
  name        String @unique
  icon        String @db.NVarChar(Max)
  colorHex    String
  displayOrder Int
  accountNumber String?
  initialBalance Float @default(0)
  allowCrossProviderLoans Boolean @default(false)
  
  products    LoanProduct[]
  users       User[]
  scoringParameters ScoringParameter[]
  scoringHistory    ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  loans       Loan[]
  ledgerAccounts LedgerAccount[]
}


model LoanProduct {
  id              String @id @default(uuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  name            String
  description     String
  icon            String @db.NVarChar(Max)
  minLoan         Float?
  maxLoan         Float?
  duration        Int?

  serviceFeeEnabled     Boolean? @default(false)
  serviceFee            String? @db.NVarChar(Max) // { type: 'fixed'/'percentage', value: number }
  dailyFeeEnabled       Boolean? @default(false)
  dailyFee              String? @db.NVarChar(Max) // { type: 'fixed'/'percentage', value: number, calculationBase: 'principal'/'compound' }
  
  penaltyRulesEnabled   Boolean? @default(false)
  penaltyRules          String? @db.NVarChar(Max)     // [{ fromDay: number, toDay: number|null, type: 'fixed'/'percentageOfPrincipal'/'percentageOfCompound', value: number }]
  
  allowConcurrentLoans Boolean @default(false)
  status                String   @default("Active") // Active, Disabled
  
  dataProvisioningEnabled   Boolean? @default(false)
  dataProvisioningConfigId  String?
  dataProvisioningConfig    DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  loans           Loan[]
  loanAmountTiers LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}

model Loan {
  id                String @id @default(uuid())
  providerId        String
  provider          LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  borrowerId        String
  borrower          Borrower @relation(fields: [borrowerId], references: [id])
  productId         String
  product           LoanProduct @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  
  loanAmount        Float
  repaidAmount      Float? @default(0)
  serviceFee        Float
  penaltyAmount     Float
  
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String // "Paid", "Unpaid"
  
  payments          Payment[]
}

model Borrower {
    id   String @id
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model ProvisionedData {
    id String @id @default(uuid())
    borrowerId String
    borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    
    configId String
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    data String @db.NVarChar(Max)
    
    createdAt DateTime @default(now())
    
    @@unique([borrowerId, configId])
}


model Payment {
    id                              String @id @default(uuid())
    loanId                          String
    loan                            Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float?
}

// Models for the Scoring Engine
model ScoringParameter {
    id         String @id @default(uuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name       String
    weight     Int
    rules      ScoringRule[]
}

model ScoringRule {
    id          String @id @default(uuid())
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    
    field       String
    condition   String
    value       String
    score       Int
}


model LoanAmountTier {
    id          String @id @default(uuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

    fromScore   Int
    toScore     Int
    loanAmount  Float
}


model ScoringConfigurationHistory {
    id         String   @id @default(uuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    
    parameters String @db.NVarChar(Max)
    savedAt    DateTime @default(now())
    
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String @id @default(uuid())
    configId    String
    config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    
    assignedBy  String
    assignedAt  DateTime @default(now())
    
    @@unique([configId, productId])
}


model DataProvisioningConfig {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

    name    String
    columns String @db.NVarChar(Max) // [{ id, name, type: 'string'/'number'/'date', isIdentifier: bool, options: [] }]

    uploads      DataProvisioningUpload[]
    products     LoanProduct[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}

model LedgerAccount {
  id String @id @default(uuid())
  providerId String
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  name      String
  type      String // Receivable, Received
  category  String // Principal, Interest, Penalty
  balance   Float @default(0)
}
