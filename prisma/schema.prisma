datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String        @id @default(cuid())
  fullName    String
  email       String        @unique
  phoneNumber String        @unique
  password    String
  status      UserStatus    @default(Active)
  roleId      String
  providerId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  role        Role          @relation(fields: [roleId], references: [id])
  provider    LoanProvider? @relation(fields: [providerId], references: [id])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  permissions Json
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LoanProvider {
  id                String              @id @default(cuid())
  name              String              @unique
  icon              String
  colorHex          String
  users             User[]
  products          LoanProduct[]
  loans             LoanDetails[]
  scoringParameters ScoringParameter[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model LoanProduct {
  id          String        @id @default(cuid())
  name        String
  description String?
  icon        String
  minLoan     Float
  maxLoan     Float
  serviceFee  String
  dailyFee    String
  penaltyFee  String
  status      ProductStatus @default(Active)
  providerId  String
  provider    LoanProvider  @relation(fields: [providerId], references: [id])
  loans       LoanDetails[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model LoanDetails {
  id              String        @id @default(cuid())
  loanAmount      Float
  serviceFee      Float
  interestRate    Float
  disbursedDate   DateTime
  dueDate         DateTime
  penaltyAmount   Float
  repaymentStatus RepaymentStatus @default(Unpaid)
  repaidAmount    Float?
  providerId      String
  productId       String
  provider        LoanProvider  @relation(fields: [providerId], references: [id])
  product         LoanProduct   @relation(fields: [productId], references: [id])
  payments        Payment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Payment {
  id                            String      @id @default(cuid())
  amount                        Float
  date                          DateTime
  outstandingBalanceBeforePayment Float?
  loanId                        String
  loan                          LoanDetails @relation(fields: [loanId], references: [id])
  createdAt                     DateTime    @default(now())
  updatedAt                     DateTime    @updatedAt
}

model ScoringParameter {
  id         String @id @default(cuid())
  name       String
  weight     Int
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  rules      Rule[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Rule {
  id                 String           @id @default(cuid())
  field              String
  condition          String
  value              String
  score              Int
  scoringParameterId String
  scoringParameter   ScoringParameter @relation(fields: [scoringParameterId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

enum UserStatus {
  Active
  Inactive
}

enum ProductStatus {
  Active
  Disabled
}

enum RepaymentStatus {
  Paid
  Unpaid
}
