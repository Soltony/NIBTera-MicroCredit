
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mssql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String        @id @default(cuid())
  fullName       String
  email          String        @unique
  phoneNumber    String        @unique
  password       String
  status         String
  role           Role          @relation(fields: [roleId], references: [id])
  roleId         String
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
  loanProviderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // Stored as a JSON string
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LoanProvider {
  id                      String                    @id @default(cuid())
  name                    String                    @unique
  icon                    String
  colorHex                String?
  displayOrder            Int                       @default(0)
  accountNumber           String?
  startingCapital         Float
  initialBalance          Float
  allowCrossProviderLoans Boolean                   @default(false)
  nplThresholdDays        Int                       @default(60)
  products                LoanProduct[]
  users                   User[]
  scoringParameters       ScoringParameter[]
  scoringHistory          ScoringConfigurationHistory[]
  dataProvisioningConfigs DataProvisioningConfig[]
  ledgerAccounts          LedgerAccount[]
  journalEntries          JournalEntry[]
  termsAndConditions      TermsAndConditions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String
  allowConcurrentLoans        Boolean                       @default(false)
  serviceFee                  String                        @default("{}") // JSON for fee structure
  dailyFee                    String                        @default("{}") // JSON for fee structure
  penaltyRules                String                        @default("[]") // JSON array for penalty rules
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  eligibilityFilter           String?
  eligibilityUploadId         String?                       @unique
  eligibilityUpload           DataProvisioningUpload?       @relation(fields: [eligibilityUploadId], references: [id], onDelete: SetNull)
  loans                       Loan[]
  loanApplications            LoanApplication[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  dataProvisioningConfigId    String?
  requiredDocuments           RequiredDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, providerId])
}

model LoanAmountTier {
  id         String      @id @default(cuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model ScoringParameter {
  id         String         @id @default(cuid())
  provider   LoanProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model ScoringRule {
  id              String           @id @default(cuid())
  parameter       ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId     String
  field           String
  condition       String
  value           String
  score           Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// History of scoring configurations
model ScoringConfigurationHistory {
  id              String                        @id @default(cuid())
  provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  parameters      String // JSON string of the ScoringParameter[] at the time of saving
  savedAt         DateTime                      @default(now())
  appliedProducts ScoringConfigurationProduct[]
}

// Join table for history and products
model ScoringConfigurationProduct {
  id        String                      @id @default(cuid())
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  String
  product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  assignedAt DateTime                   @default(now())
  assignedBy String // User ID
}

model LoanApplication {
  id                  String             @id @default(cuid())
  borrower            Borrower           @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId          String
  product             LoanProduct        @relation(fields: [productId], references: [id])
  productId           String
  loanAmount          Float?
  status              String
  rejectionReason     String?
  disbursedLoan       Loan? // This relation is one-to-one
  requiredDocuments   UploadedDocument[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model RequiredDocument {
  id                String             @id @default(cuid())
  product           LoanProduct        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  name              String
  description       String?
  uploadedDocuments UploadedDocument[]
}

model UploadedDocument {
  id                 String           @id @default(cuid())
  loanApplication    LoanApplication  @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)
  loanApplicationId  String
  requiredDocument   RequiredDocument @relation(fields: [requiredDocumentId], references: [id])
  requiredDocumentId String
  fileName           String
  fileType           String
  fileContent        String // Could be URL to blob storage or base64 data URI
  status             String           @default("PENDING") // PENDING, APPROVED, REJECTED
  reviewedBy         String? // User ID
  reviewedAt         DateTime?
  rejectionReason    String?

  @@unique([loanApplicationId, requiredDocumentId])
}

model Loan {
  id                String          @id @default(cuid())
  borrower          Borrower        @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId        String
  product           LoanProduct     @relation(fields: [productId], references: [id])
  productId         String
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanApplicationId String          @unique
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String // e.g., Unpaid, Paid, Partial
  repaidAmount      Float?          @default(0)
  repaymentBehavior String? // e.g., ON_TIME, LATE, EARLY
  payments          Payment[]
  journalEntries    JournalEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                              String       @id @default(cuid())
  loan                            Loan         @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float
  journalEntry                    JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  journalEntryId                  String       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Borrower {
  id              String            @id
  status          String            @default("Active") // Active, NPL (Non-Performing Loan), Blacklisted
  loans           Loan[]
  applications    LoanApplication[]
  provisionedData ProvisionedData[]
  agreements      BorrowerAgreement[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model DataProvisioningConfig {
  id              String                @id @default(cuid())
  provider        LoanProvider          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  name            String
  columns         String // Stored as a JSON string of DataColumn[]
  provisionedData ProvisionedData[]
  products        LoanProduct[]
  uploads         DataProvisioningUpload[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DataProvisioningUpload {
  id                String            @id @default(cuid())
  config            DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId          String
  fileName          String
  rowCount          Int
  uploadedBy        String // User's name or ID
  uploadedAt        DateTime          @default(now())
  provisionedData   ProvisionedData[]
  loanProductFilter LoanProduct?
}

model ProvisionedData {
  id         String                 @id @default(cuid())
  borrower   Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   String
  upload     DataProvisioningUpload? @relation(fields: [uploadId], references: [id], onDelete: SetNull)
  uploadId   String?
  data       String // JSON string of the row data
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([borrowerId, configId])
}

model LedgerAccount {
  id             String         @id @default(cuid())
  provider       LoanProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId     String
  name           String
  type           String // Receivable, Received, Income, Expense, etc.
  category       String // Principal, Interest, Penalty, etc.
  balance        Float          @default(0.0)
  ledgerEntries  LedgerEntry[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([providerId, name])
}

model JournalEntry {
  id            String        @id @default(cuid())
  provider      LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId    String
  loan          Loan?         @relation(fields: [loanId], references: [id], onDelete: NoAction)
  loanId        String?
  date          DateTime
  description   String
  ledgerEntries LedgerEntry[]
  payment       Payment?
  createdAt     DateTime      @default(now())
}

model LedgerEntry {
  id              String        @id @default(cuid())
  journalEntry    JournalEntry  @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId  String
  ledgerAccount   LedgerAccount @relation(fields: [ledgerAccountId], references: [id])
  ledgerAccountId String
  type            String // Debit or Credit
  amount          Float
}

model TermsAndConditions {
  id         String              @id @default(cuid())
  provider   LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  content    String
  version    Int
  isActive   Boolean             @default(true)
  publishedAt DateTime           @default(now())
  agreements BorrowerAgreement[]

  @@unique([providerId, version])
}

model BorrowerAgreement {
  id          String             @id @default(cuid())
  borrower    Borrower           @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId  String
  terms       TermsAndConditions @relation(fields: [termsId], references: [id], onDelete: Cascade)
  termsId     String
  acceptedAt  DateTime           @default(now())

  @@unique([borrowerId, termsId])
}

model Tax {
  id String @id @default(cuid())
  name String?
  rate Float @default(0)
  appliedTo String @default("[]") // JSON array of components: 'serviceFee', 'interest', 'penalty'
}


model AuditLog {
  id        String   @id @default(cuid())
  actorId   String // Can be a user ID or 'system' or 'anonymous'
  action    String // e.g., 'USER_LOGIN_SUCCESS', 'LOAN_DISBURSEMENT_FAILED'
  entity    String? // e.g., 'LOAN', 'USER', 'PROVIDER'
  entityId  String?
  details   String? // JSON blob for extra context
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}
