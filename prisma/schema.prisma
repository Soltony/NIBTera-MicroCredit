
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String   @id @default(uuid())
  name                      String   @unique
  icon                      String   @default("Building2")
  colorHex                  String?
  displayOrder              Int      @default(0)
  accountNumber             String?
  initialBalance            Float    @default(0)
  allowCrossProviderLoans   Boolean  @default(false)

  products                  LoanProduct[]
  loans                     Loan[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                          String    @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  name                        String
  description                 String?
  icon                        String    @default("PersonStanding")
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?      @default(30)
  status                      String    @default("Active") // Active, Disabled
  
  allowConcurrentLoans        Boolean   @default(false)
  serviceFeeEnabled           Boolean?  @default(false)
  dailyFeeEnabled             Boolean?  @default(false)
  penaltyRulesEnabled         Boolean?  @default(false)
  dataProvisioningEnabled     Boolean?  @default(false)
  
  serviceFee                  String?   // JSON FeeRule
  dailyFee                    String?   // JSON FeeRule
  penaltyRules                String?   // JSON PenaltyRule[]

  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction)    
  
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id              String      @id @default(uuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  borrowerId      String
  borrower        Borrower    @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  loanAmount      Float
  serviceFee      Float       @default(0)
  penaltyAmount   Float       @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String      // "Paid", "Unpaid"
  repaidAmount    Float?
  
  payments        Payment[]
}

model Borrower {
    id              String      @id
    loans           Loan[]
    provisionedData ProvisionedData[]
}


model Payment {
  id                              String   @id @default(uuid())
  loanId                          String
  loan                            Loan     @relation(fields: [loanId], references: [id])
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

model User {
  id            String    @id @default(uuid())
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  status        String    // "Active", "Inactive"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON string
  users       User[]
}

model ScoringParameter {
  id        String  @id @default(uuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  name      String
  weight    Int
  rules     ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
    id          String      @id @default(uuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}

model ScoringConfigurationHistory {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters  String      // JSON string of ScoringParameter[]
    savedAt     DateTime    @default(now())
    appliedProducts   ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String      @id @default(uuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
    assignedAt DateTime                   @default(now())
    assignedBy String
    
    @@unique([configId, productId])
}

model DataProvisioningConfig {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    columns     String // JSON string of DataColumn[]
    
    uploads     DataProvisioningUpload[]
    products    LoanProduct[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}

model ProvisionedData {
    id          String @id @default(uuid())
    borrowerId  String
    borrower    Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data        String // JSON string of the uploaded row data
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@unique([borrowerId, configId])
}

model LedgerAccount {
  id         String @id @default(uuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  type       String // Receivable, Received, Income
  category   String // Principal, Interest, ServiceFee, Penalty
  balance    Float  @default(0.0)
}
