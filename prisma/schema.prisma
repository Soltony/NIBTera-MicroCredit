// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model User {
  id            String       @id @default(uuid())
  fullName      String
  email         String       @unique
  phoneNumber   String       @unique
  password      String
  status        String       @default("Active") // e.g., Active, Inactive
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  
  loanProviderId  String?
  loanProvider    LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String   @db.NVarChar(MAX) // Storing permissions as a JSON string
  users       User[]
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String                        @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)
  
  // Relations
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  users                       User[]
  loans                       Loan[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                         @id @default(uuid())
  providerId                  String
  provider                    LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  description                 String?
  icon                        String                         @db.NVarChar(MAX)
  minLoan                     Float
  maxLoan                     Float
  status                      String                         @default("Active") // Active, Disabled
  
  // Fee Structure (as JSON strings)
  serviceFeeEnabled           Boolean                        @default(true)
  serviceFee                  String?                        @db.NVarChar(MAX) // { type: 'percentage' | 'fixed', value: number }
  dailyFeeEnabled             Boolean                        @default(true)
  dailyFee                    String?                        @db.NVarChar(MAX) // { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean                        @default(true)
  penaltyRules                String?                        @db.NVarChar(MAX) // [{ fromDay: number, toDay: number, type: 'fixed' | 'percentageOfPrincipal', value: number }]
  
  dataProvisioningEnabled     Boolean                        @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?        @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  // Relations
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistory              ScoringConfigurationHistory[]  @relation("ProductScoringHistory")
  
  @@unique([name, providerId])
}

model LoanAmountTier {
    id        String      @id @default(uuid())
    productId String
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore Int
    toScore   Int
    loanAmount Float
}

model DataProvisioningConfig {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    name        String
    columns     String      @db.NVarChar(MAX) // JSON string of DataColumn[]
    
    // Relations
    products    LoanProduct[]
    uploads     DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String      @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime    @default(now())
    uploadedBy  String
}

model ProvisionedData {
    id          String      @id @default(uuid())
    customerId  String
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data        String      @db.NVarChar(MAX) // JSON string of the row data
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    
    @@unique([customerId, configId])
}

model Customer {
    id              String   @id @default(uuid())
    age             Int
    gender          String
    monthlyIncome   Float
    educationLevel  String
    loanHistory     String   @db.NVarChar(MAX) // JSON: { totalLoans: number, onTimeRepayments: number }

    // Relations
    loans           Loan[]
}


model Loan {
  id                String       @id @default(uuid())
  customerId        String
  providerId        String
  productId         String
  
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float        @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String       // e.g., Paid, Unpaid, Overdue
  repaidAmount      Float?

  // Relations
  customer            Customer     @relation(fields: [customerId], references: [id])
  provider            LoanProvider @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  product             LoanProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  payments            Payment[]
}

model Payment {
    id                              String   @id @default(uuid())
    loanId                          String
    loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float
}

model ScoringParameter {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String      // e.g., age, monthlyIncome
    weight      Int         // Percentage weight (1-100)
    
    // Relations
    rules       ScoringParameterRule[]
}

model ScoringParameterRule {
    id          String      @id @default(uuid())
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field       String      // The field in the customer/provisioned data to check
    condition   String      // e.g., '>', '<', '==', 'between'
    value       String      // The value to compare against
    score       Int
}

model ScoringConfigurationHistory {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parameters  String      @db.NVarChar(MAX) // JSON of ScoringParameter[] at the time of saving
    savedAt     DateTime    @default(now())
    
    // Relations
    appliedProducts LoanProduct[] @relation("ProductScoringHistory")
}

model LedgerAccount {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String      // e.g., "Principal Receivable", "Interest Received"
    type        String      // "Receivable", "Received"
    category    String      // "Principal", "Interest", "Penalty"
    balance     Float       @default(0)

    @@unique([providerId, name])
}
