// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ==============================================================
//                            MODELS
// ==============================================================

// LoanProvider: Represents an entity that offers loans (e.g., a bank)
model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String                        @db.Text
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowMultipleProviderLoans Boolean                      @default(true)
  allowCrossProviderLoans   Boolean                      @default(false)

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
  scoringParameters           ScoringParameter[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  ledgerAccounts              LedgerAccount[]
}

// LoanProduct: Represents a specific type of loan offered by a provider
model LoanProduct {
  id                    String      @id @default(cuid())
  name                  String
  description           String      @db.Text
  icon                  String      @db.Text
  minLoan               Float       @default(0)
  maxLoan               Float       @default(0)
  duration              Int         @default(30) // in days
  status                String      @default("Active")
  allowMultipleLoans    Boolean     @default(false)
  serviceFeeEnabled     Boolean?
  dailyFeeEnabled       Boolean?
  penaltyRulesEnabled   Boolean?
  serviceFee            String?     @db.Text // JSON stored as string
  dailyFee              String?     @db.Text // JSON stored as string
  penaltyRules          String?     @db.Text // JSON stored as string
  
  dataProvisioningEnabled    Boolean?
  dataProvisioningConfigId   String?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                  String
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([name, providerId])
}

// Loan: Represents an instance of a loan taken by a borrower
model Loan {
  id               String   @id @default(cuid())
  borrowerId       String
  providerId       String
  productId        String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float    @default(0)
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String
  repaidAmount     Float?

  // Relationships
  payments         Payment[]
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
}

// Borrower: Represents an individual who can take out loans
model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

// Payment: Represents a repayment made for a loan
model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id])
}

// User: Represents an admin or staff user of the system
model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roleId        String
  loanProviderId String?

  // Relationships
  role          Role          @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

// Role: Defines permissions for different user types
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String   @db.Text
  users       User[]
}

// ProvisionedData: Stores raw data uploaded for borrowers
model ProvisionedData {
  borrowerId  String
  configId    String
  data        String   @db.Text
  createdAt   DateTime @default(now())
  
  // Relationships
  borrower    Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@id([borrowerId, configId])
}

// DataProvisioningConfig: Defines the schema for uploaded data files
model DataProvisioningConfig {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  columns     String   @db.Text // JSON stored as string
  
  // Relationships
  provider        LoanProvider          @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploads         DataProvisioningUpload[]
  products        LoanProduct[]
  provisionedData ProvisionedData[]
}

// DataProvisioningUpload: Logs file uploads for data provisioning
model DataProvisioningUpload {
  id          String   @id @default(cuid())
  configId    String
  fileName    String
  rowCount    Int
  uploadedAt  DateTime @default(now())
  uploadedBy  String

  // Relationships
  config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


// ScoringParameter: Defines a parameter used in credit scoring
model ScoringParameter {
  id          String @id @default(cuid())
  providerId  String
  name        String
  weight      Int

  // Relationships
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules    Rule[]
}

// Rule: Defines a specific rule within a ScoringParameter
model Rule {
  id          String @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

// ScoringConfigurationHistory: Logs versions of scoring configurations
model ScoringConfigurationHistory {
    id          String   @id @default(cuid())
    providerId  String
    parameters  String   @db.Text
    savedAt     DateTime @default(now())
    
    // Relationships
    provider        LoanProvider                    @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

// ScoringConfigurationProduct: Join table for history and products
model ScoringConfigurationProduct {
    configId   String
    productId  String
    assignedBy String
    assignedAt DateTime @default(now())

    // Relationships
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@id([configId, productId])
}

// LoanAmountTier: Defines loan amounts based on credit score ranges
model LoanAmountTier {
  id          String @id @default(cuid())
  productId   String
  fromScore   Int
  toScore     Int
  loanAmount  Float

  // Relationships
  product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// LedgerAccount: For financial tracking
model LedgerAccount {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  type        String   // 'Receivable' or 'Received'
  category    String   // 'Principal', 'Interest', 'Penalty'
  balance     Float    @default(0)

  // Relationships
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
