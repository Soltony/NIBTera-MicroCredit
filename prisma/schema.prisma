// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                       @id @default(cuid())
  name                        String                       @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                          @default(0)
  accountNumber               String?
  initialBalance              Float?
  allowMultipleProviderLoans  Boolean                      @default(false)
  allowCrossProviderLoans     Boolean                      @default(false)
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
  users                       User[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  status                      String                       @default("Active")
  serviceFee                  String?
  dailyFee                    String?
  penaltyRules                String?
  serviceFeeEnabled           Boolean                      @default(true)
  dailyFeeEnabled             Boolean                      @default(true)
  penaltyRulesEnabled         Boolean                      @default(true)
  dataProvisioningEnabled     Boolean                      @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  loans                       Loan[]
  scoringHistory              ScoringConfigurationHistory[]
  loanAmountTiers             LoanAmountTier[]

  @@unique([name, providerId])
}

model LoanAmountTier {
    id          String      @id @default(cuid())
    productId   String
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore   Int
    toScore     Int
    loanAmount  Float
}

model DataProvisioningConfig {
  id                          String                       @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                        String
  columns                     String
  uploads                     DataProvisioningUpload[]
  products                    LoanProduct[]
}

model DataProvisioningUpload {
    id          String      @id @default(cuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime    @default(now())
    uploadedBy  String
}

model ProvisionedData {
    id          String      @id @default(cuid())
    customerId  String
    configId    String
    data        String // JSON string of the row data
    createdAt   DateTime    @default(now())

    @@unique([customerId, configId])
}

model ScoringParameter {
  id          String       @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  weight      Int
  rules       Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
    id              String          @id @default(cuid())
    providerId      String
    provider        LoanProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
    savedAt         DateTime        @default(now())
    parameters      String          // JSON string of ScoringParameter[]
    appliedProducts LoanProduct[]
}

model Loan {
  id             String       @id @default(cuid())
  customerId     String
  customer       Customer     @relation(fields: [customerId], references: [id])
  providerId     String
  provider       LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId      String
  product        LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanAmount     Float
  serviceFee     Float
  penaltyAmount  Float
  disbursedDate  DateTime
  dueDate        DateTime
  repaymentStatus String
  repaidAmount   Float?       @default(0)
  payments       Payment[]
}

model Payment {
    id                              String      @id @default(cuid())
    loanId                          String
    loan                            Loan        @relation(fields: [loanId], references: [id])
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float?
}

model Customer {
  id              String            @id @default(cuid())
  age             Int
  monthlyIncome   Float
  gender          String
  educationLevel  String
  loanHistory     String // JSON: { totalLoans: number; onTimeRepayments: number }
  loans           Loan[]
  provisionedData ProvisionedData[]
}

model User {
  id             String        @id @default(cuid())
  fullName       String
  email          String        @unique
  phoneNumber    String        @unique
  password       String
  roleId         String
  role           Role          @relation(fields: [roleId], references: [id])
  status         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string for permissions
  users       User[]
}

model LedgerAccount {
    id          String      @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float       @default(0)

    @@unique([providerId, name])
}
