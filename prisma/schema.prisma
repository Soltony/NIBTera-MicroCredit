// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                         String                    @id @default(cuid())
  name                       String                    @unique
  icon                       String
  colorHex                   String?
  displayOrder               Int
  accountNumber              String?
  initialBalance             Float?
  allowMultipleProviderLoans Boolean                   @default(false)
  allowCrossProviderLoans    Boolean                   @default(false)
  products                   LoanProduct[]
  users                      User[]
  dataProvisioningConfigs    DataProvisioningConfig[]
  scoringParameters          ScoringParameter[]
  scoringHistory             ScoringConfigurationHistory[]
  ledgerAccounts             LedgerAccount[]
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                       @default("Active") // Active, Disabled
  allowMultipleLoans          Boolean                      @default(false)
  serviceFee                  String? // JSON: { type: 'fixed' | 'percentage', value: number }
  dailyFee                    String? // JSON: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRules                String? // JSON: [{ fromDay: number, toDay: number | null, type: 'fixed' | 'percentageOfPrincipal' | 'percentageOfCompound', value: number }]
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  scoringConfigurations       ScoringConfigurationProduct[]
  loanAmountTiers             LoanAmountTier[]
  loans                       Loan[]

  @@unique([name, providerId])
}

model LoanAmountTier {
    id          String      @id @default(cuid())
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    fromScore   Int
    toScore     Int
    loanAmount  Float
}

model Loan {
  id              String        @id @default(cuid())
  borrower        Borrower      @relation(fields: [borrowerId], references: [id])
  borrowerId      String
  provider        LoanProvider  @relation(fields: [providerId], references: [id])
  providerId      String
  product         LoanProduct   @relation(fields: [productId], references: [id])
  productId       String
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float         @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String        // Unpaid, Paid, Defaulted
  repaidAmount    Float?
  payments        Payment[]

  @@index([borrowerId])
}

model Payment {
  id                              String   @id @default(cuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
}

// User and Role Management
model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        // Active, Inactive
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string for permissions
  users       User[]
}


model Borrower {
  id              String            @id
  loans           Loan[]
  provisionedData ProvisionedData[]
  createdAt       DateTime          @default(now())
}


model ProvisionedData {
  id          String      @id @default(cuid())
  borrower    Borrower    @relation(fields: [borrowerId], references: [id])
  borrowerId  String
  config      DataProvisioningConfig @relation(fields: [configId], references: [id])
  configId    String
  data        String // JSON string of the raw data row
  createdAt   DateTime    @default(now())

  @@unique([borrowerId, configId])
}


// Configuration entities
model DataProvisioningConfig {
    id              String          @id @default(cuid())
    provider        LoanProvider    @relation(fields: [providerId], references: [id])
    providerId      String
    name            String
    columns         String // JSON: { name: string, type: 'string' | 'number', isIdentifier: boolean }[]
    uploads         DataProvisioningUpload[]
    provisionedData ProvisionedData[]
    loanProducts    LoanProduct[]
}

model DataProvisioningUpload {
    id          String          @id @default(cuid())
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime        @default(now())
}

model ScoringParameter {
    id          String @id @default(cuid())
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    providerId  String
    name        String
    weight      Int
    rules       ScoringRule[]
}

model ScoringRule {
    id          String          @id @default(cuid())
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId String
    field       String
    condition   String // e.g., '>', '<', '==', 'between'
    value       String // Can be a single value or 'min-max' for between
    score       Int
}

model ScoringConfigurationHistory {
    id             String                        @id @default(cuid())
    provider       LoanProvider                  @relation(fields: [providerId], references: [id])
    providerId     String
    parameters     String // JSON string of ScoringParameter[] at the time of saving
    savedAt        DateTime                      @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id])
    configId    String
    product     LoanProduct                   @relation(fields: [productId], references: [id])
    productId   String
    assignedBy  String // User ID
    assignedAt  DateTime                      @default(now())
}

model LedgerAccount {
  id         String       @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  type       String // Receivable, Received
  category   String // Principal, Interest, Penalty
  balance    Float        @default(0)
}
