
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model LoanProvider {
  id                        String                     @id @default(cuid())
  name                      String                     @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int                        @default(0)
  accountNumber             String?
  startingCapital           Float
  initialBalance            Float
  allowCrossProviderLoans   Boolean                    @default(false)
  nplThresholdDays          Int                        @default(90) // New field for NPL threshold
  products                  LoanProduct[]
  users                     User[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  ledgerAccounts            LedgerAccount[]
  journalEntries            JournalEntry[]
  termsAndConditions        TermsAndConditions[]

  @@index([name])
}

model LoanProduct {
  id                        String                     @id @default(cuid())
  provider                  LoanProvider               @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                String
  name                      String
  description               String?
  icon                      String
  minLoan                   Float?
  maxLoan                   Float?
  duration                  Int?
  status                    String                     @default("Active") // e.g., Active, Disabled
  allowConcurrentLoans      Boolean                    @default(false)
  serviceFeeEnabled         Boolean?
  dailyFeeEnabled           Boolean?
  penaltyRulesEnabled       Boolean?
  dataProvisioningEnabled   Boolean?                   @default(false)
  serviceFee                String?
  dailyFee                  String?
  penaltyRules              String?
  eligibilityFilter         String?                    @db.NVarChar(Max)
  dataProvisioningConfigId  String?
  eligibilityUploadId       String?                    @unique
  eligibilityUpload         DataProvisioningUpload?    @relation(fields: [eligibilityUploadId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  loans                     Loan[]
  loanAmountTiers           LoanAmountTier[]
  requiredDocuments         RequiredDocument[]
  scoringConfigurations     ScoringConfigurationProduct[]
  applications              LoanApplication[]

  @@index([providerId])
}

model LoanAmountTier {
  id         String      @id @default(cuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float

  @@index([productId])
}

model Borrower {
  id              String             @id @default(cuid())
  status          String             @default("Active") // e.g., Active, NPL, Blacklisted
  loans           Loan[]
  agreements      BorrowerAgreement[]
  provisionedData ProvisionedData[]
  applications    LoanApplication[]

  @@index([status])
}

model Loan {
  id                String          @id @default-cuid()
  borrower          Borrower        @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  product           LoanProduct     @relation(fields: [productId], references: [id])
  productId         String
  loanAmount        Float
  serviceFee        Float
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String          // e.g., "Unpaid", "Paid"
  repaidAmount      Float?
  penaltyAmount     Float
  repaymentBehavior RepaymentBehavior?
  payments          Payment[]
  journalEntries    JournalEntry[]
  application       LoanApplication @relation(fields: [loanApplicationId], references: [id])
  loanApplicationId String          @unique

  @@index([borrowerId])
  @@index([productId])
  @@index([repaymentStatus])
}

enum RepaymentBehavior {
  EARLY
  ON_TIME
  LATE
}

model Payment {
  id                              String       @id @default(cuid())
  loan                            Loan         @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float
  journalEntry                    JournalEntry @relation(fields: [journalEntryId], references: [id])
  journalEntryId                  String       @unique

  @@index([loanId])
}

model User {
  id             String        @id @default(cuid())
  fullName       String
  email          String        @unique
  phoneNumber    String        @unique
  password       String
  role           Role          @relation(fields: [roleId], references: [id])
  roleId         String
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  status         String        @default("Active")
  createdAt      DateTime      @default(now())

  @@index([roleId])
  @@index([loanProviderId])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String @db.NVarChar(Max)
  users       User[]
}

model DataProvisioningConfig {
  id          String                  @id @default(cuid())
  provider    LoanProvider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  columns     String                  @db.NVarChar(Max)
  data        ProvisionedData[]
  uploads     DataProvisioningUpload[]

  @@index([providerId])
}

model DataProvisioningUpload {
    id          String @id @default(cuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
    data        ProvisionedData[]
    productFilter LoanProduct?
}

model ProvisionedData {
  id        String                  @id @default(cuid())
  borrower  Borrower                @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId String
  config    DataProvisioningConfig  @relation(fields: [configId], references: [id])
  configId  String
  data      String                  @db.NVarChar(Max)
  createdAt DateTime                @default(now())
  uploadId  String?
  upload    DataProvisioningUpload? @relation(fields: [uploadId], references: [id], onDelete: SetNull)

  @@unique([borrowerId, configId])
  @@index([uploadId])
}

model ScoringParameter {
  id         String   @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]

  @@index([providerId])
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  @@index([parameterId])
}

model ScoringConfigurationHistory {
    id              String @id @default(cuid())
    providerId      String
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    savedAt         DateTime @default(now())
    parameters      String @db.NVarChar(Max)
    appliedProducts ScoringConfigurationProduct[]

    @@index([providerId])
}

model ScoringConfigurationProduct {
    configId    String
    productId   String
    config      ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedAt  DateTime @default(now())
    assignedBy  String

    @@id([configId, productId])
    @@index([productId])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  action      String
  entity      String?
  entityId    String?
  details     String?  @db.NVarChar(Max)
  createdAt   DateTime @default(now())
  ipAddress   String?
  userAgent   String?  @db.NVarChar(Max)

  @@index([actorId])
  @@index([action])
  @@index([entityId])
  @@index([createdAt])
}

model LedgerAccount {
  id          String       @id @default(cuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  type        String       // "Receivable", "Received", "Income"
  category    String       // "Principal", "Interest", "Penalty", "ServiceFee", "Tax"
  balance     Float        @default(0)
  entries     LedgerEntry[]

  @@index([providerId])
}

model JournalEntry {
  id          String        @id @default(cuid())
  providerId  String
  provider    LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  loanId      String?
  loan        Loan?         @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  date        DateTime
  description String
  entries     LedgerEntry[]
  payment     Payment?

  @@index([providerId])
  @@index([loanId])
}

model LedgerEntry {
  id              String        @id @default(cuid())
  journalEntryId  String
  journalEntry    JournalEntry  @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  ledgerAccountId String
  ledgerAccount   LedgerAccount @relation(fields: [ledgerAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type            String        // "Debit" or "Credit"
  amount          Float

  @@index([journalEntryId])
  @@index([ledgerAccountId])
}

model RequiredDocument {
    id                 String   @id @default(cuid())
    productId          String
    product            LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    name               String
    description        String?
    uploadedDocuments  UploadedDocument[]

    @@index([productId])
}

model UploadedDocument {
    id                  String   @id @default(cuid())
    loanApplicationId   String
    loanApplication     LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)
    requiredDocumentId  String
    requiredDocument    RequiredDocument @relation(fields: [requiredDocumentId], references: [id], onDelete: Cascade)
    fileName            String
    fileType            String
    fileContent         String   @db.NVarChar(Max)
    status              String   @default("PENDING") // PENDING, APPROVED, REJECTED
    reviewedBy          String?
    reviewedAt          DateTime?

    @@unique([loanApplicationId, requiredDocumentId])
}

model LoanApplication {
    id                  String   @id @default(cuid())
    borrowerId          String
    borrower            Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    productId           String
    product             LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    loanAmount          Float?
    status              String   @default("PENDING_DOCUMENTS") // PENDING_DOCUMENTS, PENDING_REVIEW, NEEDS_REVISION, APPROVED, REJECTED, DISBURSED
    rejectionReason     String?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    uploadedDocuments   UploadedDocument[]
    loan                Loan?

    @@index([borrowerId])
    @@index([productId])
    @@index([status])
}

model Tax {
    id          String @id @default(cuid())
    name        String?
    rate        Float @default(0)
    appliedTo   String @default("[]") // JSON array of components: "serviceFee", "interest", "penalty"
}

model TermsAndConditions {
    id          String   @id @default(cuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    content     String   @db.NVarChar(Max)
    version     Int
    isActive    Boolean  @default(false)
    publishedAt DateTime
    agreements  BorrowerAgreement[]

    @@unique([providerId, version])
}

model BorrowerAgreement {
    id          String              @id @default(cuid())
    borrowerId  String
    borrower    Borrower            @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    termsId     String
    terms       TermsAndConditions  @relation(fields: [termsId], references: [id], onDelete-Cascade)
    acceptedAt  DateTime            @default(now())

    @@unique([borrowerId, termsId])
}
