// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Loan {
  id              String   @id @default(uuid())
  customerId      String
  providerId      String
  productId       String
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float    @default(0)
  repaidAmount    Float?   @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String

  customer Customer    @relation(fields: [customerId], references: [id])
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product  LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  payments Payment[]
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                     Loan[]
}

model LoanProduct {
  id                            String                        @id @default(uuid())
  providerId                    String
  name                          String
  description                   String?
  icon                          String
  minLoan                       Float                         @default(0)
  maxLoan                       Float                         @default(0)
  duration                      Int                           @default(30)
  status                        String                        @default("Active")
  allowMultipleLoans            Boolean                       @default(false)
  serviceFee                    String? // JSON stored as string
  dailyFee                      String? // JSON stored as string
  penaltyRules                  String? // JSON stored as string
  serviceFeeEnabled             Boolean                       @default(false)
  dailyFeeEnabled               Boolean                       @default(false)
  penaltyRulesEnabled           Boolean                       @default(false)
  dataProvisioningEnabled       Boolean                       @default(false)
  dataProvisioningConfigId      String?
  
  scoringHistories              ProductsOnScoringHistories[]
  provider                      LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dataProvisioningConfig        DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loans                         Loan[]
  loanAmountTiers               LoanAmountTier[]

  @@unique([name, providerId])
}

model LoanAmountTier {
    id        String      @id @default(uuid())
    productId String
    fromScore Int
    toScore   Int
    loanAmount Float
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductsOnScoringHistories {
  product          LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId        String
  scoringHistory   ScoringConfigurationHistory @relation(fields: [scoringHistoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scoringHistoryId String
  assignedAt       DateTime                    @default(now())
  assignedBy       String // User ID

  @@id([productId, scoringHistoryId])
}


model ScoringConfigurationHistory {
  id         String      @id @default(uuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  parameters String // JSON stored as string
  savedAt    DateTime      @default(now())
  appliedProducts ProductsOnScoringHistories[]
}

model ScoringParameter {
  id         String @id @default(uuid())
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  field       String
  condition   String
  value       String
  score       Int
}

model Customer {
  id              String            @id @default(uuid())
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String // JSON stored as string
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id         String   @id @default(uuid())
  customerId String
  configId   String
  data       String // JSON stored as string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([customerId, configId])
}

model DataProvisioningConfig {
    id          String @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name        String
    columns     String // JSON stored as string
    products    LoanProduct[]
    provisionedData ProvisionedData[]
    uploads     DataProvisioningUpload[]
}

model DataProvisioningUpload {
    id          String @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
}

model Payment {
  id                                String   @id @default(uuid())
  loanId                            String
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment   Float?
  loan                              Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  roleId        String
  status        String        @default("Active")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  loanProviderId String?
  
  role          Role          @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON stored as string
  users       User[]
}

model LedgerAccount {
  id          String @id @default(uuid())
  providerId  String
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  type        String // Receivable, Received
  category    String // Principal, Interest, Penalty
  balance     Float  @default(0)

  @@unique([providerId, name])
}
