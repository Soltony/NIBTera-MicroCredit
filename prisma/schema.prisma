// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

// Models

model LoanProvider {
    id                          String    @id @default(cuid())
    name                        String    @unique
    icon                        String    @db.NVarChar(Max)
    colorHex                    String?
    displayOrder                Int       @default(0)
    accountNumber               String?
    initialBalance              Float     @default(0)
    allowMultipleProviderLoans  Boolean   @default(false)
    allowCrossProviderLoans     Boolean   @default(false)

    // Relationships
    products                 LoanProduct[]
    users                    User[]
    scoringParameters        ScoringParameter[]
    dataProvisioningConfigs  DataProvisioningConfig[]
    scoringHistory           ScoringConfigurationHistory[]
    ledgerAccounts           LedgerAccount[]
}

model LoanProduct {
    id                          String    @id @default(cuid())
    name                        String
    description                 String?
    icon                        String    @db.NVarChar(Max)
    minLoan                     Float?
    maxLoan                     Float?
    duration                    Int?
    serviceFee                  String?
    dailyFee                    String?
    penaltyRules                String?
    status                      String    @default("Active") // Active, Disabled
    allowMultipleLoans          Boolean   @default(false)
    serviceFeeEnabled           Boolean?
    dailyFeeEnabled             Boolean?
    penaltyRulesEnabled         Boolean?
    dataProvisioningEnabled     Boolean?  @default(false)
    dataProvisioningConfigId    String?

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([name, providerId])
}

model Loan {
    id              String   @id @default(cuid())
    loanAmount      Float
    serviceFee      Float    @default(0)
    penaltyAmount   Float    @default(0)
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String // Paid, Unpaid
    repaidAmount    Float?

    // Relationships
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String
    payments         Payment[]
}

model Borrower {
    id    String @id @unique
    loans Loan[]
    data  ProvisionedData[]
}

model ProvisionedData {
    id        String   @id @default(cuid())
    data      String
    createdAt DateTime @default(now())

    // Relationships
    borrowerId String
    borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@unique([borrowerId, configId])
}


model DataProvisioningConfig {
    id         String   @id @default(cuid())
    name       String
    columns    String?
    uploads    DataProvisioningUpload[]

    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    products   LoanProduct[]
}


model DataProvisioningUpload {
    id         String   @id @default(cuid())
    fileName   String
    rowCount   Int
    uploadedAt DateTime @default(now())
    uploadedBy String

    // Relationships
    configId String
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}



model Payment {
    id                              String   @id @default(cuid())
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float?

    // Relationships
    loanId String
    loan   Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
    id          String @id @default(cuid())
    fromScore   Int
    toScore     Int
    loanAmount  Float

    // Relationships
    productId String
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    savedAt    DateTime @default(now())
    parameters String

    // Relationships
    providerId      String
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id String @id @default(cuid())
    assignedAt DateTime @default(now())
    assignedBy String

    // Relationships
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)

    @@unique([configId, productId])
}

model ScoringParameter {
    id       String @id @default(cuid())
    name     String
    weight   Int

    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    rules      Rule[]
}

model Rule {
    id          String @id @default(cuid())
    field       String
    condition   String
    value       String
    score       Int

    // Relationships
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    fullName      String
    email         String        @unique
    phoneNumber   String        @unique
    password      String
    status        String
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    
    // Relationships
    roleId        String
    role          Role          @relation(fields: [roleId], references: [id])
    loanProviderId String?
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions String

    // Relationships
    users       User[]
}

model LedgerAccount {
    id          String   @id @default(cuid())
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float    @default(0)

    // Relationships
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

    @@unique([name, providerId])
}
