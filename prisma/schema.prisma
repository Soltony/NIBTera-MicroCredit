// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String?                       @db.Text
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)

  // Relationships
  products                    LoanProduct[]
  users                       User[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringParameters           ScoringParameter[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  name                        String
  description                 String?
  icon                        String?                       @db.Text
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  serviceFee                  String?
  dailyFee                    String?
  penaltyRules                String?
  status                      String                        @default("Active") // Active, Disabled
  allowMultipleLoans          Boolean                       @default(false)
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}


model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id        String   @id @default(cuid())
  data      String
  createdAt DateTime @default(now())

  // Relationships
  borrowerId String
  borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  configId   String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([borrowerId, configId])
}

model DataProvisioningConfig {
  id         String   @id @default(cuid())
  name       String
  columns    String?
  providerId String

  // Relationships
  provider           LoanProvider                @relation(fields: [providerId], references: [id])
  uploads            DataProvisioningUpload[]
  provisionedData    ProvisionedData[]
}

model DataProvisioningUpload {
  id          String   @id @default(cuid())
  fileName    String
  rowCount    Int
  uploadedAt  DateTime @default(now())
  uploadedBy  String
  configId    String

  // Relationships
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model Loan {
  id              String   @id @default(cuid())
  borrowerId      String
  productId       String
  loanAmount      Float
  serviceFee      Float
  penaltyAmount   Float    @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String // Paid, Unpaid
  repaidAmount    Float?

  // Relationships
  product  LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction)
  borrower Borrower    @relation(fields: [borrowerId], references: [id])
  payments Payment[]
}

model Payment {
  id                                String   @id @default(cuid())
  loanId                            String
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id])
}

model ScoringConfigurationProduct {
  id         String   @id @default(cuid())
  configId   String
  productId  String
  assignedAt DateTime @default(now())
  assignedBy String

  // Relationships
  config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: NoAction)
  product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction)
  user      User                        @relation(fields: [assignedBy], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([configId, productId])
}

model ScoringConfigurationHistory {
  id          String   @id @default(cuid())
  providerId  String
  savedAt     DateTime @default(now())
  parameters  String

  // Relationships
  provider  LoanProvider                    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  name       String
  weight     Int

  // Relationships
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules    ScoringRule[]
}

model ScoringRule {
  id          String @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}


model LoanAmountTier {
  id         String  @id @default(cuid())
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float

  // Relationships
  product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model User {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  phoneNumber   String   @unique
  password      String
  status        String   @default("Active") // Active, Inactive
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  roleId                  String
  role                    Role     @relation(fields: [roleId], references: [id])
  loanProviderId          String?
  loanProvider            LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedScoringConfigs  ScoringConfigurationProduct[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String

  // Relationships
  users User[]
}


model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0)

    // Relationship
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
