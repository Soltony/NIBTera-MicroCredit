// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// MODELS

model LoanProvider {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String
  colorHex  String?
  displayOrder Int
  accountNumber String?
  initialBalance Float?

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  ledgerAccounts              LedgerAccount[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[] // Added inverse relation
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  name                        String
  description                 String
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String                        @default("Active") // Active, Disabled
  allowMultipleLoans          Boolean                       @default(false)

  // Fee and Penalty Fields (stored as JSON strings)
  serviceFeeEnabled           Boolean?
  serviceFee                  String? // JSON: { type: 'percentage' | 'fixed', value: number }
  dailyFeeEnabled             Boolean?
  dailyFee                    String? // JSON: { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean?
  penaltyRules                String? // JSON: { fromDay: number, toDay: number | null, type: 'fixed' | 'percentageOfPrincipal' | 'percentageOfCompound', value: number }[]
  
  // Data Provisioning
  dataProvisioningEnabled     Boolean?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationProduct ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}

model Loan {
  id               String   @id @default(cuid())
  borrowerId       String
  providerId       String
  productId        String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float    @default(0)
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String   @default("Unpaid") // Paid, Unpaid
  repaidAmount     Float?

  // Relationships
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  payments         Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id])
}

model Borrower {
  id            String            @id
  provisionedData ProvisionedData[]
  loans         Loan[]
}

model ProvisionedData {
    id         String      @id @default(cuid())
    borrowerId String
    configId   String
    data       String // JSON stored as a string
    createdAt  DateTime    @default(now())

    // Relationships
    borrower   Borrower    @relation(fields: [borrowerId], references: [id])
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction)
    
    @@unique([borrowerId, configId])
}


model ScoringConfigurationHistory {
  id          String   @id @default(cuid())
  providerId  String
  savedAt     DateTime @default(now())
  parameters  String // JSON string of ScoringParameter[]

  // Relationships
  provider    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String                      @id @default(cuid())
    configId   String
    productId  String
    assignedAt DateTime                    @default(now())
    assignedBy String
    
    // Relationships
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    product    LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DataProvisioningConfig {
    id        String   @id @default(cuid())
    providerId String
    name      String
    columns   String // Stored as a JSON string of DataColumn[]
    
    // Relationships
    provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
    loanProducts     LoanProduct[]
    provisionedData  ProvisionedData[]
    uploads          DataProvisioningUpload[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String
    
    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model ScoringParameter {
  id         String  @id @default(cuid())
  providerId String
  name       String
  weight     Int

  // Relationships
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  rules    Rule[]
}

model Rule {
  id          String @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  
  // Relationships
  parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
    id         String  @id @default(cuid())
    productId  String
    fromScore  Int
    toScore    Int
    loanAmount Float
    
    // Relationships
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model LedgerAccount {
    id         String   @id @default(cuid())
    providerId String
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float    @default(0.0)

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
}


// AUTHENTICATION AND AUTHORIZATION

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  roleId        String
  status        String        @default("Active")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  loanProviderId String?

  // Relationships
  role         Role          @relation(fields: [roleId], references: [id])
  loanProvider LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // Stored as a JSON string
  users       User[]
}
