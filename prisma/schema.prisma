// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


// MODELS

model Borrower {
  id String @id @default(cuid())
  
  // Relationships
  loans            Loan[]
  provisionedData  ProvisionedData[]
}


model User {
    id            String @id @default(cuid())
    fullName      String
    email         String   @unique
    phoneNumber   String   @unique
    password      String
    roleId        String
    status        String
    loanProviderId String?

    // Timestamps
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    
    // Relationships
    role          Role         @relation(fields: [roleId], references: [id], onDelete: NoAction)
    loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    permissions String

    // Relationships
    users       User[]
}


model LoanProvider {
    id                        String      @id @default(c25())
    name                      String      @unique
    icon                      String      @db.Text
    colorHex                  String
    displayOrder              Int
    accountNumber             String?
    initialBalance            Float
    allowCrossProviderLoans   Boolean     @default(false)

    // Timestamps
    createdAt                 DateTime    @default(now())
    updatedAt                 DateTime    @updatedAt
    
    // Relationships
    products                  LoanProduct[]
    users                     User[]
    scoringParameters         ScoringParameter[]
    dataProvisioningConfigs   DataProvisioningConfig[]
    ledgerAccounts            LedgerAccount[]
    scoringHistory            ScoringConfigurationHistory[]
    loans                     Loan[]
}


model LoanProduct {
    id                        String    @id @default(cuid())
    name                      String
    description               String
    icon                      String    @db.Text
    minLoan                   Float
    maxLoan                   Float
    duration                  Int
    status                    String
    allowMultipleLoans        Boolean   @default(false)
    serviceFeeEnabled         Boolean?
    serviceFee                String?   @db.Text
    dailyFeeEnabled           Boolean?
    dailyFee                  String?   @db.Text
    penaltyRulesEnabled       Boolean?
    penaltyRules              String?   @db.Text
    dataProvisioningEnabled   Boolean?
    dataProvisioningConfigId  String?

    // Timestamps
    createdAt                 DateTime  @default(now())
    updatedAt                 DateTime  @updatedAt

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
    providerId                  String
    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
}


model Loan {
    id              String @id @default(cuid())
    loanAmount      Float
    serviceFee      Float
    penaltyAmount   Float     @default(0)
    repaidAmount    Float?    @default(0)
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String // Paid, Unpaid
    
    // Timestamps
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relationships
    providerId       String
    productId        String
    borrowerId       String
    payments         Payment[]
    provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
}


model Payment {
  id            String   @id @default(cuid())
  loanId        String
  amount        Float
  date          DateTime @default(now())
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan          Loan     @relation(fields: [loanId], references: [id])
}


model LedgerAccount {
    id          String @id @default(cuid())
    providerId  String
    name        String
    type        String // Receivable, Received
    category    String // Principal, Interest, Penalty
    balance     Float  @default(0)
    
    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id])
}

// SCORING MODELS

model ScoringParameter {
    id          String @id @default(cuid())
    providerId  String
    name        String
    weight      Int
    
    // Relationships
    rules       Rule[]
    provider    LoanProvider @relation(fields: [providerId], references: [id])
}

model Rule {
    id          String @id @default(cuid())
    parameterId String
    field       String
    condition   String
    value       String
    score       Int
    
    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
    id          String @id @default(cuid())
    productId   String
    fromScore   Int
    toScore     Int
    loanAmount  Float
    
    // Relationships
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ScoringConfigurationHistory {
    id          String   @id @default(cuid())
    providerId  String
    savedAt     DateTime @default(now())
    parameters  String   @db.Text
    
    // Relationships
    provider        LoanProvider                   @relation(fields: [providerId], references: [id])
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String   @id @default(cuid())
    configId   String
    productId  String
    assignedBy String
    assignedAt DateTime @default(now())

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([configId, productId])
}


// DATA PROVISIONING MODELS

model DataProvisioningConfig {
    id         String   @id @default(cuid())
    providerId String
    name       String
    columns    String   @db.Text

    // Relationships
    provider        LoanProvider            @relation(fields: [providerId], references: [id])
    provisionedData ProvisionedData[]
    uploads         DataProvisioningUpload[]
}

model ProvisionedData {
    id         String   @id @default(cuid())
    borrowerId String
    configId   String
    data       String   @db.Text
    createdAt  DateTime @default(now())

    // Relationships
    borrower Borrower               @relation(fields: [borrowerId], references: [id])
    config   DataProvisioningConfig @relation(fields: [configId], references: [id])

    @@unique([borrowerId, configId])
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    configId   String
    fileName   String
    rowCount   Int
    uploadedBy String
    uploadedAt DateTime @default(now())

    // Relationships
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}
