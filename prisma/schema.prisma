
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id        String      @id @default(cuid())
  name      String      @unique
  icon      String
  colorHex  String?
  displayOrder Int
  accountNumber String?
  initialBalance Float   @default(0)
  allowMultipleProviderLoans Boolean @default(false)
  allowCrossProviderLoans Boolean @default(false)

  // Relationships
  products                  LoanProduct[]
  users                       User[]
  scoringParameters         ScoringParameter[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts            LedgerAccount[]
  scoringHistory            ScoringConfigurationHistory[]
  loans                       Loan[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float
  maxLoan                     Float
  duration                    Int
  status                      String
  allowMultipleLoans          Boolean                       @default(false)
  
  serviceFeeEnabled           Boolean?
  serviceFee                  String? // JSON stored as string: { type: 'percentage' | 'fixed', value: number }
  dailyFeeEnabled             Boolean?
  dailyFee                    String? // JSON stored as string: { type: 'percentage' | 'fixed', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRulesEnabled         Boolean?
  penaltyRules                String? // JSON stored as string: PenaltyRule[]
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistoryApplied       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}


model DataProvisioningConfig {
  id        String      @id @default(cuid())
  name      String
  columns   String      // Stored as JSON string

  // Relationships
  provider          LoanProvider @relation(fields: [providerId], references: [id])
  providerId        String
  products          LoanProduct[]
  provisionedData   ProvisionedData[]
  uploads           DataProvisioningUpload[]
}

model ProvisionedData {
    id         String      @id @default(cuid())
    borrowerId String
    configId   String
    data       String      // Stored as JSON string
    createdAt  DateTime    @default(now())

    // Relationships
    borrower   Borrower    @relation(fields: [borrowerId], references: [id])
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])

    @@unique([borrowerId, configId])
}

model Borrower {
    id              String    @id
    provisionedData ProvisionedData[]
    loans           Loan[]
}

model Loan {
  id               String       @id @default(cuid())
  borrowerId       String
  providerId       String
  productId        String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float        @default(0)
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String       // e.g., "Paid", "Unpaid", "Overdue"
  repaidAmount     Float?

  // Relationships
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction) // NoAction to prevent cycles
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction) // NoAction to prevent cycles
  payments         Payment[]
}

model Payment {
  id                String    @id @default(cuid())
  loanId            String
  amount            Float
  date              DateTime
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan              Loan      @relation(fields: [loanId], references: [id])
}


model ScoringParameter {
  id        String @id @default(cuid())
  name      String
  weight    Int
  
  // Relationships
  provider    LoanProvider @relation(fields: [providerId], references: [id])
  providerId  String
  rules       ScoringRule[]
}

model ScoringRule {
  id          String  @id @default(cuid())
  field       String
  condition   String  // e.g., '>', '<', '==', 'between'
  value       String  // For 'between', format as "min-max"
  score       Int
  
  // Relationships
  parameter     ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId   String
}

model LoanAmountTier {
    id          String  @id @default(cuid())
    fromScore   Int
    toScore     Int
    loanAmount  Float
    
    // Relationships
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
}

model ScoringConfigurationHistory {
  id          String   @id @default(cuid())
  savedAt     DateTime @default(now())
  parameters  String   // JSON string of ScoringParameter[]

  // Relationships
  providerId     String
  provider       LoanProvider @relation(fields: [providerId], references: [id])
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String                      @id @default(cuid())
    configId   String
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id])
    productId  String
    product    LoanProduct                   @relation(fields: [productId], references: [id])
    assignedAt DateTime                    @default(now())
    assignedBy String                      // User ID
    
    @@unique([configId, productId])
}

model DataProvisioningUpload {
    id         String   @id @default(cuid())
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id])
    fileName   String
    rowCount   Int
    uploadedAt DateTime @default(now())
    uploadedBy String   // User's name or ID
}

model User {
  id            String    @id @default(cuid())
  fullName      String
  email         String    @unique
  phoneNumber   String    @unique
  password      String
  status        String    // e.g., 'Active', 'Inactive'
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // JSON string of permissions

  // Relationships
  users       User[]
}

model LedgerAccount {
    id        String   @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id])
    name       String
    type       String   // Receivable or Received
    category   String   // Principal, Interest, Penalty
    balance    Float    @default(0)
}
