
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ================================================= //
//                 Loan Provider                     //
// ================================================= //
model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String                        @db.VarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  // Relations
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  users                       User[]
  loans                       Loan[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                       @id @default(cuid())
  provider                    LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId                  String
  name                        String
  description                 String?
  icon                        String                       @db.VarChar(MAX)
  minLoan                     Float                        @default(0)
  maxLoan                     Float                        @default(0)
  duration                    Int                          @default(30)
  allowMultipleLoans          Boolean                      @default(false)
  serviceFee                  String?
  dailyFee                    String?
  penaltyRules                String?
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  dataProvisioningEnabled     Boolean?                     @default(false)
  status                      String                       @default("Active")
  // Relations
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?      @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
}

model Loan {
  id                String         @id @default(cuid())
  borrower          Borrower       @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  provider          LoanProvider   @relation(fields: [providerId], references: [id])
  providerId        String
  product           LoanProduct    @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId         String
  loanAmount        Float
  repaidAmount      Float?         @default(0)
  serviceFee        Float          @default(0)
  penaltyAmount     Float          @default(0)
  repaymentStatus   String         @default("Unpaid") // e.g., Unpaid, Paid, Overdue
  disbursedDate     DateTime       @default(now())
  dueDate           DateTime
  // Relations
  payments          Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loan                            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId                          String
  amount                          Float
  date                            DateTime @default(now())
  outstandingBalanceBeforePayment Float?
}

// ================================================= //
//               Data Provisioning                   //
// ================================================= //
model DataProvisioningConfig {
  id          String              @id @default(cuid())
  provider    LoanProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  columns     String?
  // Relations
  products    LoanProduct[]
  uploads     DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id          String                 @id @default(cuid())
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime               @default(now())
}

model Borrower {
  id              String            @id
  loans           Loan[]
  provisionedData ProvisionedData[]
  createdAt       DateTime          @default(now())
}

model ProvisionedData {
  id          String                 @id @default(cuid())
  borrower    Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId  String
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  data        String?
  createdAt   DateTime               @default(now())

  @@unique([borrowerId, configId])
}

// ================================================= //
//                  Credit Scoring                   //
// ================================================= //

model ScoringParameter {
  id          String        @id @default(cuid())
  provider    LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  weight      Int
  // Relations
  rules       ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
  id        String      @id @default(cuid())
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  fromScore Int
  toScore   Int
  loanAmount Float
}

model ScoringConfigurationHistory {
  id              String                        @id @default(cuid())
  provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  parameters      String                        // JSON string of ScoringParameter[] at the time of saving
  savedAt         DateTime                      @default(now())
  // Relations
  appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
  id          String                        @id @default(cuid())
  config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId   String
  assignedBy  String
  assignedAt  DateTime                      @default(now())
}


// ================================================= //
//                   Access Control                  //
// ================================================= //

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // Relations
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  users       User[]
}

// ================================================= //
//                   Financials                      //
// ================================================= //
model LedgerAccount {
  id          String      @id @default(cuid())
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  type        String      // Receivable or Received
  category    String      // Principal, Interest, Penalty
  balance     Float       @default(0)
}
