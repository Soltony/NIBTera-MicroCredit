// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String?                       @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)
  products                    LoanProduct[]
  scoringHistory              ScoringConfigurationHistory[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  loans                       Loan[]
  users                       User[]
  scoringParameters           ScoringParameter[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(uuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                  String
  name                        String
  description                 String?
  icon                        String?                       @db.NVarChar(MAX)
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int                           @default(30)
  status                      String                        @default("Active")
  serviceFee                  String?
  dailyFee                    String?
  penaltyRules                String?
  serviceFeeEnabled           Boolean                       @default(true)
  dailyFeeEnabled             Boolean                       @default(true)
  penaltyRulesEnabled         Boolean                       @default(true)
  loans                       Loan[]
  scoringConfigurations       ScoringConfigurationHistory[]
  loanAmountTiers             LoanAmountTier[]

  @@unique([name, providerId])
}

model Loan {
  id               String       @id @default(uuid())
  customer         Customer     @relation(fields: [customerId], references: [id])
  customerId       String
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId       String
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId        String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String
  repaidAmount     Float?
  payments         Payment[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Customer {
  id              String            @id
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String?
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model Payment {
  id                                String   @id @default(uuid())
  loan                              Loan     @relation(fields: [loanId], references: [id])
  loanId                            String
  amount                            Float
  date                              DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                         DateTime @default(now())
}

model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  parameters      String
  savedAt         DateTime      @default(now())
  appliedProducts LoanProduct[]
}

model ScoringParameter {
  id         String       @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
  id         String      @id @default(uuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
}

// User and Role Models
model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  status        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String
  users       User[]
}

// Data Provisioning Models
model DataProvisioningConfig {
  id              String              @id @default(uuid())
  provider        LoanProvider        @relation(fields: [providerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  providerId      String
  name            String
  columns         String
  uploads         DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id           String                 @id @default(uuid())
  config       DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId     String
  fileName     String
  rowCount     Int
  uploadedAt   DateTime               @default(now())
  uploadedBy   String
}

model ProvisionedData {
  id         String                 @id @default(uuid())
  customer   Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   String
  data       String
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([customerId, configId])
}


// Financial Ledger Models
model LedgerAccount {
    id String @id @default(uuid())
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0.0)
}
