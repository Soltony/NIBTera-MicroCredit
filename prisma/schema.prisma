// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  fullName     String
  email        String  @unique
  phoneNumber  String  @unique
  password     String
  status       String // Active, Inactive
  roleId       String
  role         Role    @relation(fields: [roleId], references: [id])
  loanProviderId String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON string for permissions
  users       User[]
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)
  products                    LoanProduct[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringParameters           ScoringParameter[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
  users                       User[]                        @relation(fields: [loanProviderId], references: [id])
  loanProviderId              String?
}

model LoanProduct {
  id                      String      @id @default(uuid())
  providerId              String
  provider                LoanProvider @relation(fields: [providerId], references: [id])
  name                    String
  description             String?
  icon                    String
  minLoan                 Float
  maxLoan                 Float
  status                  String // Active, Disabled
  serviceFee              String // JSON
  serviceFeeEnabled       Boolean     @default(true)
  dailyFee                String // JSON
  dailyFeeEnabled         Boolean     @default(true)
  penaltyRules            String // JSON
  penaltyRulesEnabled     Boolean     @default(true)
  dataProvisioningEnabled Boolean     @default(false)
  dataProvisioningConfigId String?
  loans                   Loan[]
  loanAmountTiers         LoanAmountTier[]
  scoringHistory          ScoringConfigurationHistory[] @relation("ProductScoringHistory")

  @@unique([name, providerId])
}

model Customer {
    id              String @id @default(uuid())
    age             Int
    gender          String
    monthlyIncome   Float
    educationLevel  String
    loanHistory     String // JSON
    loans           Loan[]
    provisionedData ProvisionedData[]
}

model Loan {
    id                          String       @id @default(uuid())
    customerId                  String
    providerId                  String
    productId                   String
    loanAmount                  Float
    serviceFee                  Float
    penaltyAmount               Float
    disbursedDate               DateTime
    dueDate                     DateTime
    repaymentStatus             String // Paid, Unpaid
    repaidAmount                Float?
    customer                    Customer     @relation(fields: [customerId], references: [id])
    provider                    LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    product                     LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    payments                    Payment[]
}

model Payment {
    id                              String   @id @default(uuid())
    loanId                          String
    loan                            Loan     @relation(fields: [loanId], references: [id])
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float
}


model LoanAmountTier {
    id         String      @id @default(uuid())
    productId  String
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    fromScore  Int
    toScore    Int
    loanAmount Float
}


model DataProvisioningConfig {
    id          String   @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    name        String
    columns     String // JSON
    uploads     DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String      @id @default(uuid())
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime    @default(now())
}

model ProvisionedData {
    id          String      @id @default(uuid())
    customerId  String
    customer    Customer    @relation(fields: [customerId], references: [id])
    configId    String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    data        String // JSON
    createdAt   DateTime @default(now())
}


model ScoringParameter {
    id          String      @id @default(uuid())
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id])
    name        String
    weight      Int
    rules       ScoringParameterRule[]
}

model ScoringParameterRule {
    id          String      @id @default(uuid())
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field       String
    condition   String
    value       String
    score       Int
}

model ScoringConfigurationHistory {
    id              String        @id @default(uuid())
    providerId      String
    provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parameters      String
    savedAt         DateTime      @default(now())
    appliedProducts LoanProduct[] @relation("ProductScoringHistory")
}
