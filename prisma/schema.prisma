// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User and Role Management
model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String
  users       User[]
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // Relationships
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id], onDelete: NoAction) // Can't delete a role if users are assigned
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction)
}


// Core Loan Provider and Product Models
model LoanProvider {
  id           String @id @default(cuid())
  name         String @unique
  icon         String @default("Landmark")
  colorHex     String @default("#fdb913")
  displayOrder Int    @default(0)
  accountNumber String?
  initialBalance Float @default(0)

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters         ScoringParameter[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  ledgerAccounts              LedgerAccount[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
}


model LoanProduct {
  id                          String      @id @default(cuid())
  name                        String
  description                 String?
  icon                        String      @default("PersonStanding")
  minLoan                     Float       @default(0)
  maxLoan                     Float       @default(5000)
  duration                    Int         @default(30)
  status                      String      @default("Active")
  allowMultipleLoans          Boolean     @default(false)
  // Fee and Rule config stored as JSON strings
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  dataProvisioningEnabled     Boolean?
  
  // Relationships
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistoryLinks         ScoringConfigurationProduct[]

  @@unique([name, providerId])
}


model Loan {
  id                String   @id @default(cuid())
  borrowerId        String
  repaymentStatus   String   @default("Unpaid")
  loanAmount        Float
  serviceFee        Float
  penaltyAmount     Float    @default(0)
  repaidAmount      Float?   @default(0)
  disbursedDate     DateTime
  dueDate           DateTime

  // Relationships
  providerId         String
  provider           LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction) // NoAction to prevent cycles with Provider -> Product -> Loan
  productId          String
  product            LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction) // NoAction to prevent cycles

  payments        Payment[]
}


model Payment {
  id                                String   @id @default(cuid())
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment   Float?

  // Relationships
  loanId String
  loan   Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
}


// Borrower and Data Provisioning
model Borrower {
  id              String            @id
  provisionedData ProvisionedData[]
}


model DataProvisioningConfig {
  id         String   @id @default(cuid())
  name       String
  columns    String // JSON String of columns
  
  // Relationships
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  products        LoanProduct[]
  uploads         DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}


model DataProvisioningUpload {
  id          String   @id @default(cuid())
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  
  // Relationships
  configId String
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model ProvisionedData {
  borrowerId String
  configId   String
  data       String // JSON string
  createdAt  DateTime @default(now())

  // Relationships
  borrower Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@id([borrowerId, configId])
}


// Credit Scoring Engine Models
model ScoringParameter {
  id      String @id @default(cuid())
  name    String
  weight  Int

  // Relationships
  providerId String
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules      ScoringRule[]
}


model ScoringRule {
  id          String   @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int
  createdAt   DateTime @default(now())
  
  // Relationships
  parameterId String
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}


model LoanAmountTier {
  id         String  @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float
  
  // Relationships
  productId String
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model ScoringConfigurationHistory {
    id          String   @id @default(cuid())
    savedAt     DateTime @default(now())
    parameters  String   // JSON string of ScoringParameter[]

    // Relationships
    providerId  String
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String                      @id @default(cuid())

    // Relationships
    configId   String
    config     ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId  String
    product    LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    
    assignedBy String

    @@unique([configId, productId])
}

// Financial Ledger Models
model LedgerAccount {
    id        String   @id @default(cuid())
    name      String
    type      String   // Receivable or Received
    category  String   // Principal, Interest, Penalty
    balance   Float    @default(0)

    // Relationships
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
