
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id        String @id @default(cuid())
  name      String   @unique
  icon      String
  colorHex  String?
  displayOrder Int
  accountNumber String?
  initialBalance Float?

  // Relationships
  products                    LoanProduct[]
  users                       User[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  ledgerAccounts              LedgerAccount[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]

  @@map("loan_providers")
}

model LoanProduct {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  minLoan     Float
  maxLoan     Float
  duration    Int

  allowMultipleLoans Boolean @default(false)
  
  serviceFeeEnabled         Boolean?
  serviceFee                String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  
  dataProvisioningEnabled     Boolean?
  status                      String      @default("Active") // Active, Disabled
  
  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  dataProvisioningConfigId    String?

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
  @@map("loan_products")
}


model Borrower {
  id              String            @id @default(cuid())
  provisionedData ProvisionedData[]
  loans           Loan[]

  @@map("borrowers")
}

model ProvisionedData {
  id         String   @id @default(cuid())
  borrowerId String
  configId   String
  data       String
  createdAt  DateTime @default(now())

  // Relationships
  borrower Borrower @relation(fields: [borrowerId], references: [id])
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([borrowerId, configId])
  @@map("provisioned_data")
}

model Loan {
  id               String   @id @default(cuid())
  providerId       String
  productId        String
  borrowerId       String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float    @default(0)
  repaidAmount     Float?
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String // e.g., 'Paid', 'Unpaid'

  // Relationships
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  payments         Payment[]

  @@map("loans")
}

model Payment {
  id                              String   @id @default(cuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan Loan @relation(fields: [loanId], references: [id])

  @@map("payments")
}

model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  name       String
  weight     Int

  // Relationships
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules    Rule[]

  @@map("scoring_parameters")
}

model Rule {
  id          String @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)

  @@map("rules")
}


model DataProvisioningConfig {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  columns     String // Stored as JSON string

  // Relationships
  provider        LoanProvider                 @relation(fields: [providerId], references: [id], onDelete: NoAction)
  provisionedData ProvisionedData[]
  products        LoanProduct[]
  uploads         DataProvisioningUpload[]

  @@map("data_provisioning_configs")
}

model LoanAmountTier {
    id        String @id @default(cuid())
    productId String
    fromScore Int
    toScore   Int
    loanAmount Float

    // Relationships
    product LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("loan_amount_tiers")
}

model ScoringConfigurationHistory {
    id String @id @default(cuid())
    providerId String
    savedAt DateTime @default(now())
    parameters String // Stored as JSON string

    // Relationships
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
    appliedProducts ScoringConfigurationProduct[]

    @@map("scoring_configuration_history")
}

model ScoringConfigurationProduct {
    id          String   @id @default(cuid())
    configId    String
    productId   String
    assignedBy  String // User ID
    assignedAt  DateTime @default(now())

    // Relationships
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("scoring_configuration_products")
}


model User {
  id            String  @id @default(cuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String // e.g., 'Active', 'Inactive'
  createdAt     DateTime @default(now())

  // Relationships
  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  
  @@map("users")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions String // Stored as JSON string

  // Relationships
  users User[]

  @@map("roles")
}


model LedgerAccount {
    id         String   @id @default(cuid())
    providerId String
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float    @default(0)
    createdAt  DateTime @default(now())

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

    @@map("ledger_accounts")
}

model DataProvisioningUpload {
    id String @id @default(cuid())
    configId String
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String

    // Relationships
    config DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@map("data_provisioning_uploads")
}
