// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                    @id @default(cuid())
  name                      String                    @unique
  icon                      String                    @db.NVarChar(Max)
  colorHex                  String?
  displayOrder              Int                       @default(0)
  accountNumber             String?
  initialBalance            Float                     @default(0)
  allowCrossProviderLoans   Boolean                   @default(false)
  products                  LoanProduct[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  ledgerAccounts            LedgerAccount[]

  @@index([name])
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  providerId                  String
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name                        String
  description                 String?
  icon                        String                        @db.NVarChar(Max)
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String
  allowConcurrentLoans        Boolean                       @default(false)
  
  serviceFee                  String?
  dailyFee                    String?
  penaltyRules                String?
  
  serviceFeeEnabled           Boolean?
  dailyFeeEnabled             Boolean?
  penaltyRulesEnabled         Boolean?
  
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id])

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurations       ScoringConfigurationProduct[]

  @@unique([name, providerId])
  @@index([providerId])
}

model LoanAmountTier {
  id          String      @id @default(cuid())
  productId   String
  product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  fromScore   Int
  toScore     Int
  loanAmount  Float

  @@index([productId])
}

model Loan {
  id              String      @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id])
  borrowerId      String
  borrower        Borrower     @relation(fields: [borrowerId], references: [id])
  productId       String
  product         LoanProduct @relation(fields: [productId], references: [id])
  loanAmount      Float
  serviceFee      Float       @default(0)
  penaltyAmount   Float       @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String      // Paid, Unpaid
  repaidAmount    Float?      @default(0)
  payments        Payment[]

  @@index([borrowerId])
  @@index([productId])
  @@index([providerId])
}

model Borrower {
    id String @id
    provisionedData ProvisionedData[]
    loans Loan[]
}


model ProvisionedData {
    id         String      @id @default(cuid())
    borrowerId String
    borrower   Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    configId   String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    data       String      @db.NVarChar(Max)
    createdAt  DateTime    @default(now())

    @@unique([borrowerId, configId])
    @@index([borrowerId])
}


model Payment {
  id              String   @id @default(cuid())
  loanId          String
  loan            Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  amount          Float
  date            DateTime
  outstandingBalanceBeforePayment Float?

  @@index([loanId])
}


model User {
  id            String       @id @default(cuid())
  fullName      String
  email         String       @unique
  phoneNumber   String       @unique
  password      String
  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  status        String       // Active, Inactive
  loanProviderId String?
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([loanProviderId])
}


model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String   @db.NVarChar(Max) // JSON string of permissions
  users       User[]
}

model ScoringParameter {
    id         String   @id @default(cuid())
    providerId String
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    name       String
    weight     Int
    rules      ScoringRule[]

    @@index([providerId])
}

model ScoringRule {
    id          String           @id @default(cuid())
    parameterId String
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    field       String
    condition   String
    value       String
    score       Int

    @@index([parameterId])
}


model ScoringConfigurationHistory {
    id              String                        @id @default(cuid())
    providerId      String
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    parameters      String                        @db.NVarChar(Max) // JSON string
    savedAt         DateTime                      @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id        String                      @id @default(cuid())
    configId  String
    config    ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId String
    product   LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
    assignedAt DateTime                   @default(now())
    assignedBy String
    
    @@unique([configId, productId])
}


model DataProvisioningConfig {
  id              String      @id @default(cuid())
  providerId      String
  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name            String
  columns         String      @db.NVarChar(Max) // JSON string of column definitions
  products        LoanProduct[]
  uploads         DataProvisioningUpload[]
  provisionedData ProvisionedData[]
  
  @@index([providerId])
}

model DataProvisioningUpload {
  id          String      @id @default(cuid())
  configId    String
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  fileName    String
  rowCount    Int
  uploadedAt  DateTime    @default(now())
  uploadedBy  String
  
  @@index([configId])
}

model LedgerAccount {
  id         String                 @id @default(cuid())
  providerId String
  provider   LoanProvider           @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name       String
  type       LedgerAccountType
  category   LedgerAccountCategory
  balance    Float                  @default(0)

  @@index([providerId])
}

enum LedgerAccountType {
  Receivable
  Received
  Income
}

enum LedgerAccountCategory {
  Principal
  Interest
  ServiceFee
  Penalty
}
