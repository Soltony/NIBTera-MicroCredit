
datasource db {
  provider     = "sqlserver"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String  @id @default(uuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String
  role          Role    @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanProviderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([loanProviderId])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String
  users       User[]
}

model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String                        @db.NVarChar(Max)
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                      @default(true)
  products                  LoanProduct[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  users                     User[]
  scoringParameters         ScoringParameter[]
  ledgerAccounts            LedgerAccount[]
}

model Loan {
  id                  String   @id @default(uuid())
  customer            Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customerId          String
  provider            LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId          String
  product             LoanProduct @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId           String
  loanAmount          Float
  serviceFee          Float
  penaltyAmount       Float    @default(0)
  disbursedDate       DateTime @default(now())
  dueDate             DateTime
  repaymentStatus     String
  repaidAmount        Float?   @default(0)
  payments            Payment[]

  @@index([customerId])
  @@index([providerId])
  @@index([productId])
}

model LoanProduct {
  id           String  @id @default(uuid())
  provider     LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId   String
  name         String
  description  String?
  icon         String  @db.NVarChar(Max)
  minLoan      Float?
  maxLoan      Float?
  status       String
  serviceFee   String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number }
  dailyFee     String? // JSON stored as string: { type: 'fixed' | 'percentage', value: number, calculationBase: 'principal' | 'compound' }
  penaltyRules String? // JSON stored as string: PenaltyRule[]
  serviceFeeEnabled Boolean @default(true)
  dailyFeeEnabled Boolean @default(true)
  penaltyRulesEnabled Boolean @default(true)
  dataProvisioningEnabled Boolean @default(false)
  dataProvisioningConfigId String?
  dataProvisioningConfig DataProvisioningConfig? @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loans        Loan[]
  loanAmountTiers LoanAmountTier[]
  scoringHistory ScoringConfigurationHistory[] @relation("LoanProductToScoringHistory")

  @@unique([name, providerId])
  @@index([providerId])
  @@index([dataProvisioningConfigId])
}

model LoanAmountTier {
    id        String @id @default(uuid())
    product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    fromScore Int
    toScore   Int
    loanAmount Float
    
    @@index([productId])
}

model Customer {
  id             String   @id
  age            Int
  gender         String
  monthlyIncome  Float
  educationLevel String
  loanHistory    String // JSON stored as string
  loans          Loan[]
  provisionedData ProvisionedData[]
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime @default(now())
  outstandingBalanceBeforePayment Float?

  @@index([loanId])
}

model ScoringParameter {
  id         String  @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      Rule[]
  
  @@index([providerId])
}

model Rule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  
  @@index([parameterId])
}

model ScoringConfigurationHistory {
    id String @id @default(uuid())
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId String
    savedAt DateTime @default(now())
    parameters String // JSON of ScoringParameter[]
    appliedProducts LoanProduct[] @relation("LoanProductToScoringHistory")

    @@index([providerId])
}


model DataProvisioningConfig {
  id           String @id @default(uuid())
  provider     LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId   String
  name         String
  columns      String // JSON of DataColumn[]
  products     LoanProduct[]
  provisionedData ProvisionedData[]
  uploads      DataProvisioningUpload[]

  @@index([providerId])
}

model DataProvisioningUpload {
    id       String @id @default(uuid())
    config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId String
    fileName String
    rowCount Int
    uploadedAt DateTime @default(now())
    uploadedBy String
    
    @@index([configId])
}

model ProvisionedData {
    id         String                 @id @default(uuid())
    customer   Customer               @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    customerId String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    configId   String
    data       String                 @db.NVarChar(Max)
    createdAt  DateTime               @default(now())
    
    @@unique([customerId, configId])
    @@index([customerId])
    @@index([configId])
}

model LedgerAccount {
    id String @id @default(uuid())
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0)
    
    @@index([providerId])
}
