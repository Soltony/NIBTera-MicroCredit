// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ==============================================================
// User and Access Control Models
// ==============================================================

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roleId        String
  loanProviderId String?

  // Relationships
  role          Role          @relation(fields: [roleId], references: [id], onDelete: NoAction)
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: SetNull)
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  permissions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]
}


// ==============================================================
// Loan and Provider Models
// ==============================================================

model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float                         @default(0)
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(false)


  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
  ledgerAccounts              LedgerAccount[]
}


model LoanProduct {
  id                          String    @id @default(cuid())
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  status                      String    @default("Active")
  allowMultipleLoans          Boolean   @default(false)
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?

  // Relationships
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringHistory              ScoringConfigurationProduct[]
  
  @@unique([name, providerId])
}


model Loan {
  id               String   @id @default(cuid())
  borrowerId       String
  providerId       String
  productId        String
  loanAmount       Float
  serviceFee       Float
  penaltyAmount    Float    @default(0)
  repaidAmount     Float?
  disbursedDate    DateTime
  dueDate          DateTime
  repaymentStatus  String

  // Relationships
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  payments         Payment[]
  borrower         Borrower     @relation(fields: [borrowerId], references: [id], onDelete: NoAction)
}


model Payment {
  id                                String   @id @default(cuid())
  loanId                            String
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment   Float?

  // Relationships
  loan                              Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model Borrower {
  id              String            @id @default(cuid())
  loans           Loan[]
  provisionedData ProvisionedData[]
}


// ==============================================================
// Scoring and Data Provisioning Models
// ==============================================================

model ScoringParameter {
  id         String @id @default(cuid())
  providerId String
  name       String
  weight     Int

  // Relationships
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  rules      Rule[]
}

model Rule {
  id          String  @id @default(cuid())
  parameterId String
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
}

model LoanAmountTier {
    id         String  @id @default(cuid())
    productId  String
    fromScore  Int
    toScore    Int
    loanAmount Float
    
    // Relationships
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    providerId String
    savedAt    DateTime @default(now())
    parameters String // JSON string of parameters at save time

    // Relationships
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String   @id @default(cuid())
    configId    String
    productId   String
    assignedAt  DateTime @default(now())
    assignedBy  String

    // Relationships
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model DataProvisioningConfig {
    id        String    @id @default(cuid())
    providerId String
    name      String
    columns   String // JSON string representing the columns

    // Relationships
    provider        LoanProvider               @relation(fields: [providerId], references: [id], onDelete: Cascade)
    products        LoanProduct[]
    uploads         DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id          String   @id @default(cuid())
    configId    String
    fileName    String
    rowCount    Int
    uploadedAt  DateTime @default(now())
    uploadedBy  String

    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
}


model ProvisionedData {
    borrowerId String
    configId   String
    data       String // JSON string of the row data
    createdAt  DateTime @default(now())

    // Relationships
    borrower   Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

    @@id([borrowerId, configId])
}


// ==============================================================
// Financial Ledger Models
// ==============================================================

model LedgerAccount {
    id        String  @id @default(cuid())
    providerId String
    name      String
    type      String // Receivable or Received
    category  String // Principal, Interest, Penalty
    balance   Float   @default(0)

    // Relationships
    provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
