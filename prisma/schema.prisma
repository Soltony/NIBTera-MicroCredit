// datasource and generator definitions...
datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Main Models
model User {
    id           String   @id @default(uuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    fullName     String
    email        String   @unique
    phoneNumber  String   @unique
    password     String
    status       String
    // Relationships
    role         Role     @relation(fields: [roleId], references: [id])
    roleId       String
    loanProvider LoanProvider? @relation(fields: [loanProviderId], references: [id])
    loanProviderId String?
}

model Role {
    id          String @id @default(uuid())
    name        String @unique
    permissions String @db.Text
    // Relationships
    users       User[]
}

model LoanProvider {
    id                      String        @id @default(uuid())
    name                    String        @unique
    icon                    String?       @db.Text
    colorHex                String?
    displayOrder            Int
    accountNumber           String?
    initialBalance          Float         @default(0)
    allowMultipleProviderLoans Boolean    @default(false)
    allowCrossProviderLoans Boolean     @default(false)

    // Relationships
    users                   User[]
    products                LoanProduct[]
    dataProvisioningConfigs DataProvisioningConfig[]
    scoringParameters       ScoringParameter[]
    scoringHistory          ScoringConfigurationHistory[]
    ledgerAccounts          LedgerAccount[]
}


model LoanProduct {
    id                        String   @id @default(uuid())
    name                      String
    description               String?
    icon                      String?  @db.Text
    minLoan                   Float?
    maxLoan                   Float?
    duration                  Int?
    status                    String
    // Fee Structures
    allowMultipleLoans        Boolean  @default(false)
    serviceFeeEnabled         Boolean?
    serviceFee                String?  @db.Text
    dailyFeeEnabled           Boolean?
    dailyFee                  String?  @db.Text
    penaltyRulesEnabled       Boolean?
    penaltyRules              String?  @db.Text
    // Data Provisioning
    dataProvisioningEnabled   Boolean?
    dataProvisioningConfigId  String?

    // Relationships
    provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
    providerId                  String

    loans                       Loan[]
    loanAmountTiers             LoanAmountTier[]
    scoringConfigurationProducts ScoringConfigurationProduct[]
    dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

    @@unique([name, providerId])
}


model Loan {
    id              String   @id @default(uuid())
    loanAmount      Float
    serviceFee      Float
    penaltyAmount   Float    @default(0)
    repaidAmount    Float?
    disbursedDate   DateTime
    dueDate         DateTime
    repaymentStatus String

    // Relationships
    product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
    productId        String
    borrower         Borrower     @relation(fields: [borrowerId], references: [id])
    borrowerId       String
    payments         Payment[]
    provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
    providerId       String
}


model Payment {
    id                              String   @id @default(uuid())
    amount                          Float
    date                            DateTime
    outstandingBalanceBeforePayment Float?

    // Relationships
    loan Loan @relation(fields: [loanId], references: [id])
    loanId String
}

model Borrower {
    id              String            @id
    provisionedData ProvisionedData[]
    loans           Loan[]
}


// Data & Scoring Models
model DataProvisioningConfig {
    id          String   @id @default(uuid())
    name        String
    columns     String   @db.Text
    // Relationships
    provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId  String
    uploads     DataProvisioningUpload[]
    products    LoanProduct[]
}

model ProvisionedData {
    id          String   @id @default(uuid())
    data        String   @db.Text
    createdAt   DateTime @default(now())

    // Relationships
    borrower    Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    borrowerId  String
    config      DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId    String

    @@unique([borrowerId, configId])
}


model DataProvisioningUpload {
    id          String   @id @default(uuid())
    fileName    String
    rowCount    Int
    uploadedBy  String
    uploadedAt  DateTime @default(now())
    // Relationships
    config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
}

model ScoringParameter {
    id        String @id @default(uuid())
    name      String
    weight    Int
    // Relationships
    provider  LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    rules     Rule[]
}

model Rule {
    id          String   @id @default(uuid())
    field       String
    condition   String
    value       String
    score       Int
    // Relationships
    parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    parameterId String
}


model ScoringConfigurationHistory {
    id         String   @id @default(uuid())
    savedAt    DateTime @default(now())
    parameters String   @db.Text
    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String   @id @default(uuid())
    configId   String
    productId  String
    assignedBy String
    assignedAt DateTime @default(now())

    // Relationships
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([configId, productId])
}


model LoanAmountTier {
    id          String   @id @default(uuid())
    fromScore   Int
    toScore     Int
    loanAmount  Float
    // Relationships
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
}


model LedgerAccount {
    id         String   @id @default(uuid())
    name       String
    type       String // Receivable, Received
    category   String // Principal, Interest, Penalty
    balance    Float    @default(0)
    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
}
