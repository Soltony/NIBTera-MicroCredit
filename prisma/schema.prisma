// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String
  users       User[]
}

model User {
  id            String  @id @default(uuid())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  role          Role     @relation(fields: [roleId], references: [id])
  roleId        String
  
  loanProvider   LoanProvider? @relation(fields: [loanProviderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loanProviderId String?
}


model LoanProvider {
  id                        String                        @id @default(uuid())
  name                      String                        @unique
  icon                      String
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                      @default(true)
  
  users                     User[]
  products                  LoanProduct[]
  scoringHistory            ScoringConfigurationHistory[]
  dataProvisioningConfigs   DataProvisioningConfig[]
  loans                     Loan[]
  scoringParameters         ScoringParameter[]
  ledgerAccounts            LedgerAccount[]
}

model LoanProduct {
  id                      String   @id @default(uuid())
  name                    String
  description             String?
  icon                    String
  minLoan                 Float?
  maxLoan                 Float?
  status                  String
  serviceFee              String?  // JSON stored as string
  dailyFee                String?  // JSON stored as string
  penaltyRules            String?  // JSON stored as string
  serviceFeeEnabled       Boolean  @default(true)
  dailyFeeEnabled         Boolean  @default(true)
  penaltyRulesEnabled     Boolean  @default(true)
  
  provider                LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId              String
  
  loans                   Loan[]
  scoringHistory          ScoringConfigurationHistory[]
  loanAmountTiers         LoanAmountTier[]

  @@unique([name, providerId])
}


model Loan {
  id                  String        @id @default(uuid())
  loanAmount          Float
  serviceFee          Float
  penaltyAmount       Float         @default(0)
  disbursedDate       DateTime      @default(now())
  dueDate             DateTime
  repaymentStatus     String
  repaidAmount        Float?        @default(0)
  
  provider            LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId          String
  product             LoanProduct   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId           String
  
  payments            Payment[]
  
  customer            Customer      @relation(fields: [customerId], references: [id])
  customerId          String
}

model Customer {
  id             String    @id @default(uuid())
  age            Int
  monthlyIncome  Float
  gender         String
  educationLevel String
  loanHistory    String // JSON stored as string
  
  loans          Loan[]
  provisionedData ProvisionedData[]
}


model Payment {
  id                                String   @id @default(uuid())
  amount                            Float
  date                              DateTime @default(now())
  outstandingBalanceBeforePayment   Float?
  
  loan                              Loan     @relation(fields: [loanId], references: [id])
  loanId                            String
}


model ScoringConfigurationHistory {
  id              String        @id @default(uuid())
  savedAt         DateTime      @default(now())
  parameters      String // JSON stored as string

  provider        LoanProvider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      String
  appliedProducts LoanProduct[]
}

model ScoringParameter {
  id         String  @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String   @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model LoanAmountTier {
    id          String      @id @default(uuid())
    product     LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    fromScore   Int
    toScore     Int
    loanAmount  Float
}


model DataProvisioningConfig {
    id              String @id @default(uuid())
    name            String
    columns         String // JSON stored as string
    
    provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    providerId      String

    uploads         DataProvisioningUpload[]
    provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
    id              String      @id @default(uuid())
    fileName        String
    rowCount        Int
    uploadedAt      DateTime    @default(now())
    uploadedBy      String

    config          DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId        String
}

model ProvisionedData {
    id String @id @default(uuid())
    data String // JSON stored as string
    createdAt DateTime @default(now())

    customer Customer @relation(fields: [customerId], references: [id])
    customerId String
    
    config DataProvisioningConfig @relation(fields: [configId], references: [id])
    configId String
    
    @@unique([customerId, configId])
}

model LedgerAccount {
    id String @id @default(uuid())
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    name String
    type String // Receivable, Received
    category String // Principal, Interest, Penalty
    balance Float @default(0)
}
