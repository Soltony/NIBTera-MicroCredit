// datasource db specifies the database provider and connection URL.
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// Models for the application core entities.

model LoanProvider {
  id                         String                        @id @default(uuid())
  name                       String                        @unique
  icon                       String                        @db.NVarChar(MAX)
  colorHex                   String?
  displayOrder               Int                           @default(0)
  accountNumber              String?
  initialBalance             Float                         @default(0)
  allowMultipleProviderLoans Boolean                       @default(false)
  allowCrossProviderLoans    Boolean                       @default(false)
  createdAt                  DateTime                      @default(now())
  updatedAt                  DateTime                      @updatedAt
  products                   LoanProduct[]
  users                      User[]
  scoringParameters          ScoringParameter[]
  dataProvisioningConfigs    DataProvisioningConfig[]
  loans                      Loan[]
  ledgerAccounts             LedgerAccount[]
  scoringHistory             ScoringConfigurationHistory[]
}

model LoanProduct {
  id                          String                        @id @default(uuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                  String
  name                        String
  description                 String?
  icon                        String                        @db.NVarChar(MAX)
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int                           @default(30)
  status                      String                        @default("Active") // e.g., Active, Disabled
  serviceFee                  String? // JSON stored as string
  dailyFee                    String? // JSON stored as string
  penaltyRules                String? // JSON stored as string
  serviceFeeEnabled           Boolean                       @default(false)
  dailyFeeEnabled             Boolean                       @default(false)
  penaltyRulesEnabled         Boolean                       @default(false)
  dataProvisioningEnabled     Boolean                       @default(false)
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  scoringConfigurationHistory ScoringConfigurationHistory[]

  @@unique([name, providerId])
}

model Loan {
  id                String       @id @default(uuid())
  customer          Customer     @relation(fields: [customerId], references: [id])
  customerId        String
  provider          LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId        String
  product           LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId         String
  loanAmount        Float
  serviceFee        Float        @default(0)
  penaltyAmount     Float        @default(0)
  disbursedDate     DateTime
  dueDate           DateTime
  repaymentStatus   String // e.g., Unpaid, Paid, Overdue
  repaidAmount      Float?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  payments          Payment[]
}

model Customer {
  id              String            @id @default(uuid())
  age             Int
  monthlyIncome   Float
  gender          String
  educationLevel  String
  loanHistory     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  loans           Loan[]
  provisionedData ProvisionedData[]
}

model Payment {
  id                              String   @id @default(uuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String // JSON stored as string
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String        @default("Active") // e.g., Active, Inactive
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ScoringParameter {
  id         String       @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  weight     Int
  rules      Rule[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Rule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
  createdAt   DateTime         @default(now())
}

model LoanAmountTier {
  id         String      @id @default(uuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
  createdAt  DateTime    @default(now())
}

model ScoringConfigurationHistory {
  id         String        @id @default(uuid())
  provider   LoanProvider  @relation(fields: [providerId], references: [id])
  providerId String
  parameters String // JSON stored as string
  savedAt    DateTime      @default(now())
  appliedProducts LoanProduct[] @relation(onDelete: NoAction, onUpdate: NoAction)
}

model DataProvisioningConfig {
  id         String     @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  columns    String // JSON stored as string
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  products   LoanProduct[]
  uploads    DataProvisioningUpload[]
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id          String                 @id @default(uuid())
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  fileName    String
  rowCount    Int
  uploadedBy  String
  uploadedAt  DateTime               @default(now())
}

model ProvisionedData {
  id         String                 @id @default(uuid())
  customer   Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   String
  data       String                 @db.NVarChar(MAX) // Storing row data as a JSON string
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([customerId, configId])
}

model LedgerAccount {
  id         String       @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  type       String // Receivable or Received
  category   String // Principal, Interest, Penalty
  balance    Float        @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
