// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Loan {
  id                  String   @id @default(uuid())
  customerId          String
  providerId          String
  productId           String
  loanAmount          Float
  serviceFee          Float
  disbursedDate       DateTime
  dueDate             DateTime
  repaymentStatus     String
  repaidAmount        Float?
  penaltyAmount       Float
  createdAt           DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])
  provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  product  LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  payments Payment[]
}

model Payment {
  id                              String   @id @default(uuid())
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  loan Loan @relation(fields: [loanId], references: [id])
}

model Customer {
  id              String @id
  age             Int
  gender          String
  monthlyIncome   Float
  educationLevel  String
  loanHistory     String
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model LoanProvider {
  id                          String                        @id @default(uuid())
  name                        String                        @unique
  icon                        String                        @db.NVarChar(MAX)
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float
  allowMultipleProviderLoans  Boolean                       @default(false)
  allowCrossProviderLoans     Boolean                       @default(true)
  products                    LoanProduct[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  users                       User[]
  ledgerAccounts              LedgerAccount[]
  scoringParameters           ScoringParameter[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
}

model LoanProduct {
  id                            String                        @id @default(uuid())
  provider                      LoanProvider                  @relation(fields: [providerId], references: [id])
  providerId                    String
  name                          String
  description                   String
  icon                          String                        @db.NVarChar(MAX)
  minLoan                       Float?
  maxLoan                       Float?
  duration                      Int?
  status                        String                        @default("Active")
  serviceFee                    String? // JSON stored as string
  dailyFee                      String? // JSON stored as string
  penaltyRules                  String? // JSON stored as string
  serviceFeeEnabled             Boolean                       @default(true)
  dailyFeeEnabled               Boolean                       @default(true)
  penaltyRulesEnabled           Boolean                       @default(true)
  dataProvisioningEnabled       Boolean                       @default(false)
  dataProvisioningConfigId      String?
  dataProvisioningConfig        DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id])
  loans                         Loan[]
  loanAmountTiers               LoanAmountTier[]
  scoringConfigurationHistories ProductsOnScoringHistories[]

  @@unique([name, providerId])
}

model LoanAmountTier {
  id         String @id @default(uuid())
  product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  fromScore  Int
  toScore    Int
  loanAmount Float
}

model ScoringParameter {
  id         String @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      ScoringRule[]
}

model ScoringRule {
  id          String           @id @default(uuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
  id              String                         @id @default(uuid())
  provider        LoanProvider                   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  parameters      String
  savedAt         DateTime                       @default(now())
  appliedProducts ProductsOnScoringHistories[]
}

// Explicit join table
model ProductsOnScoringHistories {
  product          LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  scoringHistory   ScoringConfigurationHistory @relation(fields: [scoringHistoryId], references: [id], onDelete: Cascade)
  scoringHistoryId String

  @@id([productId, scoringHistoryId])
}

model DataProvisioningConfig {
  id          String   @id @default(uuid())
  provider    LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String
  name        String
  columns     String // JSON stored as string
  uploads     DataProvisioningUpload[]
  products    LoanProduct[]
}

model DataProvisioningUpload {
  id          String                 @id @default(uuid())
  config      DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId    String
  fileName    String
  rowCount    Int
  uploadedAt  DateTime               @default(now())
  uploadedBy  String
}

model ProvisionedData {
  id         String @id @default(uuid())
  customerId String
  configId   String
  data       String // JSON stored as string

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([customerId, configId])
}

model LedgerAccount {
  id         String   @id @default(uuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  type       String // 'Receivable' | 'Received'
  category   String // 'Principal' | 'Interest' | 'Penalty'
  balance    Float    @default(0)
}

// User and Role Management
model User {
  id            String        @id @default(uuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  roleId        String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  loanProviderId String?
  
  role          Role          @relation(fields: [roleId], references: [id])
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  permissions String // JSON stored as string
  users       User[]
}
