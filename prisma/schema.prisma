
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model LoanProvider {
  id                          String                        @id @default(cuid())
  name                        String                        @unique
  icon                        String
  colorHex                    String?
  displayOrder                Int                           @default(0)
  accountNumber               String?
  initialBalance              Float?                        @default(0)
  allowMultipleProviderLoans  Boolean?                      @default(false)
  allowCrossProviderLoans     Boolean?                      @default(false)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  
  products                    LoanProduct[]
  users                       User[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  scoringParameters           ScoringParameter[]
  scoringHistory              ScoringConfigurationHistory[]
  loans                       Loan[]
  ledgerAccounts              LedgerAccount[]
}

model LoanProduct {
  id                          String                        @id @default(cuid())
  provider                    LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId                  String
  name                        String
  description                 String?
  icon                        String
  minLoan                     Float?
  maxLoan                     Float?
  duration                    Int?
  serviceFeeEnabled           Boolean?
  serviceFee                  String?
  dailyFeeEnabled             Boolean?
  dailyFee                    String?
  penaltyRulesEnabled         Boolean?
  penaltyRules                String?
  dataProvisioningEnabled     Boolean?
  dataProvisioningConfigId    String?
  dataProvisioningConfig      DataProvisioningConfig?       @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull)
  loans                       Loan[]
  loanAmountTiers             LoanAmountTier[]
  status                      String                        @default("Active")
  allowMultipleLoans          Boolean                       @default(false)
  scoringConfigurations       ScoringConfigurationProduct[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt

  @@unique([name, providerId])
}

model DataProvisioningConfig {
  id                String          @id @default(cuid())
  provider          LoanProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId        String
  name              String
  columns           String
  uploads           DataProvisioningUpload[]
  products          LoanProduct[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model DataProvisioningUpload {
  id           String                   @id @default(cuid())
  config       DataProvisioningConfig   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId     String
  fileName     String
  rowCount     Int
  uploadedAt   DateTime                 @default(now())
  uploadedBy   String
}

model ProvisionedData {
    id         String      @id @default(cuid())
    borrower   Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
    borrowerId String
    config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId   String
    data       String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    
    @@unique([borrowerId, configId])
}

model Loan {
  id              String       @id @default(cuid())
  borrowerId      String
  loanAmount      Float
  serviceFee      Float
  repaidAmount    Float?
  penaltyAmount   Float        @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  provider        LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction)
  providerId      String
  product         LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId       String
  payments        Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  loan                            Loan     @relation(fields: [loanId], references: [id])
  loanId                          String
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?
  createdAt                       DateTime @default(now())
}

model ScoringParameter {
  id         String       @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  weight     Int
  rules      Rule[]
}

model Rule {
  id          String           @id @default(cuid())
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
  field       String
  condition   String
  value       String
  score       Int
}

model ScoringConfigurationHistory {
    id              String                        @id @default(cuid())
    provider        LoanProvider                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId      String
    parameters      String
    savedAt         DateTime                      @default(now())
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id          String                        @id @default(cuid())
    config      ScoringConfigurationHistory   @relation(fields: [configId], references: [id], onDelete: Cascade)
    configId    String
    product     LoanProduct                   @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    assignedAt  DateTime                      @default(now())
    assignedBy  String
    
    @@unique([configId, productId])
}

model LoanAmountTier {
    id         String      @id @default(cuid())
    product    LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId  String
    fromScore  Int
    toScore    Int
    loanAmount Float
}

model Borrower {
    id              String            @id
    provisionedData ProvisionedData[]
}

// Security and User Management

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String
  users       User[]
}

model LedgerAccount {
  id         String       @id @default(cuid())
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
  name       String
  type       String // Receivable, Received
  category   String // Principal, Interest, Penalty
  balance    Float        @default(0)
  
  @@unique([providerId, name])
}
