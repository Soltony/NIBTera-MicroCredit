// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoanProvider {
  id                        String                        @id @default(cuid())
  name                      String                        @unique
  icon                      String                        @db.Text
  colorHex                  String?
  displayOrder              Int                           @default(0)
  accountNumber             String?
  initialBalance            Float                         @default(0)
  allowMultipleProviderLoans Boolean                      @default(false)
  allowCrossProviderLoans   Boolean                      @default(false)

  // Relationships
  users                       User[]
  products                    LoanProduct[]
  scoringParameters           ScoringParameter[]
  dataProvisioningConfigs     DataProvisioningConfig[]
  ledgerAccounts              LedgerAccount[]
  scoringConfigurationHistory ScoringConfigurationHistory[]
  loans                       Loan[]
}

model LoanProduct {
  id                         String         @id @default(cuid())
  name                       String
  description                String?
  icon                       String         @db.Text
  minLoan                    Float
  maxLoan                    Float
  duration                   Int
  status                     String         @default("Active")
  allowMultipleLoans         Boolean        @default(false)
  serviceFee                 String? // JSON stored as string
  dailyFee                   String? // JSON stored as string
  penaltyRules               String? // JSON stored as string
  serviceFeeEnabled          Boolean?
  dailyFeeEnabled            Boolean?
  penaltyRulesEnabled        Boolean?
  dataProvisioningEnabled    Boolean?
  dataProvisioningConfigId   String?

  // Relationships
  provider                 LoanProvider                @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId               String
  loans                    Loan[]
  loanAmountTiers          LoanAmountTier[]
  scoringConfigurationProducts ScoringConfigurationProduct[]
  dataProvisioningConfig   DataProvisioningConfig?     @relation(fields: [dataProvisioningConfigId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([name, providerId])
}

model Loan {
  id              String   @id @default(cuid())
  loanAmount      Float
  serviceFee      Float    @default(0)
  penaltyAmount   Float    @default(0)
  disbursedDate   DateTime
  dueDate         DateTime
  repaymentStatus String
  repaidAmount    Float?

  // Relationships
  provider         LoanProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId       String
  product          LoanProduct  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId        String
  borrower         Borrower     @relation(fields: [borrowerId], references: [id])
  borrowerId       String
  payments         Payment[]
}

model Payment {
  id                              String   @id @default(cuid())
  amount                          Float
  date                            DateTime
  outstandingBalanceBeforePayment Float?

  // Relationships
  loan   Loan   @relation(fields: [loanId], references: [id])
  loanId String
}

model Borrower {
  id             String            @id
  provisionedData ProvisionedData[]
  loans           Loan[]
}

model ProvisionedData {
  id         String   @id @default(cuid())
  data       String   @db.Text
  createdAt  DateTime @default(now())

  // Relationships
  borrower   Borrower               @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId String
  config     DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   String

  @@unique([borrowerId, configId])
}


model DataProvisioningConfig {
  id         String   @id @default(cuid())
  name       String
  columns    String   @db.Text
  uploads    DataProvisioningUpload[]
  products   LoanProduct[]

  // Relationships
  provider        LoanProvider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId      String
  provisionedData ProvisionedData[]
}

model DataProvisioningUpload {
  id         String   @id @default(cuid())
  fileName   String
  rowCount   Int
  uploadedAt DateTime @default(now())
  uploadedBy String

  // Relationships
  config   DataProvisioningConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId String
}

model ScoringParameter {
  id       String @id @default(cuid())
  name     String
  weight   Int
  rules    Rule[]

  // Relationships
  provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
}

model Rule {
  id          String           @id @default(cuid())
  field       String
  condition   String
  value       String
  score       Int

  // Relationships
  parameter   ScoringParameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId String
}

model LoanAmountTier {
  id         String      @id @default(cuid())
  fromScore  Int
  toScore    Int
  loanAmount Float

  // Relationships
  product   LoanProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ScoringConfigurationHistory {
    id         String   @id @default(cuid())
    savedAt    DateTime @default(now())
    parameters String   @db.Text

    // Relationships
    provider   LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
    providerId String
    appliedProducts ScoringConfigurationProduct[]
}

model ScoringConfigurationProduct {
    id         String   @id @default(cuid())
    assignedAt DateTime @default(now())
    assignedBy String

    // Relationships
    configId   String
    config     ScoringConfigurationHistory @relation(fields: [configId], references: [id], onDelete: Cascade)
    productId  String
    product    LoanProduct                 @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([configId, productId])
}

model User {
  id            String        @id @default(cuid())
  fullName      String
  email         String        @unique
  phoneNumber   String        @unique
  password      String
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  loanProvider  LoanProvider? @relation(fields: [loanProviderId], references: [id])
  loanProviderId String?
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String // JSON stored as a string
  users       User[]
}

model LedgerAccount {
    id String @id @default(cuid())
    providerId String
    name String
    type String // Receivable or Received
    category String // Principal, Interest, or Penalty
    balance Float @default(0.0)

    // Relationships
    provider LoanProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}
